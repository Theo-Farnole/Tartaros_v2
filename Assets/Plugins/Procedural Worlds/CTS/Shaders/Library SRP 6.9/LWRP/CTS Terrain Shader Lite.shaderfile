Shader "CTS/LWRP/CTS Terrain Shader Lite"
{
    Properties
    {
		_Geological_Tiling_Far("Geological_Tiling_Far", Range( 0 , 1000)) = 87
		_Geological_Tiling_Close("Geological_Tiling_Close", Range( 0 , 1000)) = 87
		_Geological_Map_Offset_Far("Geological_Map_Offset _Far", Range( 0 , 1)) = 1
		_Geological_Map_Offset_Close("Geological_Map_Offset _Close", Range( 0 , 1)) = 1
		_Geological_Map_Close_Power("Geological_Map_Close_Power", Range( 0 , 1)) = 0
		_Geological_Map_Far_Power("Geological_Map_Far_Power", Range( 0 , 1)) = 1
		_UV_Mix_Power("UV_Mix_Power", Range( 0.01 , 10)) = 4
		_UV_Mix_Start_Distance("UV_Mix_Start_Distance", Range( 0 , 100000)) = 400
		_Perlin_Normal_Tiling_Close("Perlin_Normal_Tiling_Close", Range( 0.01 , 1000)) = 40
		_Perlin_Normal_Tiling_Far("Perlin_Normal_Tiling_Far", Range( 0.01 , 1000)) = 40
		_Perlin_Normal_Power("Perlin_Normal_Power", Range( 0 , 10)) = 1
		_Perlin_Normal_Power_Close("Perlin_Normal_Power_Close", Range( 0 , 10)) = 0.5
		_Terrain_Smoothness("Terrain_Smoothness", Range( 0 , 2)) = 1
		_Terrain_Specular("Terrain_Specular", Range( 0 , 3)) = 1
		_Texture_1_Tiling("Texture_1_Tiling", Range( 0.0001 , 100)) = 15
		_Texture_2_Tiling("Texture_2_Tiling", Range( 0.0001 , 100)) = 15
		_Texture_3_Tiling("Texture_3_Tiling", Range( 0.0001 , 100)) = 15
		_Texture_4_Tiling("Texture_4_Tiling", Range( 0.0001 , 100)) = 15
		_Texture_5_Tiling("Texture_5_Tiling", Range( 0.0001 , 100)) = 15
		_Texture_6_Tiling("Texture_6_Tiling", Range( 0.0001 , 100)) = 15
		_Texture_7_Tiling("Texture_7_Tiling", Range( 0.0001 , 100)) = 15
		_Texture_8_Tiling("Texture_8_Tiling", Range( 0.0001 , 100)) = 15
		_Texture_9_Tiling("Texture_9_Tiling", Range( 0.0001 , 100)) = 15
		_Texture_10_Tiling("Texture_10_Tiling", Range( 0.0001 , 100)) = 15
		_Texture_11_Tiling("Texture_11_Tiling", Range( 0.0001 , 100)) = 15
		_Texture_12_Tiling("Texture_12_Tiling", Range( 0.0001 , 100)) = 15
		_Texture_13_Tiling("Texture_13_Tiling", Range( 0.0001 , 100)) = 15
		_Texture_14_Tiling("Texture_14_Tiling", Range( 0.0001 , 100)) = 15
		_Texture_15_Tiling("Texture_15_Tiling", Range( 0.0001 , 100)) = 15
		_Texture_16_Tiling("Texture_16_Tiling", Range( 0.0001 , 100)) = 15
		_Texture_1_Far_Multiplier("Texture_1_Far_Multiplier", Range( 0 , 10)) = 3
		_Texture_2_Far_Multiplier("Texture_2_Far_Multiplier", Range( 0 , 10)) = 3
		_Texture_3_Far_Multiplier("Texture_3_Far_Multiplier", Range( 0 , 10)) = 3
		_Texture_4_Far_Multiplier("Texture_4_Far_Multiplier", Range( 0 , 10)) = 3
		_Texture_5_Far_Multiplier("Texture_5_Far_Multiplier", Range( 0 , 10)) = 3
		_Texture_6_Far_Multiplier("Texture_6_Far_Multiplier", Range( 0 , 10)) = 3
		_Texture_7_Far_Multiplier("Texture_7_Far_Multiplier", Range( 0 , 10)) = 3
		_Texture_8_Far_Multiplier("Texture_8_Far_Multiplier", Range( 0 , 10)) = 3
		_Texture_9_Far_Multiplier("Texture_9_Far_Multiplier", Range( 0 , 10)) = 3
		_Texture_10_Far_Multiplier("Texture_10_Far_Multiplier", Range( 0 , 10)) = 3
		_Texture_11_Far_Multiplier("Texture_11_Far_Multiplier", Range( 0 , 10)) = 3
		_Texture_12_Far_Multiplier("Texture_12_Far_Multiplier", Range( 0 , 10)) = 3
		_Texture_13_Far_Multiplier("Texture_13_Far_Multiplier", Range( 0 , 10)) = 3
		_Texture_14_Far_Multiplier("Texture_14_Far_Multiplier", Range( 0 , 10)) = 3
		_Texture_15_Far_Multiplier("Texture_15_Far_Multiplier", Range( 0 , 10)) = 3
		_Texture_16_Far_Multiplier("Texture_16_Far_Multiplier", Range( 0 , 10)) = 3
		_Texture_1_Perlin_Power("Texture_1_Perlin_Power", Range( 0 , 1)) = 0
		_Texture_2_Perlin_Power("Texture_2_Perlin_Power", Range( 0 , 1)) = 0
		_Texture_3_Perlin_Power("Texture_3_Perlin_Power", Range( 0 , 1)) = 0
		_Texture_4_Perlin_Power("Texture_4_Perlin_Power", Range( 0 , 1)) = 0
		_Texture_5_Perlin_Power("Texture_5_Perlin_Power", Range( 0 , 1)) = 0
		_Texture_6_Perlin_Power("Texture_6_Perlin_Power", Range( 0 , 1)) = 0
		_Texture_7_Perlin_Power("Texture_7_Perlin_Power", Range( 0 , 1)) = 0
		_Texture_8_Perlin_Power("Texture_8_Perlin_Power", Range( 0 , 1)) = 0
		_Texture_9_Perlin_Power("Texture_9_Perlin_Power", Range( 0 , 1)) = 0
		_Texture_10_Perlin_Power("Texture_10_Perlin_Power", Range( 0 , 1)) = 0
		_Texture_11_Perlin_Power("Texture_11_Perlin_Power", Range( 0 , 1)) = 0
		_Texture_12_Perlin_Power("Texture_12_Perlin_Power", Range( 0 , 1)) = 0
		_Texture_13_Perlin_Power("Texture_13_Perlin_Power", Range( 0 , 1)) = 0
		_Texture_14_Perlin_Power("Texture_14_Perlin_Power", Range( 0 , 1)) = 0
		_Texture_15_Perlin_Power("Texture_15_Perlin_Power", Range( 0 , 1)) = 0
		_Texture_16_Perlin_Power("Texture_16_Perlin_Power", Range( 0 , 1)) = 0
		_Texture_1_Geological_Power("Texture_1_Geological_Power", Range( 0 , 5)) = 1
		_Texture_2_Geological_Power("Texture_2_Geological_Power", Range( 0 , 5)) = 1
		_Texture_3_Geological_Power("Texture_3_Geological_Power", Range( 0 , 5)) = 1
		_Texture_4_Geological_Power("Texture_4_Geological_Power", Range( 0 , 5)) = 1
		_Texture_5_Geological_Power("Texture_5_Geological_Power", Range( 0 , 5)) = 1
		_Texture_Array_Normal("Texture_Array_Normal", 2DArray ) = "" {}
		_Texture_6_Geological_Power("Texture_6_Geological_Power", Range( 0 , 5)) = 1
		_Texture_7_Geological_Power("Texture_7_Geological_Power", Range( 0 , 5)) = 1
		_Texture_8_Geological_Power("Texture_8_Geological_Power", Range( 0 , 5)) = 1
		_Texture_9_Geological_Power("Texture_9_Geological_Power", Range( 0 , 5)) = 1
		_Texture_10_Geological_Power("Texture_10_Geological_Power", Range( 0 , 5)) = 1
		_Texture_11_Geological_Power("Texture_11_Geological_Power", Range( 0 , 5)) = 1
		_Texture_12_Geological_Power("Texture_12_Geological_Power", Range( 0 , 5)) = 1
		_Texture_13_Geological_Power("Texture_13_Geological_Power", Range( 0 , 5)) = 1
		_Texture_14_Geological_Power("Texture_14_Geological_Power", Range( 0 , 5)) = 1
		_Texture_15_Geological_Power("Texture_15_Geological_Power", Range( 0 , 5)) = 1
		_Texture_16_Geological_Power("Texture_16_Geological_Power", Range( 0 , 5)) = 1
		_Texture_Array_Albedo("Texture_Array_Albedo", 2DArray ) = "" {}
		_Texture_Perlin_Normal_Index("Texture_Perlin_Normal_Index", Int) = -1
		_Texture_1_Normal_Power("Texture_1_Normal_Power", Range( 0 , 5)) = 1
		_Texture_2_Normal_Power("Texture_2_Normal_Power", Range( 0 , 5)) = 1
		_Texture_3_Normal_Power("Texture_3_Normal_Power", Range( 0 , 5)) = 1
		_Texture_4_Normal_Power("Texture_4_Normal_Power", Range( 0 , 5)) = 1
		_Texture_5_Normal_Power("Texture_5_Normal_Power", Range( 0 , 5)) = 1
		_Texture_6_Normal_Power("Texture_6_Normal_Power", Range( 0 , 5)) = 1
		_Texture_7_Normal_Power("Texture_7_Normal_Power", Range( 0 , 5)) = 1
		_Texture_8_Normal_Power("Texture_8_Normal_Power", Range( 0 , 5)) = 1
		_Texture_9_Normal_Power("Texture_9_Normal_Power", Range( 0 , 5)) = 1
		_Texture_10_Normal_Power("Texture_10_Normal_Power", Range( 0 , 5)) = 1
		_Texture_11_Normal_Power("Texture_11_Normal_Power", Range( 0 , 5)) = 1
		_Texture_12_Normal_Power("Texture_12_Normal_Power", Range( 0 , 5)) = 1
		_Texture_13_Normal_Power("Texture_13_Normal_Power", Range( 0 , 5)) = 1
		_Texture_14_Normal_Power("Texture_14_Normal_Power", Range( 0 , 5)) = 1
		_Texture_15_Normal_Power("Texture_15_Normal_Power", Range( 0 , 5)) = 1
		_Texture_16_Normal_Power("Texture_16_Normal_Power", Range( 0 , 5)) = 1
		_Texture_Splat_1("Texture_Splat_1", 2D) = "black" {}
		_Texture_Splat_2("Texture_Splat_2", 2D) = "black" {}
		_Texture_Splat_3("Texture_Splat_3", 2D) = "black" {}
		_Texture_Splat_4("Texture_Splat_4", 2D) = "black" {}
		_Ambient_Occlusion_Power("Ambient_Occlusion_Power", Range( 0 , 1)) = 1
		_Texture_Geological_Map("Texture_Geological_Map", 2D) = "white" {}
		_Texture_4_Color("Texture_4_Color", Vector) = (1,1,1,1)
		_Texture_16_Color("Texture_16_Color", Vector) = (1,1,1,1)
		_Texture_8_Color("Texture_8_Color", Vector) = (1,1,1,1)
		_Texture_7_Color("Texture_7_Color", Vector) = (1,1,1,1)
		_Texture_6_Color("Texture_6_Color", Vector) = (1,1,1,1)
		_Texture_5_Color("Texture_5_Color", Vector) = (1,1,1,1)
		_Texture_2_Color("Texture_2_Color", Vector) = (1,1,1,1)
		_Texture_3_Color("Texture_3_Color", Vector) = (1,1,1,1)
		_Texture_13_Color("Texture_13_Color", Vector) = (1,1,1,1)
		_Texture_15_Color("Texture_15_Color", Vector) = (1,1,1,1)
		_Texture_14_Color("Texture_14_Color", Vector) = (1,1,1,1)
		_Texture_9_Color("Texture_9_Color", Vector) = (1,1,1,1)
		_Texture_12_Color("Texture_12_Color", Vector) = (1,1,1,1)
		_Texture_11_Color("Texture_11_Color", Vector) = (1,1,1,1)
		_Texture_10_Color("Texture_10_Color", Vector) = (1,1,1,1)
		_Texture_1_Color("Texture_1_Color", Vector) = (1,1,1,1)
		_Texture_1_Albedo_Index("Texture_1_Albedo_Index", Range( -1 , 100)) = -1
		_Texture_1_Normal_Index("Texture_1_Normal_Index", Range( -1 , 100)) = -1
		_Texture_2_Albedo_Index("Texture_2_Albedo_Index", Range( -1 , 100)) = -1
		_Texture_3_Albedo_Index("Texture_3_Albedo_Index", Range( -1 , 100)) = -1
		_Texture_3_Normal_Index("Texture_3_Normal_Index", Range( -1 , 100)) = -1
		_Texture_4_Albedo_Index("Texture_4_Albedo_Index", Range( -1 , 100)) = -1
		_Texture_4_Normal_Index("Texture_4_Normal_Index", Range( -1 , 100)) = -1
		_Texture_5_Albedo_Index("Texture_5_Albedo_Index", Range( -1 , 100)) = -1
		_Texture_5_Normal_Index("Texture_5_Normal_Index", Range( -1 , 100)) = -1
		_Texture_6_Normal_Index("Texture_6_Normal_Index", Range( -1 , 100)) = -1
		_Texture_6_Albedo_Index("Texture_6_Albedo_Index", Range( -1 , 100)) = -1
		_Texture_7_Normal_Index("Texture_7_Normal_Index", Range( -1 , 100)) = -1
		_Texture_8_Albedo_Index("Texture_8_Albedo_Index", Range( -1 , 100)) = -1
		_Texture_2_Normal_Index("Texture_2_Normal_Index", Range( -1 , 100)) = -1
		_Texture_8_Normal_Index("Texture_8_Normal_Index", Range( -1 , 100)) = -1
		_Texture_16_Normal_Index("Texture_16_Normal_Index", Range( -1 , 100)) = -1
		_Texture_15_Normal_Index("Texture_15_Normal_Index", Range( -1 , 100)) = -1
		_Texture_15_Albedo_Index("Texture_15_Albedo_Index", Range( -1 , 100)) = -1
		_Texture_7_Albedo_Index("Texture_7_Albedo_Index", Range( -1 , 100)) = -1
		_Texture_14_Normal_Index("Texture_14_Normal_Index", Range( -1 , 100)) = -1
		_Texture_13_Normal_Index("Texture_13_Normal_Index", Range( -1 , 100)) = -1
		_Texture_14_Albedo_Index("Texture_14_Albedo_Index", Range( -1 , 100)) = -1
		_Texture_13_Albedo_Index("Texture_13_Albedo_Index", Range( -1 , 100)) = -1
		_Texture_12_Normal_Index("Texture_12_Normal_Index", Range( -1 , 100)) = -1
		_Texture_12_Albedo_Index("Texture_12_Albedo_Index", Range( -1 , 100)) = -1
		_Texture_11_Normal_Index("Texture_11_Normal_Index", Range( -1 , 100)) = -1
		_Texture_11_Albedo_Index("Texture_11_Albedo_Index", Range( -1 , 100)) = -1
		_Texture_10_Normal_Index("Texture_10_Normal_Index", Range( -1 , 100)) = -1
		_Texture_10_Albedo_Index("Texture_10_Albedo_Index", Range( -1 , 100)) = -1
		_Texture_9_Normal_Index("Texture_9_Normal_Index", Range( -1 , 100)) = -1
		_Texture_9_Albedo_Index("Texture_9_Albedo_Index", Range( -1 , 100)) = -1
		_Texture_16_Albedo_Index("Texture_16_Albedo_Index", Range( -1 , 100)) = -1
    }


    SubShader
    {
		
        Tags { "RenderPipeline"="LightweightPipeline" "RenderType"="Opaque" "Queue"="Geometry-100" }

		Cull Back
		HLSLINCLUDE
		#pragma target 4.0
		ENDHLSL
		
        Pass
        {
			
        	Tags { "LightMode"="LightweightForward" }

        	Name "Base"
			Blend One Zero
			ZWrite On
			ZTest LEqual
			Offset 0 , 0
			ColorMask RGBA
            
        	HLSLPROGRAM
            
            // Required to compile gles 2.0 with standard srp library
            #pragma prefer_hlslcc gles
            #pragma exclude_renderers d3d11_9x
            

        	// -------------------------------------
            // Lightweight Pipeline keywords
            #pragma multi_compile _ _MAIN_LIGHT_SHADOWS
            #pragma multi_compile _ _MAIN_LIGHT_SHADOWS_CASCADE
            #pragma multi_compile _ _ADDITIONAL_LIGHTS_VERTEX _ADDITIONAL_LIGHTS
            #pragma multi_compile _ _ADDITIONAL_LIGHT_SHADOWS
            #pragma multi_compile _ _SHADOWS_SOFT
            #pragma multi_compile _ _MIXED_LIGHTING_SUBTRACTIVE
            
        	// -------------------------------------
            // Unity defined keywords
            #pragma multi_compile _ DIRLIGHTMAP_COMBINED
            #pragma multi_compile _ LIGHTMAP_ON
            #pragma multi_compile_fog

            //--------------------------------------
            // GPU Instancing
            #pragma multi_compile_instancing

            #pragma vertex vert
        	#pragma fragment frag

        	#define ASE_SRP_VERSION 60900
        	#define _NORMALMAP 1
        	#define _SPECULAR_SETUP 1
        	#include "TerrainVertexCTS.hlsl"
        	#pragma instancing_options assumeuniformscaling nomatrices nolightprobe nolightmap


        	#include "Packages/com.unity.render-pipelines.lightweight/ShaderLibrary/Core.hlsl"
        	#include "Packages/com.unity.render-pipelines.lightweight/ShaderLibrary/Lighting.hlsl"
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Color.hlsl"
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/UnityInstancing.hlsl"
        	#include "Packages/com.unity.render-pipelines.lightweight/ShaderLibrary/ShaderGraphFunctions.hlsl"

			sampler2D _Texture_Splat_4;
			sampler2D _Texture_Splat_3;
			sampler2D _Texture_Splat_2;
			sampler2D _Texture_Splat_1;
			half _Texture_1_Albedo_Index;
			TEXTURE2D_ARRAY( _Texture_Array_Albedo );
			uniform SAMPLER( sampler_Texture_Array_Albedo );
			float _Texture_1_Tiling;
			half _Texture_1_Far_Multiplier;
			half _UV_Mix_Start_Distance;
			half _UV_Mix_Power;
			half4 _Texture_1_Color;
			float _Texture_2_Albedo_Index;
			half _Texture_2_Tiling;
			half _Texture_2_Far_Multiplier;
			half4 _Texture_2_Color;
			float _Texture_3_Albedo_Index;
			half _Texture_3_Tiling;
			half _Texture_3_Far_Multiplier;
			half4 _Texture_3_Color;
			float _Texture_4_Albedo_Index;
			half _Texture_4_Tiling;
			half _Texture_4_Far_Multiplier;
			half4 _Texture_4_Color;
			float _Texture_5_Albedo_Index;
			half _Texture_5_Tiling;
			half _Texture_5_Far_Multiplier;
			half4 _Texture_5_Color;
			float _Texture_6_Albedo_Index;
			half _Texture_6_Tiling;
			half _Texture_6_Far_Multiplier;
			half4 _Texture_6_Color;
			float _Texture_7_Albedo_Index;
			half _Texture_7_Tiling;
			half _Texture_7_Far_Multiplier;
			half4 _Texture_7_Color;
			float _Texture_8_Albedo_Index;
			half _Texture_8_Tiling;
			half _Texture_8_Far_Multiplier;
			half4 _Texture_8_Color;
			half _Texture_9_Albedo_Index;
			half _Texture_9_Tiling;
			half _Texture_9_Far_Multiplier;
			half4 _Texture_9_Color;
			half _Texture_10_Albedo_Index;
			half _Texture_10_Tiling;
			half _Texture_10_Far_Multiplier;
			half4 _Texture_10_Color;
			half _Texture_11_Albedo_Index;
			half _Texture_11_Tiling;
			half _Texture_11_Far_Multiplier;
			half4 _Texture_11_Color;
			half _Texture_12_Albedo_Index;
			half _Texture_12_Tiling;
			half _Texture_12_Far_Multiplier;
			half4 _Texture_12_Color;
			half _Texture_13_Albedo_Index;
			half _Texture_13_Tiling;
			half _Texture_13_Far_Multiplier;
			half4 _Texture_13_Color;
			half _Texture_14_Albedo_Index;
			half _Texture_14_Tiling;
			half _Texture_14_Far_Multiplier;
			half4 _Texture_14_Color;
			half _Texture_15_Albedo_Index;
			half _Texture_15_Tiling;
			half _Texture_15_Far_Multiplier;
			half4 _Texture_15_Color;
			half _Texture_16_Albedo_Index;
			half _Texture_16_Tiling;
			half _Texture_16_Far_Multiplier;
			half4 _Texture_16_Color;
			half _Geological_Map_Close_Power;
			sampler2D _Texture_Geological_Map;
			half _Geological_Map_Offset_Close;
			half _Geological_Tiling_Close;
			half _Geological_Map_Far_Power;
			half _Geological_Tiling_Far;
			half _Geological_Map_Offset_Far;
			half _Texture_16_Geological_Power;
			half _Texture_15_Geological_Power;
			half _Texture_14_Geological_Power;
			half _Texture_13_Geological_Power;
			half _Texture_12_Geological_Power;
			half _Texture_11_Geological_Power;
			half _Texture_10_Geological_Power;
			half _Texture_9_Geological_Power;
			half _Texture_8_Geological_Power;
			half _Texture_7_Geological_Power;
			half _Texture_6_Geological_Power;
			half _Texture_5_Geological_Power;
			half _Texture_1_Geological_Power;
			half _Texture_2_Geological_Power;
			half _Texture_4_Geological_Power;
			half _Texture_3_Geological_Power;
			TEXTURE2D_ARRAY( _Texture_Array_Normal );
			uniform SAMPLER( sampler_Texture_Array_Normal );
			half _Perlin_Normal_Tiling_Close;
			int _Texture_Perlin_Normal_Index;
			half _Perlin_Normal_Power_Close;
			half _Perlin_Normal_Tiling_Far;
			half _Perlin_Normal_Power;
			float _Texture_16_Perlin_Power;
			float _Texture_15_Perlin_Power;
			float _Texture_14_Perlin_Power;
			float _Texture_13_Perlin_Power;
			float _Texture_12_Perlin_Power;
			float _Texture_11_Perlin_Power;
			float _Texture_10_Perlin_Power;
			float _Texture_9_Perlin_Power;
			float _Texture_8_Perlin_Power;
			float _Texture_7_Perlin_Power;
			float _Texture_6_Perlin_Power;
			float _Texture_5_Perlin_Power;
			float _Texture_1_Perlin_Power;
			float _Texture_2_Perlin_Power;
			float _Texture_4_Perlin_Power;
			float _Texture_3_Perlin_Power;
			half _Texture_1_Normal_Index;
			half _Texture_1_Normal_Power;
			float _Texture_2_Normal_Index;
			half _Texture_2_Normal_Power;
			float _Texture_3_Normal_Index;
			half _Texture_3_Normal_Power;
			float _Texture_4_Normal_Index;
			half _Texture_4_Normal_Power;
			float _Texture_5_Normal_Index;
			half _Texture_5_Normal_Power;
			float _Texture_6_Normal_Index;
			half _Texture_6_Normal_Power;
			float _Texture_7_Normal_Index;
			half _Texture_7_Normal_Power;
			float _Texture_8_Normal_Index;
			half _Texture_8_Normal_Power;
			half _Texture_9_Normal_Index;
			half _Texture_9_Normal_Power;
			half _Texture_10_Normal_Index;
			half _Texture_10_Normal_Power;
			half _Texture_11_Normal_Index;
			half _Texture_11_Normal_Power;
			half _Texture_12_Normal_Index;
			half _Texture_12_Normal_Power;
			half _Texture_13_Normal_Index;
			half _Texture_13_Normal_Power;
			half _Texture_14_Normal_Index;
			half _Texture_14_Normal_Power;
			half _Texture_15_Normal_Index;
			half _Texture_15_Normal_Power;
			half _Texture_16_Normal_Index;
			half _Texture_16_Normal_Power;
			half _Terrain_Specular;
			half _Terrain_Smoothness;
			half _Ambient_Occlusion_Power;

            struct GraphVertexInput
            {
                float4 vertex : POSITION;
                float3 ase_normal : NORMAL;
                float4 ase_tangent : TANGENT;
                float4 texcoord1 : TEXCOORD1;
				float4 ase_texcoord : TEXCOORD0;
                UNITY_VERTEX_INPUT_INSTANCE_ID
            };

        	struct GraphVertexOutput
            {
                float4 clipPos                : SV_POSITION;
                float4 lightmapUVOrVertexSH	  : TEXCOORD0;
        		half4 fogFactorAndVertexLight : TEXCOORD1; // x: fogFactor, yzw: vertex light
            	float4 shadowCoord            : TEXCOORD2;
				float4 tSpace0					: TEXCOORD3;
				float4 tSpace1					: TEXCOORD4;
				float4 tSpace2					: TEXCOORD5;
				float4 ase_texcoord7 : TEXCOORD7;
                UNITY_VERTEX_INPUT_INSTANCE_ID
            	UNITY_VERTEX_OUTPUT_STEREO
            };

			
            GraphVertexOutput vert (GraphVertexInput v  )
        	{
        		GraphVertexOutput o = (GraphVertexOutput)0;
                UNITY_SETUP_INSTANCE_ID(v);
            	UNITY_TRANSFER_INSTANCE_ID(v, o);
        		UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);
				TerrainInstancing(v.vertex, v.ase_normal, v.ase_texcoord.xy);
				float3 localCalculateTangentsSRP6379 = ( ( v.ase_tangent.xyz * 0.0 ) );
				v.ase_tangent.xyz = cross ( v.ase_normal, float3( 0, 0, 1 ) );
				v.ase_tangent.w = -1;
				
				o.ase_texcoord7.xy = v.ase_texcoord.xy;
				
				//setting value to unused interpolator channels and avoid initialization warnings
				o.ase_texcoord7.zw = 0;
				float3 vertexValue = localCalculateTangentsSRP6379;
				#ifdef ASE_ABSOLUTE_VERTEX_POS
				v.vertex.xyz = vertexValue;
				#else
				v.vertex.xyz += vertexValue;
				#endif
				v.ase_normal =  v.ase_normal ;

        		// Vertex shader outputs defined by graph
                float3 lwWNormal = TransformObjectToWorldNormal(v.ase_normal);
				float3 lwWorldPos = TransformObjectToWorld(v.vertex.xyz);
				float3 lwWTangent = TransformObjectToWorldDir(v.ase_tangent.xyz);
				float3 lwWBinormal = normalize(cross(lwWNormal, lwWTangent) * v.ase_tangent.w);
				o.tSpace0 = float4(lwWTangent.x, lwWBinormal.x, lwWNormal.x, lwWorldPos.x);
				o.tSpace1 = float4(lwWTangent.y, lwWBinormal.y, lwWNormal.y, lwWorldPos.y);
				o.tSpace2 = float4(lwWTangent.z, lwWBinormal.z, lwWNormal.z, lwWorldPos.z);

                VertexPositionInputs vertexInput = GetVertexPositionInputs(v.vertex.xyz);
                
         		// We either sample GI from lightmap or SH.
        	    // Lightmap UV and vertex SH coefficients use the same interpolator ("float2 lightmapUV" for lightmap or "half3 vertexSH" for SH)
                // see DECLARE_LIGHTMAP_OR_SH macro.
        	    // The following funcions initialize the correct variable with correct data
        	    OUTPUT_LIGHTMAP_UV(v.texcoord1, unity_LightmapST, o.lightmapUVOrVertexSH.xy);
        	    OUTPUT_SH(lwWNormal, o.lightmapUVOrVertexSH.xyz);

        	    half3 vertexLight = VertexLighting(vertexInput.positionWS, lwWNormal);
        	    half fogFactor = ComputeFogFactor(vertexInput.positionCS.z);
        	    o.fogFactorAndVertexLight = half4(fogFactor, vertexLight);
        	    o.clipPos = vertexInput.positionCS;

        	#ifdef _MAIN_LIGHT_SHADOWS
        		o.shadowCoord = GetShadowCoord(vertexInput);
        	#endif
        		return o;
        	}

        	half4 frag (GraphVertexOutput IN  ) : SV_Target
            {
            	UNITY_SETUP_INSTANCE_ID(IN);
				UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(IN);

        		float3 WorldSpaceNormal = normalize(float3(IN.tSpace0.z,IN.tSpace1.z,IN.tSpace2.z));
				float3 WorldSpaceTangent = float3(IN.tSpace0.x,IN.tSpace1.x,IN.tSpace2.x);
				float3 WorldSpaceBiTangent = float3(IN.tSpace0.y,IN.tSpace1.y,IN.tSpace2.y);
				float3 WorldSpacePosition = float3(IN.tSpace0.w,IN.tSpace1.w,IN.tSpace2.w);
				InitializeInputData(IN.ase_texcoord7.xy, WorldSpaceNormal, WorldSpaceTangent, WorldSpaceBiTangent);

				float3 WorldSpaceViewDirection = SafeNormalize( _WorldSpaceCameraPos.xyz  - WorldSpacePosition );
    
				float2 uv02588 = IN.ase_texcoord7.xy * float2( 1,1 ) + float2( 0,0 );
				float4 tex2DNode4371 = tex2D( _Texture_Splat_4, uv02588 );
				float4 tex2DNode4370 = tex2D( _Texture_Splat_3, uv02588 );
				float4 tex2DNode4369 = tex2D( _Texture_Splat_2, uv02588 );
				float4 tex2DNode4368 = tex2D( _Texture_Splat_1, uv02588 );
				float3 break6348 = WorldSpacePosition;
				float2 appendResult6281 = (float2(break6348.x , break6348.z));
				half2 Top_Bottom1999 = appendResult6281;
				float temp_output_3830_0 = ( 1.0 / _Texture_1_Tiling );
				float2 appendResult3284 = (float2(temp_output_3830_0 , temp_output_3830_0));
				float2 temp_output_3275_0 = ( Top_Bottom1999 * appendResult3284 );
				float4 texArray3287 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, temp_output_3275_0, _Texture_1_Albedo_Index );
				float4 texArray3293 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, ( temp_output_3275_0 / _Texture_1_Far_Multiplier ), _Texture_1_Albedo_Index );
				float3 break6201 = abs( ( WorldSpacePosition - _WorldSpaceCameraPos ) );
				float clampResult297 = clamp( pow( ( max( max( break6201.x , break6201.y ) , break6201.z ) / _UV_Mix_Start_Distance ) , _UV_Mix_Power ) , 0.0 , 1.0 );
				half UVmixDistance636 = clampResult297;
				float4 lerpResult5739 = lerp( texArray3287 , texArray3293 , UVmixDistance636);
				float4 ifLocalVar6174 = 0;
				UNITY_BRANCH 
				if( _Texture_1_Albedo_Index > -1.0 )
				ifLocalVar6174 = ( lerpResult5739 * _Texture_1_Color );
				half4 Texture_1_Final950 = ifLocalVar6174;
				float temp_output_3831_0 = ( 1.0 / _Texture_2_Tiling );
				float2 appendResult3349 = (float2(temp_output_3831_0 , temp_output_3831_0));
				float2 temp_output_3343_0 = ( Top_Bottom1999 * appendResult3349 );
				float4 texArray3338 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, temp_output_3343_0, _Texture_2_Albedo_Index );
				float4 texArray3339 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, ( temp_output_3343_0 / _Texture_2_Far_Multiplier ), _Texture_2_Albedo_Index );
				float4 lerpResult5749 = lerp( texArray3338 , texArray3339 , UVmixDistance636);
				float4 ifLocalVar6128 = 0;
				UNITY_BRANCH 
				if( _Texture_2_Albedo_Index > -1.0 )
				ifLocalVar6128 = ( lerpResult5749 * _Texture_2_Color );
				half4 Texture_2_Final3385 = ifLocalVar6128;
				float temp_output_3832_0 = ( 1.0 / _Texture_3_Tiling );
				float2 appendResult3415 = (float2(temp_output_3832_0 , temp_output_3832_0));
				float2 temp_output_3410_0 = ( Top_Bottom1999 * appendResult3415 );
				float4 texArray3405 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, temp_output_3410_0, _Texture_3_Albedo_Index );
				float4 texArray3406 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, ( temp_output_3410_0 / _Texture_3_Far_Multiplier ), _Texture_3_Albedo_Index );
				float4 lerpResult5759 = lerp( texArray3405 , texArray3406 , UVmixDistance636);
				float4 ifLocalVar6130 = 0;
				UNITY_BRANCH 
				if( _Texture_3_Albedo_Index > -1.0 )
				ifLocalVar6130 = ( lerpResult5759 * _Texture_3_Color );
				half4 Texture_3_Final3451 = ifLocalVar6130;
				float2 temp_output_3477_0 = ( Top_Bottom1999 * ( 1.0 / _Texture_4_Tiling ) );
				float4 texArray3472 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, temp_output_3477_0, _Texture_4_Albedo_Index );
				float4 texArray3473 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, ( temp_output_3477_0 / _Texture_4_Far_Multiplier ), _Texture_4_Albedo_Index );
				float4 lerpResult5761 = lerp( texArray3472 , texArray3473 , UVmixDistance636);
				float4 ifLocalVar6132 = 0;
				UNITY_BRANCH 
				if( _Texture_4_Albedo_Index > -1.0 )
				ifLocalVar6132 = ( lerpResult5761 * _Texture_4_Color );
				half4 Texture_4_Final3518 = ifLocalVar6132;
				float4 layeredBlendVar5643 = tex2DNode4368;
				float4 layeredBlend5643 = ( lerp( lerp( lerp( lerp( float4( 0,0,0,0 ) , Texture_1_Final950 , layeredBlendVar5643.x ) , Texture_2_Final3385 , layeredBlendVar5643.y ) , Texture_3_Final3451 , layeredBlendVar5643.z ) , Texture_4_Final3518 , layeredBlendVar5643.w ) );
				float temp_output_4397_0 = ( 1.0 / _Texture_5_Tiling );
				float2 appendResult4399 = (float2(temp_output_4397_0 , temp_output_4397_0));
				float2 temp_output_4416_0 = ( Top_Bottom1999 * appendResult4399 );
				float4 texArray4450 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, temp_output_4416_0, _Texture_5_Albedo_Index );
				float4 texArray4445 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, ( temp_output_4416_0 / _Texture_5_Far_Multiplier ), _Texture_5_Albedo_Index );
				float4 lerpResult5789 = lerp( texArray4450 , texArray4445 , UVmixDistance636);
				float4 ifLocalVar6134 = 0;
				UNITY_BRANCH 
				if( _Texture_5_Albedo_Index > -1.0 )
				ifLocalVar6134 = ( lerpResult5789 * _Texture_5_Color );
				half4 Texture_5_Final4396 = ifLocalVar6134;
				float temp_output_4469_0 = ( 1.0 / _Texture_6_Tiling );
				float2 appendResult4471 = (float2(temp_output_4469_0 , temp_output_4469_0));
				float2 temp_output_4485_0 = ( Top_Bottom1999 * appendResult4471 );
				float4 texArray4517 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, temp_output_4485_0, _Texture_6_Albedo_Index );
				float4 texArray4512 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, ( temp_output_4485_0 / _Texture_6_Far_Multiplier ), _Texture_6_Albedo_Index );
				float4 lerpResult5794 = lerp( texArray4517 , texArray4512 , UVmixDistance636);
				float4 ifLocalVar6136 = 0;
				UNITY_BRANCH 
				if( _Texture_6_Albedo_Index > -1.0 )
				ifLocalVar6136 = ( lerpResult5794 * _Texture_6_Color );
				half4 Texture_6_Final4536 = ifLocalVar6136;
				float temp_output_4543_0 = ( 1.0 / _Texture_7_Tiling );
				float2 appendResult4545 = (float2(temp_output_4543_0 , temp_output_4543_0));
				float2 temp_output_4559_0 = ( Top_Bottom1999 * appendResult4545 );
				float4 texArray4591 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, temp_output_4559_0, _Texture_7_Albedo_Index );
				float4 texArray4586 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, ( temp_output_4559_0 / _Texture_7_Far_Multiplier ), _Texture_7_Albedo_Index );
				float4 lerpResult5798 = lerp( texArray4591 , texArray4586 , UVmixDistance636);
				float4 ifLocalVar6139 = 0;
				UNITY_BRANCH 
				if( _Texture_7_Albedo_Index > -1.0 )
				ifLocalVar6139 = ( lerpResult5798 * _Texture_7_Color );
				half4 Texture_7_Final4614 = ifLocalVar6139;
				float temp_output_4617_0 = ( 1.0 / _Texture_8_Tiling );
				float2 appendResult4619 = (float2(temp_output_4617_0 , temp_output_4617_0));
				float2 temp_output_4633_0 = ( Top_Bottom1999 * appendResult4619 );
				float4 texArray4665 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, temp_output_4633_0, _Texture_8_Albedo_Index );
				float4 texArray4660 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, ( temp_output_4633_0 / _Texture_8_Far_Multiplier ), _Texture_8_Albedo_Index );
				float4 lerpResult5802 = lerp( texArray4665 , texArray4660 , UVmixDistance636);
				float4 ifLocalVar6141 = 0;
				UNITY_BRANCH 
				if( _Texture_8_Albedo_Index > -1.0 )
				ifLocalVar6141 = ( lerpResult5802 * _Texture_8_Color );
				half4 Texture_8_Final4689 = ifLocalVar6141;
				float4 layeredBlendVar5644 = tex2DNode4369;
				float4 layeredBlend5644 = ( lerp( lerp( lerp( lerp( layeredBlend5643 , Texture_5_Final4396 , layeredBlendVar5644.x ) , Texture_6_Final4536 , layeredBlendVar5644.y ) , Texture_7_Final4614 , layeredBlendVar5644.z ) , Texture_8_Final4689 , layeredBlendVar5644.w ) );
				float temp_output_4703_0 = ( 1.0 / _Texture_9_Tiling );
				float2 appendResult4736 = (float2(temp_output_4703_0 , temp_output_4703_0));
				float2 temp_output_4712_0 = ( Top_Bottom1999 * appendResult4736 );
				float4 texArray4723 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, temp_output_4712_0, _Texture_9_Albedo_Index );
				float4 texArray4889 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, ( temp_output_4712_0 / _Texture_9_Far_Multiplier ), _Texture_9_Albedo_Index );
				float4 lerpResult5845 = lerp( texArray4723 , texArray4889 , UVmixDistance636);
				float4 ifLocalVar6143 = 0;
				UNITY_BRANCH 
				if( _Texture_9_Albedo_Index > -1.0 )
				ifLocalVar6143 = ( lerpResult5845 * _Texture_9_Color );
				half4 Texture_9_Final4987 = ifLocalVar6143;
				float temp_output_4734_0 = ( 1.0 / _Texture_10_Tiling );
				float2 appendResult4738 = (float2(temp_output_4734_0 , temp_output_4734_0));
				float2 temp_output_4793_0 = ( Top_Bottom1999 * appendResult4738 );
				float4 texArray4899 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, temp_output_4793_0, _Texture_10_Albedo_Index );
				float4 texArray4913 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, ( temp_output_4793_0 / _Texture_10_Far_Multiplier ), _Texture_10_Albedo_Index );
				float4 lerpResult5841 = lerp( texArray4899 , texArray4913 , UVmixDistance636);
				float4 ifLocalVar6145 = 0;
				UNITY_BRANCH 
				if( _Texture_10_Albedo_Index > -1.0 )
				ifLocalVar6145 = ( lerpResult5841 * _Texture_10_Color );
				half4 Texture_10_Final4994 = ifLocalVar6145;
				float temp_output_4739_0 = ( 1.0 / _Texture_11_Tiling );
				float2 appendResult4741 = (float2(temp_output_4739_0 , temp_output_4739_0));
				float2 temp_output_4817_0 = ( Top_Bottom1999 * appendResult4741 );
				float4 texArray4928 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, temp_output_4817_0, _Texture_11_Albedo_Index );
				float4 texArray4923 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, ( temp_output_4817_0 / _Texture_11_Far_Multiplier ), _Texture_11_Albedo_Index );
				float4 lerpResult5837 = lerp( texArray4928 , texArray4923 , UVmixDistance636);
				float4 ifLocalVar6147 = 0;
				UNITY_BRANCH 
				if( _Texture_11_Albedo_Index > -1.0 )
				ifLocalVar6147 = ( lerpResult5837 * _Texture_11_Color );
				half4 Texture_11_Final4996 = ifLocalVar6147;
				float temp_output_4745_0 = ( 1.0 / _Texture_12_Tiling );
				float2 appendResult4751 = (float2(temp_output_4745_0 , temp_output_4745_0));
				float2 temp_output_4849_0 = ( Top_Bottom1999 * appendResult4751 );
				float4 texArray4954 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, temp_output_4849_0, _Texture_12_Albedo_Index );
				float4 texArray4952 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, ( temp_output_4849_0 / _Texture_12_Far_Multiplier ), _Texture_12_Albedo_Index );
				float4 lerpResult5833 = lerp( texArray4954 , texArray4952 , UVmixDistance636);
				float4 ifLocalVar6169 = 0;
				UNITY_BRANCH 
				if( _Texture_12_Albedo_Index > -1.0 )
				ifLocalVar6169 = ( lerpResult5833 * _Texture_12_Color );
				half4 Texture_12_Final4997 = ifLocalVar6169;
				float4 layeredBlendVar5645 = tex2DNode4370;
				float4 layeredBlend5645 = ( lerp( lerp( lerp( lerp( layeredBlend5644 , Texture_9_Final4987 , layeredBlendVar5645.x ) , Texture_10_Final4994 , layeredBlendVar5645.y ) , Texture_11_Final4996 , layeredBlendVar5645.z ) , Texture_12_Final4997 , layeredBlendVar5645.w ) );
				float temp_output_5125_0 = ( 1.0 / _Texture_13_Tiling );
				float2 appendResult5027 = (float2(temp_output_5125_0 , temp_output_5125_0));
				float2 temp_output_5037_0 = ( Top_Bottom1999 * appendResult5027 );
				float4 texArray5043 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, temp_output_5037_0, _Texture_13_Albedo_Index );
				float4 texArray5034 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, ( temp_output_5037_0 / _Texture_13_Far_Multiplier ), _Texture_13_Albedo_Index );
				float4 lerpResult5829 = lerp( texArray5043 , texArray5034 , UVmixDistance636);
				float4 ifLocalVar6151 = 0;
				UNITY_BRANCH 
				if( _Texture_13_Albedo_Index > -1.0 )
				ifLocalVar6151 = ( lerpResult5829 * _Texture_13_Color );
				half4 Texture_13_Final5058 = ifLocalVar6151;
				float temp_output_5006_0 = ( 1.0 / _Texture_14_Tiling );
				float2 appendResult5033 = (float2(temp_output_5006_0 , temp_output_5006_0));
				float2 temp_output_5022_0 = ( Top_Bottom1999 * appendResult5033 );
				float4 texArray5202 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, temp_output_5022_0, _Texture_14_Albedo_Index );
				float4 texArray5171 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, ( temp_output_5022_0 / _Texture_14_Far_Multiplier ), _Texture_14_Albedo_Index );
				float4 lerpResult5825 = lerp( texArray5202 , texArray5171 , UVmixDistance636);
				float4 ifLocalVar6153 = 0;
				UNITY_BRANCH 
				if( _Texture_14_Albedo_Index > -1.0 )
				ifLocalVar6153 = ( lerpResult5825 * _Texture_14_Color );
				half4 Texture_14_Final5163 = ifLocalVar6153;
				float temp_output_5210_0 = ( 1.0 / _Texture_15_Tiling );
				float2 appendResult5212 = (float2(temp_output_5210_0 , temp_output_5210_0));
				float2 temp_output_5226_0 = ( Top_Bottom1999 * appendResult5212 );
				float4 texArray5259 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, temp_output_5226_0, _Texture_15_Albedo_Index );
				float4 texArray5272 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, ( temp_output_5226_0 / _Texture_15_Far_Multiplier ), _Texture_15_Albedo_Index );
				float4 lerpResult5821 = lerp( texArray5259 , texArray5272 , UVmixDistance636);
				float4 ifLocalVar6155 = 0;
				UNITY_BRANCH 
				if( _Texture_15_Albedo_Index > -1.0 )
				ifLocalVar6155 = ( lerpResult5821 * _Texture_15_Color );
				half4 Texture_15_Final5270 = ifLocalVar6155;
				float temp_output_5075_0 = ( 1.0 / _Texture_16_Tiling );
				float2 appendResult5078 = (float2(temp_output_5075_0 , temp_output_5075_0));
				float2 temp_output_5083_0 = ( Top_Bottom1999 * appendResult5078 );
				float4 texArray5139 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, temp_output_5083_0, _Texture_16_Albedo_Index );
				float4 texArray5143 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, ( temp_output_5083_0 / _Texture_16_Far_Multiplier ), _Texture_16_Albedo_Index );
				float4 lerpResult5817 = lerp( texArray5139 , texArray5143 , UVmixDistance636);
				float4 ifLocalVar6183 = 0;
				UNITY_BRANCH 
				if( _Texture_16_Albedo_Index > -1.0 )
				ifLocalVar6183 = ( lerpResult5817 * _Texture_16_Color );
				half4 Texture_16_Final5094 = ifLocalVar6183;
				float4 layeredBlendVar5646 = tex2DNode4371;
				float4 layeredBlend5646 = ( lerp( lerp( lerp( lerp( layeredBlend5645 , Texture_13_Final5058 , layeredBlendVar5646.x ) , Texture_14_Final5163 , layeredBlendVar5646.y ) , Texture_15_Final5270 , layeredBlendVar5646.z ) , Texture_16_Final5094 , layeredBlendVar5646.w ) );
				float3 appendResult6259 = (float3(layeredBlend5646.xyz));
				float2 temp_cast_1 = (( _Geological_Map_Offset_Close + ( WorldSpacePosition.y / _Geological_Tiling_Close ) )).xx;
				float3 appendResult6257 = (float3(tex2D( _Texture_Geological_Map, temp_cast_1 ).rgb));
				float2 temp_cast_3 = (( ( WorldSpacePosition.y / _Geological_Tiling_Far ) + _Geological_Map_Offset_Far )).xx;
				float3 appendResult6256 = (float3(tex2D( _Texture_Geological_Map, temp_cast_3 ).rgb));
				float3 lerpResult1315 = lerp( ( _Geological_Map_Close_Power * ( appendResult6257 + float3( -0.3,-0.3,-0.3 ) ) ) , ( _Geological_Map_Far_Power * ( appendResult6256 + float3( -0.3,-0.3,-0.3 ) ) ) , UVmixDistance636);
				half Splat4_A2546 = tex2DNode4371.a;
				half Splat4_B2545 = tex2DNode4371.b;
				half Splat4_G2544 = tex2DNode4371.g;
				half Splat4_R2543 = tex2DNode4371.r;
				half Splat3_A2540 = tex2DNode4370.a;
				half Splat3_B2539 = tex2DNode4370.b;
				half Splat3_G2538 = tex2DNode4370.g;
				half Splat3_R2537 = tex2DNode4370.r;
				half Splat2_A2109 = tex2DNode4369.a;
				half Splat2_B2108 = tex2DNode4369.b;
				half Splat2_G2107 = tex2DNode4369.g;
				half Splat2_R2106 = tex2DNode4369.r;
				half Splat1_R1438 = tex2DNode4368.r;
				half Splat1_G1441 = tex2DNode4368.g;
				half Splat1_A1491 = tex2DNode4368.a;
				half Splat1_B1442 = tex2DNode4368.b;
				float3 blendOpSrc4362 = appendResult6259;
				float3 blendOpDest4362 = ( lerpResult1315 * ( ( _Texture_16_Geological_Power * Splat4_A2546 ) + ( ( _Texture_15_Geological_Power * Splat4_B2545 ) + ( ( _Texture_14_Geological_Power * Splat4_G2544 ) + ( ( _Texture_13_Geological_Power * Splat4_R2543 ) + ( ( _Texture_12_Geological_Power * Splat3_A2540 ) + ( ( _Texture_11_Geological_Power * Splat3_B2539 ) + ( ( _Texture_10_Geological_Power * Splat3_G2538 ) + ( ( _Texture_9_Geological_Power * Splat3_R2537 ) + ( ( _Texture_8_Geological_Power * Splat2_A2109 ) + ( ( _Texture_7_Geological_Power * Splat2_B2108 ) + ( ( _Texture_6_Geological_Power * Splat2_G2107 ) + ( ( _Texture_5_Geological_Power * Splat2_R2106 ) + ( ( _Texture_1_Geological_Power * Splat1_R1438 ) + ( ( _Texture_2_Geological_Power * Splat1_G1441 ) + ( ( _Texture_4_Geological_Power * Splat1_A1491 ) + ( _Texture_3_Geological_Power * Splat1_B1442 ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) );
				float3 clampResult5715 = clamp( ( saturate( ( blendOpSrc4362 + blendOpDest4362 ) )) , float3( 0,0,0 ) , float3( 1,1,1 ) );
				
				float4 texArray5480 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Normal, sampler_Texture_Array_Normal, ( Top_Bottom1999 / _Perlin_Normal_Tiling_Close ), (float)_Texture_Perlin_Normal_Index );
				float2 appendResult11_g1095 = (float2(texArray5480.w , texArray5480.y));
				float2 temp_output_4_0_g1095 = ( ( ( appendResult11_g1095 * float2( 2,2 ) ) + float2( -1,-1 ) ) * _Perlin_Normal_Power_Close );
				float2 break8_g1095 = temp_output_4_0_g1095;
				float dotResult5_g1095 = dot( temp_output_4_0_g1095 , temp_output_4_0_g1095 );
				float temp_output_9_0_g1095 = sqrt( ( 1.0 - saturate( dotResult5_g1095 ) ) );
				float3 appendResult20_g1095 = (float3(break8_g1095.x , break8_g1095.y , temp_output_9_0_g1095));
				float4 texArray4374 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Normal, sampler_Texture_Array_Normal, ( Top_Bottom1999 / _Perlin_Normal_Tiling_Far ), (float)_Texture_Perlin_Normal_Index );
				float2 appendResult11_g1104 = (float2(texArray4374.w , texArray4374.y));
				float2 temp_output_4_0_g1104 = ( ( ( appendResult11_g1104 * float2( 2,2 ) ) + float2( -1,-1 ) ) * _Perlin_Normal_Power );
				float2 break8_g1104 = temp_output_4_0_g1104;
				float dotResult5_g1104 = dot( temp_output_4_0_g1104 , temp_output_4_0_g1104 );
				float temp_output_9_0_g1104 = sqrt( ( 1.0 - saturate( dotResult5_g1104 ) ) );
				float3 appendResult20_g1104 = (float3(break8_g1104.x , break8_g1104.y , temp_output_9_0_g1104));
				float3 lerpResult5460 = lerp( appendResult20_g1095 , appendResult20_g1104 , UVmixDistance636);
				float clampResult3775 = clamp( ( ( _Texture_16_Perlin_Power * Splat4_A2546 ) + ( ( _Texture_15_Perlin_Power * Splat4_B2545 ) + ( ( _Texture_14_Perlin_Power * Splat4_G2544 ) + ( ( _Texture_13_Perlin_Power * Splat4_R2543 ) + ( ( _Texture_12_Perlin_Power * Splat3_A2540 ) + ( ( _Texture_11_Perlin_Power * Splat3_B2539 ) + ( ( _Texture_10_Perlin_Power * Splat3_G2538 ) + ( ( _Texture_9_Perlin_Power * Splat3_R2537 ) + ( ( _Texture_8_Perlin_Power * Splat2_A2109 ) + ( ( _Texture_7_Perlin_Power * Splat2_B2108 ) + ( ( _Texture_6_Perlin_Power * Splat2_G2107 ) + ( ( _Texture_5_Perlin_Power * Splat2_R2106 ) + ( ( _Texture_1_Perlin_Power * Splat1_R1438 ) + ( ( _Texture_2_Perlin_Power * Splat1_G1441 ) + ( ( _Texture_4_Perlin_Power * Splat1_A1491 ) + ( _Texture_3_Perlin_Power * Splat1_B1442 ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) , 0.0 , 1.0 );
				float3 lerpResult3776 = lerp( float3( 0,0,1 ) , lerpResult5460 , clampResult3775);
				float4 texArray3299 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Normal, sampler_Texture_Array_Normal, temp_output_3275_0, _Texture_1_Normal_Index );
				float2 appendResult11_g1099 = (float2(texArray3299.w , texArray3299.y));
				float2 temp_output_4_0_g1099 = ( ( ( appendResult11_g1099 * float2( 2,2 ) ) + float2( -1,-1 ) ) * _Texture_1_Normal_Power );
				float2 break8_g1099 = temp_output_4_0_g1099;
				float dotResult5_g1099 = dot( temp_output_4_0_g1099 , temp_output_4_0_g1099 );
				float temp_output_9_0_g1099 = sqrt( ( 1.0 - saturate( dotResult5_g1099 ) ) );
				float3 appendResult20_g1099 = (float3(break8_g1099.x , break8_g1099.y , temp_output_9_0_g1099));
				half3 EmptyNRM6172 = half3(0,0,1);
				float3 ifLocalVar6127 = 0;
				UNITY_BRANCH 
				if( _Texture_1_Normal_Index <= -1.0 )
				ifLocalVar6127 = EmptyNRM6172;
				else
				ifLocalVar6127 = appendResult20_g1099;
				half3 Normal_1569 = ifLocalVar6127;
				float4 texArray3350 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Normal, sampler_Texture_Array_Normal, temp_output_3343_0, _Texture_2_Normal_Index );
				float2 appendResult11_g1097 = (float2(texArray3350.w , texArray3350.y));
				float2 temp_output_4_0_g1097 = ( ( ( appendResult11_g1097 * float2( 2,2 ) ) + float2( -1,-1 ) ) * _Texture_2_Normal_Power );
				float2 break8_g1097 = temp_output_4_0_g1097;
				float dotResult5_g1097 = dot( temp_output_4_0_g1097 , temp_output_4_0_g1097 );
				float temp_output_9_0_g1097 = sqrt( ( 1.0 - saturate( dotResult5_g1097 ) ) );
				float3 appendResult20_g1097 = (float3(break8_g1097.x , break8_g1097.y , temp_output_9_0_g1097));
				float3 ifLocalVar6129 = 0;
				UNITY_BRANCH 
				if( _Texture_2_Normal_Index <= -1.0 )
				ifLocalVar6129 = EmptyNRM6172;
				else
				ifLocalVar6129 = appendResult20_g1097;
				half3 Normal_23361 = ifLocalVar6129;
				float4 texArray3416 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Normal, sampler_Texture_Array_Normal, temp_output_3410_0, _Texture_3_Normal_Index );
				float2 appendResult11_g1096 = (float2(texArray3416.w , texArray3416.y));
				float2 temp_output_4_0_g1096 = ( ( ( appendResult11_g1096 * float2( 2,2 ) ) + float2( -1,-1 ) ) * _Texture_3_Normal_Power );
				float2 break8_g1096 = temp_output_4_0_g1096;
				float dotResult5_g1096 = dot( temp_output_4_0_g1096 , temp_output_4_0_g1096 );
				float temp_output_9_0_g1096 = sqrt( ( 1.0 - saturate( dotResult5_g1096 ) ) );
				float3 appendResult20_g1096 = (float3(break8_g1096.x , break8_g1096.y , temp_output_9_0_g1096));
				float3 ifLocalVar6131 = 0;
				UNITY_BRANCH 
				if( _Texture_3_Normal_Index > -1.0 )
				ifLocalVar6131 = appendResult20_g1096;
				half3 Normal_33452 = ifLocalVar6131;
				float4 texArray3483 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Normal, sampler_Texture_Array_Normal, temp_output_3477_0, _Texture_4_Normal_Index );
				float2 appendResult11_g1098 = (float2(texArray3483.w , texArray3483.y));
				float2 temp_output_4_0_g1098 = ( ( ( appendResult11_g1098 * float2( 2,2 ) ) + float2( -1,-1 ) ) * _Texture_4_Normal_Power );
				float2 break8_g1098 = temp_output_4_0_g1098;
				float dotResult5_g1098 = dot( temp_output_4_0_g1098 , temp_output_4_0_g1098 );
				float temp_output_9_0_g1098 = sqrt( ( 1.0 - saturate( dotResult5_g1098 ) ) );
				float3 appendResult20_g1098 = (float3(break8_g1098.x , break8_g1098.y , temp_output_9_0_g1098));
				float3 ifLocalVar6133 = 0;
				UNITY_BRANCH 
				if( _Texture_4_Normal_Index <= -1.0 )
				ifLocalVar6133 = EmptyNRM6172;
				else
				ifLocalVar6133 = appendResult20_g1098;
				half3 Normal_43519 = ifLocalVar6133;
				float4 layeredBlendVar5639 = tex2DNode4368;
				float3 layeredBlend5639 = ( lerp( lerp( lerp( lerp( float3( 0,0,0 ) , Normal_1569 , layeredBlendVar5639.x ) , Normal_23361 , layeredBlendVar5639.y ) , Normal_33452 , layeredBlendVar5639.z ) , Normal_43519 , layeredBlendVar5639.w ) );
				float4 texArray4424 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Normal, sampler_Texture_Array_Normal, temp_output_4416_0, _Texture_5_Normal_Index );
				float2 appendResult11_g1105 = (float2(texArray4424.w , texArray4424.y));
				float2 temp_output_4_0_g1105 = ( ( ( appendResult11_g1105 * float2( 2,2 ) ) + float2( -1,-1 ) ) * _Texture_5_Normal_Power );
				float2 break8_g1105 = temp_output_4_0_g1105;
				float dotResult5_g1105 = dot( temp_output_4_0_g1105 , temp_output_4_0_g1105 );
				float temp_output_9_0_g1105 = sqrt( ( 1.0 - saturate( dotResult5_g1105 ) ) );
				float3 appendResult20_g1105 = (float3(break8_g1105.x , break8_g1105.y , temp_output_9_0_g1105));
				float3 ifLocalVar6135 = 0;
				UNITY_BRANCH 
				if( _Texture_5_Normal_Index <= -1.0 )
				ifLocalVar6135 = EmptyNRM6172;
				else
				ifLocalVar6135 = appendResult20_g1105;
				half3 Normal_54456 = ifLocalVar6135;
				float4 texArray4493 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Normal, sampler_Texture_Array_Normal, temp_output_4485_0, _Texture_6_Normal_Index );
				float2 appendResult11_g1107 = (float2(texArray4493.w , texArray4493.y));
				float2 temp_output_4_0_g1107 = ( ( ( appendResult11_g1107 * float2( 2,2 ) ) + float2( -1,-1 ) ) * _Texture_6_Normal_Power );
				float2 break8_g1107 = temp_output_4_0_g1107;
				float dotResult5_g1107 = dot( temp_output_4_0_g1107 , temp_output_4_0_g1107 );
				float temp_output_9_0_g1107 = sqrt( ( 1.0 - saturate( dotResult5_g1107 ) ) );
				float3 appendResult20_g1107 = (float3(break8_g1107.x , break8_g1107.y , temp_output_9_0_g1107));
				float3 ifLocalVar6138 = 0;
				UNITY_BRANCH 
				if( _Texture_6_Normal_Index <= -1.0 )
				ifLocalVar6138 = EmptyNRM6172;
				else
				ifLocalVar6138 = appendResult20_g1107;
				half3 Normal_64537 = ifLocalVar6138;
				float4 texArray4567 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Normal, sampler_Texture_Array_Normal, temp_output_4559_0, _Texture_7_Normal_Index );
				float2 appendResult11_g1106 = (float2(texArray4567.w , texArray4567.y));
				float2 temp_output_4_0_g1106 = ( ( ( appendResult11_g1106 * float2( 2,2 ) ) + float2( -1,-1 ) ) * _Texture_7_Normal_Power );
				float2 break8_g1106 = temp_output_4_0_g1106;
				float dotResult5_g1106 = dot( temp_output_4_0_g1106 , temp_output_4_0_g1106 );
				float temp_output_9_0_g1106 = sqrt( ( 1.0 - saturate( dotResult5_g1106 ) ) );
				float3 appendResult20_g1106 = (float3(break8_g1106.x , break8_g1106.y , temp_output_9_0_g1106));
				float3 ifLocalVar6140 = 0;
				UNITY_BRANCH 
				if( _Texture_7_Normal_Index <= -1.0 )
				ifLocalVar6140 = EmptyNRM6172;
				else
				ifLocalVar6140 = appendResult20_g1106;
				half3 Normal_74615 = ifLocalVar6140;
				float4 texArray4641 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Normal, sampler_Texture_Array_Normal, temp_output_4633_0, _Texture_8_Normal_Index );
				float2 appendResult11_g1108 = (float2(texArray4641.w , texArray4641.y));
				float2 temp_output_4_0_g1108 = ( ( ( appendResult11_g1108 * float2( 2,2 ) ) + float2( -1,-1 ) ) * _Texture_8_Normal_Power );
				float2 break8_g1108 = temp_output_4_0_g1108;
				float dotResult5_g1108 = dot( temp_output_4_0_g1108 , temp_output_4_0_g1108 );
				float temp_output_9_0_g1108 = sqrt( ( 1.0 - saturate( dotResult5_g1108 ) ) );
				float3 appendResult20_g1108 = (float3(break8_g1108.x , break8_g1108.y , temp_output_9_0_g1108));
				float3 ifLocalVar6142 = 0;
				UNITY_BRANCH 
				if( _Texture_8_Normal_Index <= -1.0 )
				ifLocalVar6142 = EmptyNRM6172;
				else
				ifLocalVar6142 = appendResult20_g1108;
				half3 Normal_84690 = ifLocalVar6142;
				float4 layeredBlendVar5640 = tex2DNode4369;
				float3 layeredBlend5640 = ( lerp( lerp( lerp( lerp( layeredBlend5639 , Normal_54456 , layeredBlendVar5640.x ) , Normal_64537 , layeredBlendVar5640.y ) , Normal_74615 , layeredBlendVar5640.z ) , Normal_84690 , layeredBlendVar5640.w ) );
				float4 texArray4788 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Normal, sampler_Texture_Array_Normal, temp_output_4712_0, _Texture_9_Normal_Index );
				float2 appendResult11_g1102 = (float2(texArray4788.w , texArray4788.y));
				float2 temp_output_4_0_g1102 = ( ( ( appendResult11_g1102 * float2( 2,2 ) ) + float2( -1,-1 ) ) * _Texture_9_Normal_Power );
				float2 break8_g1102 = temp_output_4_0_g1102;
				float dotResult5_g1102 = dot( temp_output_4_0_g1102 , temp_output_4_0_g1102 );
				float temp_output_9_0_g1102 = sqrt( ( 1.0 - saturate( dotResult5_g1102 ) ) );
				float3 appendResult20_g1102 = (float3(break8_g1102.x , break8_g1102.y , temp_output_9_0_g1102));
				float3 ifLocalVar6144 = 0;
				UNITY_BRANCH 
				if( _Texture_9_Normal_Index <= -1.0 )
				ifLocalVar6144 = EmptyNRM6172;
				else
				ifLocalVar6144 = appendResult20_g1102;
				half3 Normal_94897 = ifLocalVar6144;
				float4 texArray4822 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Normal, sampler_Texture_Array_Normal, temp_output_4793_0, _Texture_10_Normal_Index );
				float2 appendResult11_g1100 = (float2(texArray4822.w , texArray4822.y));
				float2 temp_output_4_0_g1100 = ( ( ( appendResult11_g1100 * float2( 2,2 ) ) + float2( -1,-1 ) ) * _Texture_10_Normal_Power );
				float2 break8_g1100 = temp_output_4_0_g1100;
				float dotResult5_g1100 = dot( temp_output_4_0_g1100 , temp_output_4_0_g1100 );
				float temp_output_9_0_g1100 = sqrt( ( 1.0 - saturate( dotResult5_g1100 ) ) );
				float3 appendResult20_g1100 = (float3(break8_g1100.x , break8_g1100.y , temp_output_9_0_g1100));
				float3 ifLocalVar6146 = 0;
				UNITY_BRANCH 
				if( _Texture_10_Normal_Index <= -1.0 )
				ifLocalVar6146 = EmptyNRM6172;
				else
				ifLocalVar6146 = appendResult20_g1100;
				half3 Normal_104918 = ifLocalVar6146;
				float4 texArray4856 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Normal, sampler_Texture_Array_Normal, temp_output_4817_0, _Texture_11_Normal_Index );
				float2 appendResult11_g1101 = (float2(texArray4856.w , texArray4856.y));
				float2 temp_output_4_0_g1101 = ( ( ( appendResult11_g1101 * float2( 2,2 ) ) + float2( -1,-1 ) ) * _Texture_11_Normal_Power );
				float2 break8_g1101 = temp_output_4_0_g1101;
				float dotResult5_g1101 = dot( temp_output_4_0_g1101 , temp_output_4_0_g1101 );
				float temp_output_9_0_g1101 = sqrt( ( 1.0 - saturate( dotResult5_g1101 ) ) );
				float3 appendResult20_g1101 = (float3(break8_g1101.x , break8_g1101.y , temp_output_9_0_g1101));
				float3 ifLocalVar6148 = 0;
				UNITY_BRANCH 
				if( _Texture_11_Normal_Index <= -1.0 )
				ifLocalVar6148 = EmptyNRM6172;
				else
				ifLocalVar6148 = appendResult20_g1101;
				half3 Normal_114948 = ifLocalVar6148;
				float4 texArray4870 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Normal, sampler_Texture_Array_Normal, temp_output_4849_0, _Texture_12_Normal_Index );
				float2 appendResult11_g1103 = (float2(texArray4870.w , texArray4870.y));
				float2 temp_output_4_0_g1103 = ( ( ( appendResult11_g1103 * float2( 2,2 ) ) + float2( -1,-1 ) ) * _Texture_12_Normal_Power );
				float2 break8_g1103 = temp_output_4_0_g1103;
				float dotResult5_g1103 = dot( temp_output_4_0_g1103 , temp_output_4_0_g1103 );
				float temp_output_9_0_g1103 = sqrt( ( 1.0 - saturate( dotResult5_g1103 ) ) );
				float3 appendResult20_g1103 = (float3(break8_g1103.x , break8_g1103.y , temp_output_9_0_g1103));
				float3 ifLocalVar6150 = 0;
				UNITY_BRANCH 
				if( _Texture_12_Normal_Index <= -1.0 )
				ifLocalVar6150 = EmptyNRM6172;
				else
				ifLocalVar6150 = appendResult20_g1103;
				half3 Normal_124962 = ifLocalVar6150;
				float4 layeredBlendVar5641 = tex2DNode4370;
				float3 layeredBlend5641 = ( lerp( lerp( lerp( lerp( layeredBlend5640 , Normal_94897 , layeredBlendVar5641.x ) , Normal_104918 , layeredBlendVar5641.y ) , Normal_114948 , layeredBlendVar5641.z ) , Normal_124962 , layeredBlendVar5641.w ) );
				float4 texArray5120 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Normal, sampler_Texture_Array_Normal, temp_output_5037_0, _Texture_13_Normal_Index );
				float2 appendResult11_g1094 = (float2(texArray5120.w , texArray5120.y));
				float2 temp_output_4_0_g1094 = ( ( ( appendResult11_g1094 * float2( 2,2 ) ) + float2( -1,-1 ) ) * _Texture_13_Normal_Power );
				float2 break8_g1094 = temp_output_4_0_g1094;
				float dotResult5_g1094 = dot( temp_output_4_0_g1094 , temp_output_4_0_g1094 );
				float temp_output_9_0_g1094 = sqrt( ( 1.0 - saturate( dotResult5_g1094 ) ) );
				float3 appendResult20_g1094 = (float3(break8_g1094.x , break8_g1094.y , temp_output_9_0_g1094));
				float3 ifLocalVar6152 = 0;
				UNITY_BRANCH 
				if( _Texture_13_Normal_Index <= -1.0 )
				ifLocalVar6152 = EmptyNRM6172;
				else
				ifLocalVar6152 = appendResult20_g1094;
				half3 Normal_135059 = ifLocalVar6152;
				float4 texArray5178 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Normal, sampler_Texture_Array_Normal, temp_output_5022_0, _Texture_14_Normal_Index );
				float2 appendResult11_g1093 = (float2(texArray5178.w , texArray5178.y));
				float2 temp_output_4_0_g1093 = ( ( ( appendResult11_g1093 * float2( 2,2 ) ) + float2( -1,-1 ) ) * _Texture_14_Normal_Power );
				float2 break8_g1093 = temp_output_4_0_g1093;
				float dotResult5_g1093 = dot( temp_output_4_0_g1093 , temp_output_4_0_g1093 );
				float temp_output_9_0_g1093 = sqrt( ( 1.0 - saturate( dotResult5_g1093 ) ) );
				float3 appendResult20_g1093 = (float3(break8_g1093.x , break8_g1093.y , temp_output_9_0_g1093));
				float3 ifLocalVar6154 = 0;
				UNITY_BRANCH 
				if( _Texture_14_Normal_Index <= -1.0 )
				ifLocalVar6154 = EmptyNRM6172;
				else
				ifLocalVar6154 = appendResult20_g1093;
				half3 Normal_145196 = ifLocalVar6154;
				float4 texArray5246 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Normal, sampler_Texture_Array_Normal, temp_output_5226_0, _Texture_15_Normal_Index );
				float2 appendResult11_g1091 = (float2(texArray5246.w , texArray5246.y));
				float2 temp_output_4_0_g1091 = ( ( ( appendResult11_g1091 * float2( 2,2 ) ) + float2( -1,-1 ) ) * _Texture_15_Normal_Power );
				float2 break8_g1091 = temp_output_4_0_g1091;
				float dotResult5_g1091 = dot( temp_output_4_0_g1091 , temp_output_4_0_g1091 );
				float temp_output_9_0_g1091 = sqrt( ( 1.0 - saturate( dotResult5_g1091 ) ) );
				float3 appendResult20_g1091 = (float3(break8_g1091.x , break8_g1091.y , temp_output_9_0_g1091));
				float3 ifLocalVar6156 = 0;
				UNITY_BRANCH 
				if( _Texture_15_Normal_Index <= -1.0 )
				ifLocalVar6156 = EmptyNRM6172;
				else
				ifLocalVar6156 = appendResult20_g1091;
				half3 Normal_155280 = ifLocalVar6156;
				float4 texArray5099 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Normal, sampler_Texture_Array_Normal, temp_output_5083_0, _Texture_16_Normal_Index );
				float2 appendResult11_g1092 = (float2(texArray5099.w , texArray5099.y));
				float2 temp_output_4_0_g1092 = ( ( ( appendResult11_g1092 * float2( 2,2 ) ) + float2( -1,-1 ) ) * _Texture_16_Normal_Power );
				float2 break8_g1092 = temp_output_4_0_g1092;
				float dotResult5_g1092 = dot( temp_output_4_0_g1092 , temp_output_4_0_g1092 );
				float temp_output_9_0_g1092 = sqrt( ( 1.0 - saturate( dotResult5_g1092 ) ) );
				float3 appendResult20_g1092 = (float3(break8_g1092.x , break8_g1092.y , temp_output_9_0_g1092));
				float3 ifLocalVar6158 = 0;
				UNITY_BRANCH 
				if( _Texture_16_Normal_Index <= -1.0 )
				ifLocalVar6158 = EmptyNRM6172;
				else
				ifLocalVar6158 = appendResult20_g1092;
				half3 Normal_164696 = ifLocalVar6158;
				float4 layeredBlendVar5642 = tex2DNode4371;
				float3 layeredBlend5642 = ( lerp( lerp( lerp( lerp( layeredBlend5641 , Normal_135059 , layeredBlendVar5642.x ) , Normal_145196 , layeredBlendVar5642.y ) , Normal_155280 , layeredBlendVar5642.z ) , Normal_164696 , layeredBlendVar5642.w ) );
				float3 normalizeResult3901 = normalize( layeredBlend5642 );
				
				
		        float3 Albedo = clampResult5715;
				float3 Normal = BlendNormal( lerpResult3776 , normalizeResult3901 );
				float3 Emission = 0;
				float3 Specular = ( ( appendResult6259 * float3( 0.3,0.3,0.3 ) ) * _Terrain_Specular );
				float Metallic = 0;
				float Smoothness = ( layeredBlend5646.w * _Terrain_Smoothness );
				float Occlusion = _Ambient_Occlusion_Power;
				float Alpha = 1;
				float AlphaClipThreshold = 0;

        		InputData inputData;
        		inputData.positionWS = WorldSpacePosition;

        #ifdef _NORMALMAP
        	    inputData.normalWS = normalize(TransformTangentToWorld(Normal, half3x3(WorldSpaceTangent, WorldSpaceBiTangent, WorldSpaceNormal)));
        #else
            #if !SHADER_HINT_NICE_QUALITY
                inputData.normalWS = WorldSpaceNormal;
            #else
        	    inputData.normalWS = normalize(WorldSpaceNormal);
            #endif
        #endif

        #if !SHADER_HINT_NICE_QUALITY
        	    // viewDirection should be normalized here, but we avoid doing it as it's close enough and we save some ALU.
        	    inputData.viewDirectionWS = WorldSpaceViewDirection;
        #else
        	    inputData.viewDirectionWS = normalize(WorldSpaceViewDirection);
        #endif

        	    inputData.shadowCoord = IN.shadowCoord;

        	    inputData.fogCoord = IN.fogFactorAndVertexLight.x;
        	    inputData.vertexLighting = IN.fogFactorAndVertexLight.yzw;
        	    inputData.bakedGI = SAMPLE_GI(IN.lightmapUVOrVertexSH.xy, IN.lightmapUVOrVertexSH.xyz, inputData.normalWS);

        		half4 color = LightweightFragmentPBR(
        			inputData, 
        			Albedo, 
        			Metallic, 
        			Specular, 
        			Smoothness, 
        			Occlusion, 
        			Emission, 
        			Alpha);

			#ifdef TERRAIN_SPLAT_ADDPASS
				color.rgb = MixFogColor(color.rgb, half3( 0, 0, 0 ), IN.fogFactorAndVertexLight.x );
			#else
				color.rgb = MixFog(color.rgb, IN.fogFactorAndVertexLight.x);
			#endif

        #if _AlphaClip
        		clip(Alpha - AlphaClipThreshold);
        #endif

		#if ASE_LW_FINAL_COLOR_ALPHA_MULTIPLY
				color.rgb *= color.a;
		#endif
        		return color;
            }

        	ENDHLSL
        }

		
        Pass
        {
			
        	Name "ShadowCaster"
            Tags { "LightMode"="ShadowCaster" }

			ZWrite On
			ZTest LEqual

            HLSLPROGRAM
            
            // Required to compile gles 2.0 with standard srp library
            #pragma prefer_hlslcc gles
            #pragma exclude_renderers d3d11_9x
            

            //--------------------------------------
            // GPU Instancing
            #pragma multi_compile_instancing

            #pragma vertex ShadowPassVertex
            #pragma fragment ShadowPassFragment

            #define ASE_SRP_VERSION 60900
            #include "TerrainVertexCTS.hlsl"
            #pragma instancing_options assumeuniformscaling nomatrices nolightprobe nolightmap


            #include "Packages/com.unity.render-pipelines.lightweight/ShaderLibrary/Core.hlsl"
            #include "Packages/com.unity.render-pipelines.lightweight/ShaderLibrary/Lighting.hlsl"
            #include "Packages/com.unity.render-pipelines.lightweight/ShaderLibrary/ShaderGraphFunctions.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Color.hlsl"

            struct GraphVertexInput
            {
                float4 vertex : POSITION;
                float3 ase_normal : NORMAL;
				float4 ase_tangent : TANGENT;
                UNITY_VERTEX_INPUT_INSTANCE_ID
            };

			
        	struct VertexOutput
        	{
        	    float4 clipPos      : SV_POSITION;
                
                UNITY_VERTEX_INPUT_INSTANCE_ID
				UNITY_VERTEX_OUTPUT_STEREO
        	};

			
            // x: global clip space bias, y: normal world space bias
            float3 _LightDirection;

            VertexOutput ShadowPassVertex(GraphVertexInput v )
        	{
        	    VertexOutput o;
        	    UNITY_SETUP_INSTANCE_ID(v);
                UNITY_TRANSFER_INSTANCE_ID(v, o);
				 TerrainInstancing(v.vertex, v.ase_normal);
				UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO (o);

				float3 localCalculateTangentsSRP6379 = ( ( v.ase_tangent.xyz * 0.0 ) );
				v.ase_tangent.xyz = cross ( v.ase_normal, float3( 0, 0, 1 ) );
				v.ase_tangent.w = -1;
				
				float3 vertexValue = localCalculateTangentsSRP6379;
				#ifdef ASE_ABSOLUTE_VERTEX_POS
				v.vertex.xyz = vertexValue;
				#else
				v.vertex.xyz += vertexValue;
				#endif

				v.ase_normal =  v.ase_normal ;

        	    float3 positionWS = TransformObjectToWorld(v.vertex.xyz);
                float3 normalWS = TransformObjectToWorldDir(v.ase_normal);

                float invNdotL = 1.0 - saturate(dot(_LightDirection, normalWS));
                float scale = invNdotL * _ShadowBias.y;

                // normal bias is negative since we want to apply an inset normal offset
                positionWS = _LightDirection * _ShadowBias.xxx + positionWS;
				positionWS = normalWS * scale.xxx + positionWS;
                float4 clipPos = TransformWorldToHClip(positionWS);

                // _ShadowBias.x sign depens on if platform has reversed z buffer
                //clipPos.z += _ShadowBias.x;

        	#if UNITY_REVERSED_Z
        	    clipPos.z = min(clipPos.z, clipPos.w * UNITY_NEAR_CLIP_VALUE);
        	#else
        	    clipPos.z = max(clipPos.z, clipPos.w * UNITY_NEAR_CLIP_VALUE);
        	#endif
                o.clipPos = clipPos;

        	    return o;
        	}

            half4 ShadowPassFragment(VertexOutput IN  ) : SV_TARGET
            {
                UNITY_SETUP_INSTANCE_ID(IN);
				UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(IN);

               

				float Alpha = 1;
				float AlphaClipThreshold = AlphaClipThreshold;

         #if _AlphaClip
        		clip(Alpha - AlphaClipThreshold);
        #endif
                return 0;
            }

            ENDHLSL
        }

		
        Pass
        {
			
        	Name "DepthOnly"
            Tags { "LightMode"="DepthOnly" }

            ZWrite On
			ColorMask 0

            HLSLPROGRAM
            
            // Required to compile gles 2.0 with standard srp library
            #pragma prefer_hlslcc gles
            #pragma exclude_renderers d3d11_9x

            //--------------------------------------
            // GPU Instancing
            #pragma multi_compile_instancing

            #pragma vertex vert
            #pragma fragment frag

            #define ASE_SRP_VERSION 60900
            #include "TerrainVertexCTS.hlsl"
            #pragma instancing_options assumeuniformscaling nomatrices nolightprobe nolightmap


            #include "Packages/com.unity.render-pipelines.lightweight/ShaderLibrary/Core.hlsl"
            #include "Packages/com.unity.render-pipelines.lightweight/ShaderLibrary/Lighting.hlsl"
            #include "Packages/com.unity.render-pipelines.lightweight/ShaderLibrary/ShaderGraphFunctions.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Color.hlsl"

			
            struct GraphVertexInput
            {
                float4 vertex : POSITION;
				float3 ase_normal : NORMAL;
				float4 ase_tangent : TANGENT;
                UNITY_VERTEX_INPUT_INSTANCE_ID
            };

        	struct VertexOutput
        	{
        	    float4 clipPos      : SV_POSITION;
                
                UNITY_VERTEX_INPUT_INSTANCE_ID
                UNITY_VERTEX_OUTPUT_STEREO
        	};

			           

            VertexOutput vert(GraphVertexInput v  )
            {
                VertexOutput o = (VertexOutput)0;
        	    UNITY_SETUP_INSTANCE_ID(v);
                UNITY_TRANSFER_INSTANCE_ID(v, o);
                UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);
				TerrainInstancing(v.vertex, v.ase_normal);
				float3 localCalculateTangentsSRP6379 = ( ( v.ase_tangent.xyz * 0.0 ) );
				v.ase_tangent.xyz = cross ( v.ase_normal, float3( 0, 0, 1 ) );
				v.ase_tangent.w = -1;
				
				float3 vertexValue = localCalculateTangentsSRP6379;
				#ifdef ASE_ABSOLUTE_VERTEX_POS
				v.vertex.xyz = vertexValue;
				#else
				v.vertex.xyz += vertexValue;
				#endif

				v.ase_normal =  v.ase_normal ;

        	    o.clipPos = TransformObjectToHClip(v.vertex.xyz);
        	    return o;
            }

            half4 frag(VertexOutput IN  ) : SV_TARGET
            {
                UNITY_SETUP_INSTANCE_ID(IN);

				

				float Alpha = 1;
				float AlphaClipThreshold = AlphaClipThreshold;

         #if _AlphaClip
        		clip(Alpha - AlphaClipThreshold);
        #endif
                return 0;
            }
            ENDHLSL
        }

        // This pass it not used during regular rendering, only for lightmap baking.
		
        Pass
        {
			
        	Name "Meta"
            Tags { "LightMode"="Meta" }

            Cull Off

            HLSLPROGRAM
            
            // Required to compile gles 2.0 with standard srp library
            #pragma prefer_hlslcc gles
            #pragma exclude_renderers d3d11_9x

            #pragma vertex vert
            #pragma fragment frag

            #define ASE_SRP_VERSION 60900
            #include "TerrainVertexCTS.hlsl"
            #pragma instancing_options assumeuniformscaling nomatrices nolightprobe nolightmap


			uniform float4 _MainTex_ST;
			
            #include "Packages/com.unity.render-pipelines.lightweight/ShaderLibrary/Core.hlsl"
            #include "Packages/com.unity.render-pipelines.lightweight/ShaderLibrary/MetaInput.hlsl"
            #include "Packages/com.unity.render-pipelines.lightweight/ShaderLibrary/ShaderGraphFunctions.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Color.hlsl"

			sampler2D _Texture_Splat_4;
			sampler2D _Texture_Splat_3;
			sampler2D _Texture_Splat_2;
			sampler2D _Texture_Splat_1;
			half _Texture_1_Albedo_Index;
			TEXTURE2D_ARRAY( _Texture_Array_Albedo );
			uniform SAMPLER( sampler_Texture_Array_Albedo );
			float _Texture_1_Tiling;
			half _Texture_1_Far_Multiplier;
			half _UV_Mix_Start_Distance;
			half _UV_Mix_Power;
			half4 _Texture_1_Color;
			float _Texture_2_Albedo_Index;
			half _Texture_2_Tiling;
			half _Texture_2_Far_Multiplier;
			half4 _Texture_2_Color;
			float _Texture_3_Albedo_Index;
			half _Texture_3_Tiling;
			half _Texture_3_Far_Multiplier;
			half4 _Texture_3_Color;
			float _Texture_4_Albedo_Index;
			half _Texture_4_Tiling;
			half _Texture_4_Far_Multiplier;
			half4 _Texture_4_Color;
			float _Texture_5_Albedo_Index;
			half _Texture_5_Tiling;
			half _Texture_5_Far_Multiplier;
			half4 _Texture_5_Color;
			float _Texture_6_Albedo_Index;
			half _Texture_6_Tiling;
			half _Texture_6_Far_Multiplier;
			half4 _Texture_6_Color;
			float _Texture_7_Albedo_Index;
			half _Texture_7_Tiling;
			half _Texture_7_Far_Multiplier;
			half4 _Texture_7_Color;
			float _Texture_8_Albedo_Index;
			half _Texture_8_Tiling;
			half _Texture_8_Far_Multiplier;
			half4 _Texture_8_Color;
			half _Texture_9_Albedo_Index;
			half _Texture_9_Tiling;
			half _Texture_9_Far_Multiplier;
			half4 _Texture_9_Color;
			half _Texture_10_Albedo_Index;
			half _Texture_10_Tiling;
			half _Texture_10_Far_Multiplier;
			half4 _Texture_10_Color;
			half _Texture_11_Albedo_Index;
			half _Texture_11_Tiling;
			half _Texture_11_Far_Multiplier;
			half4 _Texture_11_Color;
			half _Texture_12_Albedo_Index;
			half _Texture_12_Tiling;
			half _Texture_12_Far_Multiplier;
			half4 _Texture_12_Color;
			half _Texture_13_Albedo_Index;
			half _Texture_13_Tiling;
			half _Texture_13_Far_Multiplier;
			half4 _Texture_13_Color;
			half _Texture_14_Albedo_Index;
			half _Texture_14_Tiling;
			half _Texture_14_Far_Multiplier;
			half4 _Texture_14_Color;
			half _Texture_15_Albedo_Index;
			half _Texture_15_Tiling;
			half _Texture_15_Far_Multiplier;
			half4 _Texture_15_Color;
			half _Texture_16_Albedo_Index;
			half _Texture_16_Tiling;
			half _Texture_16_Far_Multiplier;
			half4 _Texture_16_Color;
			half _Geological_Map_Close_Power;
			sampler2D _Texture_Geological_Map;
			half _Geological_Map_Offset_Close;
			half _Geological_Tiling_Close;
			half _Geological_Map_Far_Power;
			half _Geological_Tiling_Far;
			half _Geological_Map_Offset_Far;
			half _Texture_16_Geological_Power;
			half _Texture_15_Geological_Power;
			half _Texture_14_Geological_Power;
			half _Texture_13_Geological_Power;
			half _Texture_12_Geological_Power;
			half _Texture_11_Geological_Power;
			half _Texture_10_Geological_Power;
			half _Texture_9_Geological_Power;
			half _Texture_8_Geological_Power;
			half _Texture_7_Geological_Power;
			half _Texture_6_Geological_Power;
			half _Texture_5_Geological_Power;
			half _Texture_1_Geological_Power;
			half _Texture_2_Geological_Power;
			half _Texture_4_Geological_Power;
			half _Texture_3_Geological_Power;

            #pragma shader_feature _ _SMOOTHNESS_TEXTURE_ALBEDO_CHANNEL_A
            #pragma shader_feature EDITOR_VISUALIZATION


            struct GraphVertexInput
            {
                float4 vertex : POSITION;
				float3 ase_normal : NORMAL;
				float4 texcoord1 : TEXCOORD1;
				float4 texcoord2 : TEXCOORD2;
				float4 ase_tangent : TANGENT;
				float4 ase_texcoord : TEXCOORD0;
                UNITY_VERTEX_INPUT_INSTANCE_ID
            };

        	struct VertexOutput
        	{
        	    float4 clipPos      : SV_POSITION;
                float4 ase_texcoord : TEXCOORD0;
                float4 ase_texcoord1 : TEXCOORD1;
                UNITY_VERTEX_INPUT_INSTANCE_ID
                UNITY_VERTEX_OUTPUT_STEREO
        	};

			
            VertexOutput vert(GraphVertexInput v  )
            {
                VertexOutput o = (VertexOutput)0;
        	    UNITY_SETUP_INSTANCE_ID(v);
                UNITY_TRANSFER_INSTANCE_ID(v, o);
                UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);
				TerrainInstancing(v.vertex, v.ase_normal, v.ase_texcoord.xy);
				float3 localCalculateTangentsSRP6379 = ( ( v.ase_tangent.xyz * 0.0 ) );
				v.ase_tangent.xyz = cross ( v.ase_normal, float3( 0, 0, 1 ) );
				v.ase_tangent.w = -1;
				
				float3 ase_worldPos = mul(GetObjectToWorldMatrix(), v.vertex).xyz;
				o.ase_texcoord1.xyz = ase_worldPos;
				
				o.ase_texcoord.xy = v.ase_texcoord.xy;
				
				//setting value to unused interpolator channels and avoid initialization warnings
				o.ase_texcoord.zw = 0;
				o.ase_texcoord1.w = 0;

				float3 vertexValue = localCalculateTangentsSRP6379;
				#ifdef ASE_ABSOLUTE_VERTEX_POS
				v.vertex.xyz = vertexValue;
				#else
				v.vertex.xyz += vertexValue;
				#endif

				v.ase_normal =  v.ase_normal ;
#if !defined( ASE_SRP_VERSION ) || ASE_SRP_VERSION  > 51300				
                o.clipPos = MetaVertexPosition(v.vertex, v.texcoord1.xy, v.texcoord1.xy, unity_LightmapST, unity_DynamicLightmapST);
#else
				o.clipPos = MetaVertexPosition (v.vertex, v.texcoord1.xy, v.texcoord2.xy, unity_LightmapST);
#endif
        	    return o;
            }

            half4 frag(VertexOutput IN  ) : SV_TARGET
            {
                UNITY_SETUP_INSTANCE_ID(IN);

           		float2 uv02588 = IN.ase_texcoord.xy * float2( 1,1 ) + float2( 0,0 );
           		float4 tex2DNode4371 = tex2D( _Texture_Splat_4, uv02588 );
           		float4 tex2DNode4370 = tex2D( _Texture_Splat_3, uv02588 );
           		float4 tex2DNode4369 = tex2D( _Texture_Splat_2, uv02588 );
           		float4 tex2DNode4368 = tex2D( _Texture_Splat_1, uv02588 );
           		float3 ase_worldPos = IN.ase_texcoord1.xyz;
           		float3 break6348 = ase_worldPos;
           		float2 appendResult6281 = (float2(break6348.x , break6348.z));
           		half2 Top_Bottom1999 = appendResult6281;
           		float temp_output_3830_0 = ( 1.0 / _Texture_1_Tiling );
           		float2 appendResult3284 = (float2(temp_output_3830_0 , temp_output_3830_0));
           		float2 temp_output_3275_0 = ( Top_Bottom1999 * appendResult3284 );
           		float4 texArray3287 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, temp_output_3275_0, _Texture_1_Albedo_Index );
           		float4 texArray3293 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, ( temp_output_3275_0 / _Texture_1_Far_Multiplier ), _Texture_1_Albedo_Index );
           		float3 break6201 = abs( ( ase_worldPos - _WorldSpaceCameraPos ) );
           		float clampResult297 = clamp( pow( ( max( max( break6201.x , break6201.y ) , break6201.z ) / _UV_Mix_Start_Distance ) , _UV_Mix_Power ) , 0.0 , 1.0 );
           		half UVmixDistance636 = clampResult297;
           		float4 lerpResult5739 = lerp( texArray3287 , texArray3293 , UVmixDistance636);
           		float4 ifLocalVar6174 = 0;
           		UNITY_BRANCH 
           		if( _Texture_1_Albedo_Index > -1.0 )
           		ifLocalVar6174 = ( lerpResult5739 * _Texture_1_Color );
           		half4 Texture_1_Final950 = ifLocalVar6174;
           		float temp_output_3831_0 = ( 1.0 / _Texture_2_Tiling );
           		float2 appendResult3349 = (float2(temp_output_3831_0 , temp_output_3831_0));
           		float2 temp_output_3343_0 = ( Top_Bottom1999 * appendResult3349 );
           		float4 texArray3338 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, temp_output_3343_0, _Texture_2_Albedo_Index );
           		float4 texArray3339 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, ( temp_output_3343_0 / _Texture_2_Far_Multiplier ), _Texture_2_Albedo_Index );
           		float4 lerpResult5749 = lerp( texArray3338 , texArray3339 , UVmixDistance636);
           		float4 ifLocalVar6128 = 0;
           		UNITY_BRANCH 
           		if( _Texture_2_Albedo_Index > -1.0 )
           		ifLocalVar6128 = ( lerpResult5749 * _Texture_2_Color );
           		half4 Texture_2_Final3385 = ifLocalVar6128;
           		float temp_output_3832_0 = ( 1.0 / _Texture_3_Tiling );
           		float2 appendResult3415 = (float2(temp_output_3832_0 , temp_output_3832_0));
           		float2 temp_output_3410_0 = ( Top_Bottom1999 * appendResult3415 );
           		float4 texArray3405 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, temp_output_3410_0, _Texture_3_Albedo_Index );
           		float4 texArray3406 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, ( temp_output_3410_0 / _Texture_3_Far_Multiplier ), _Texture_3_Albedo_Index );
           		float4 lerpResult5759 = lerp( texArray3405 , texArray3406 , UVmixDistance636);
           		float4 ifLocalVar6130 = 0;
           		UNITY_BRANCH 
           		if( _Texture_3_Albedo_Index > -1.0 )
           		ifLocalVar6130 = ( lerpResult5759 * _Texture_3_Color );
           		half4 Texture_3_Final3451 = ifLocalVar6130;
           		float2 temp_output_3477_0 = ( Top_Bottom1999 * ( 1.0 / _Texture_4_Tiling ) );
           		float4 texArray3472 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, temp_output_3477_0, _Texture_4_Albedo_Index );
           		float4 texArray3473 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, ( temp_output_3477_0 / _Texture_4_Far_Multiplier ), _Texture_4_Albedo_Index );
           		float4 lerpResult5761 = lerp( texArray3472 , texArray3473 , UVmixDistance636);
           		float4 ifLocalVar6132 = 0;
           		UNITY_BRANCH 
           		if( _Texture_4_Albedo_Index > -1.0 )
           		ifLocalVar6132 = ( lerpResult5761 * _Texture_4_Color );
           		half4 Texture_4_Final3518 = ifLocalVar6132;
           		float4 layeredBlendVar5643 = tex2DNode4368;
           		float4 layeredBlend5643 = ( lerp( lerp( lerp( lerp( float4( 0,0,0,0 ) , Texture_1_Final950 , layeredBlendVar5643.x ) , Texture_2_Final3385 , layeredBlendVar5643.y ) , Texture_3_Final3451 , layeredBlendVar5643.z ) , Texture_4_Final3518 , layeredBlendVar5643.w ) );
           		float temp_output_4397_0 = ( 1.0 / _Texture_5_Tiling );
           		float2 appendResult4399 = (float2(temp_output_4397_0 , temp_output_4397_0));
           		float2 temp_output_4416_0 = ( Top_Bottom1999 * appendResult4399 );
           		float4 texArray4450 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, temp_output_4416_0, _Texture_5_Albedo_Index );
           		float4 texArray4445 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, ( temp_output_4416_0 / _Texture_5_Far_Multiplier ), _Texture_5_Albedo_Index );
           		float4 lerpResult5789 = lerp( texArray4450 , texArray4445 , UVmixDistance636);
           		float4 ifLocalVar6134 = 0;
           		UNITY_BRANCH 
           		if( _Texture_5_Albedo_Index > -1.0 )
           		ifLocalVar6134 = ( lerpResult5789 * _Texture_5_Color );
           		half4 Texture_5_Final4396 = ifLocalVar6134;
           		float temp_output_4469_0 = ( 1.0 / _Texture_6_Tiling );
           		float2 appendResult4471 = (float2(temp_output_4469_0 , temp_output_4469_0));
           		float2 temp_output_4485_0 = ( Top_Bottom1999 * appendResult4471 );
           		float4 texArray4517 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, temp_output_4485_0, _Texture_6_Albedo_Index );
           		float4 texArray4512 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, ( temp_output_4485_0 / _Texture_6_Far_Multiplier ), _Texture_6_Albedo_Index );
           		float4 lerpResult5794 = lerp( texArray4517 , texArray4512 , UVmixDistance636);
           		float4 ifLocalVar6136 = 0;
           		UNITY_BRANCH 
           		if( _Texture_6_Albedo_Index > -1.0 )
           		ifLocalVar6136 = ( lerpResult5794 * _Texture_6_Color );
           		half4 Texture_6_Final4536 = ifLocalVar6136;
           		float temp_output_4543_0 = ( 1.0 / _Texture_7_Tiling );
           		float2 appendResult4545 = (float2(temp_output_4543_0 , temp_output_4543_0));
           		float2 temp_output_4559_0 = ( Top_Bottom1999 * appendResult4545 );
           		float4 texArray4591 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, temp_output_4559_0, _Texture_7_Albedo_Index );
           		float4 texArray4586 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, ( temp_output_4559_0 / _Texture_7_Far_Multiplier ), _Texture_7_Albedo_Index );
           		float4 lerpResult5798 = lerp( texArray4591 , texArray4586 , UVmixDistance636);
           		float4 ifLocalVar6139 = 0;
           		UNITY_BRANCH 
           		if( _Texture_7_Albedo_Index > -1.0 )
           		ifLocalVar6139 = ( lerpResult5798 * _Texture_7_Color );
           		half4 Texture_7_Final4614 = ifLocalVar6139;
           		float temp_output_4617_0 = ( 1.0 / _Texture_8_Tiling );
           		float2 appendResult4619 = (float2(temp_output_4617_0 , temp_output_4617_0));
           		float2 temp_output_4633_0 = ( Top_Bottom1999 * appendResult4619 );
           		float4 texArray4665 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, temp_output_4633_0, _Texture_8_Albedo_Index );
           		float4 texArray4660 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, ( temp_output_4633_0 / _Texture_8_Far_Multiplier ), _Texture_8_Albedo_Index );
           		float4 lerpResult5802 = lerp( texArray4665 , texArray4660 , UVmixDistance636);
           		float4 ifLocalVar6141 = 0;
           		UNITY_BRANCH 
           		if( _Texture_8_Albedo_Index > -1.0 )
           		ifLocalVar6141 = ( lerpResult5802 * _Texture_8_Color );
           		half4 Texture_8_Final4689 = ifLocalVar6141;
           		float4 layeredBlendVar5644 = tex2DNode4369;
           		float4 layeredBlend5644 = ( lerp( lerp( lerp( lerp( layeredBlend5643 , Texture_5_Final4396 , layeredBlendVar5644.x ) , Texture_6_Final4536 , layeredBlendVar5644.y ) , Texture_7_Final4614 , layeredBlendVar5644.z ) , Texture_8_Final4689 , layeredBlendVar5644.w ) );
           		float temp_output_4703_0 = ( 1.0 / _Texture_9_Tiling );
           		float2 appendResult4736 = (float2(temp_output_4703_0 , temp_output_4703_0));
           		float2 temp_output_4712_0 = ( Top_Bottom1999 * appendResult4736 );
           		float4 texArray4723 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, temp_output_4712_0, _Texture_9_Albedo_Index );
           		float4 texArray4889 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, ( temp_output_4712_0 / _Texture_9_Far_Multiplier ), _Texture_9_Albedo_Index );
           		float4 lerpResult5845 = lerp( texArray4723 , texArray4889 , UVmixDistance636);
           		float4 ifLocalVar6143 = 0;
           		UNITY_BRANCH 
           		if( _Texture_9_Albedo_Index > -1.0 )
           		ifLocalVar6143 = ( lerpResult5845 * _Texture_9_Color );
           		half4 Texture_9_Final4987 = ifLocalVar6143;
           		float temp_output_4734_0 = ( 1.0 / _Texture_10_Tiling );
           		float2 appendResult4738 = (float2(temp_output_4734_0 , temp_output_4734_0));
           		float2 temp_output_4793_0 = ( Top_Bottom1999 * appendResult4738 );
           		float4 texArray4899 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, temp_output_4793_0, _Texture_10_Albedo_Index );
           		float4 texArray4913 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, ( temp_output_4793_0 / _Texture_10_Far_Multiplier ), _Texture_10_Albedo_Index );
           		float4 lerpResult5841 = lerp( texArray4899 , texArray4913 , UVmixDistance636);
           		float4 ifLocalVar6145 = 0;
           		UNITY_BRANCH 
           		if( _Texture_10_Albedo_Index > -1.0 )
           		ifLocalVar6145 = ( lerpResult5841 * _Texture_10_Color );
           		half4 Texture_10_Final4994 = ifLocalVar6145;
           		float temp_output_4739_0 = ( 1.0 / _Texture_11_Tiling );
           		float2 appendResult4741 = (float2(temp_output_4739_0 , temp_output_4739_0));
           		float2 temp_output_4817_0 = ( Top_Bottom1999 * appendResult4741 );
           		float4 texArray4928 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, temp_output_4817_0, _Texture_11_Albedo_Index );
           		float4 texArray4923 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, ( temp_output_4817_0 / _Texture_11_Far_Multiplier ), _Texture_11_Albedo_Index );
           		float4 lerpResult5837 = lerp( texArray4928 , texArray4923 , UVmixDistance636);
           		float4 ifLocalVar6147 = 0;
           		UNITY_BRANCH 
           		if( _Texture_11_Albedo_Index > -1.0 )
           		ifLocalVar6147 = ( lerpResult5837 * _Texture_11_Color );
           		half4 Texture_11_Final4996 = ifLocalVar6147;
           		float temp_output_4745_0 = ( 1.0 / _Texture_12_Tiling );
           		float2 appendResult4751 = (float2(temp_output_4745_0 , temp_output_4745_0));
           		float2 temp_output_4849_0 = ( Top_Bottom1999 * appendResult4751 );
           		float4 texArray4954 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, temp_output_4849_0, _Texture_12_Albedo_Index );
           		float4 texArray4952 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, ( temp_output_4849_0 / _Texture_12_Far_Multiplier ), _Texture_12_Albedo_Index );
           		float4 lerpResult5833 = lerp( texArray4954 , texArray4952 , UVmixDistance636);
           		float4 ifLocalVar6169 = 0;
           		UNITY_BRANCH 
           		if( _Texture_12_Albedo_Index > -1.0 )
           		ifLocalVar6169 = ( lerpResult5833 * _Texture_12_Color );
           		half4 Texture_12_Final4997 = ifLocalVar6169;
           		float4 layeredBlendVar5645 = tex2DNode4370;
           		float4 layeredBlend5645 = ( lerp( lerp( lerp( lerp( layeredBlend5644 , Texture_9_Final4987 , layeredBlendVar5645.x ) , Texture_10_Final4994 , layeredBlendVar5645.y ) , Texture_11_Final4996 , layeredBlendVar5645.z ) , Texture_12_Final4997 , layeredBlendVar5645.w ) );
           		float temp_output_5125_0 = ( 1.0 / _Texture_13_Tiling );
           		float2 appendResult5027 = (float2(temp_output_5125_0 , temp_output_5125_0));
           		float2 temp_output_5037_0 = ( Top_Bottom1999 * appendResult5027 );
           		float4 texArray5043 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, temp_output_5037_0, _Texture_13_Albedo_Index );
           		float4 texArray5034 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, ( temp_output_5037_0 / _Texture_13_Far_Multiplier ), _Texture_13_Albedo_Index );
           		float4 lerpResult5829 = lerp( texArray5043 , texArray5034 , UVmixDistance636);
           		float4 ifLocalVar6151 = 0;
           		UNITY_BRANCH 
           		if( _Texture_13_Albedo_Index > -1.0 )
           		ifLocalVar6151 = ( lerpResult5829 * _Texture_13_Color );
           		half4 Texture_13_Final5058 = ifLocalVar6151;
           		float temp_output_5006_0 = ( 1.0 / _Texture_14_Tiling );
           		float2 appendResult5033 = (float2(temp_output_5006_0 , temp_output_5006_0));
           		float2 temp_output_5022_0 = ( Top_Bottom1999 * appendResult5033 );
           		float4 texArray5202 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, temp_output_5022_0, _Texture_14_Albedo_Index );
           		float4 texArray5171 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, ( temp_output_5022_0 / _Texture_14_Far_Multiplier ), _Texture_14_Albedo_Index );
           		float4 lerpResult5825 = lerp( texArray5202 , texArray5171 , UVmixDistance636);
           		float4 ifLocalVar6153 = 0;
           		UNITY_BRANCH 
           		if( _Texture_14_Albedo_Index > -1.0 )
           		ifLocalVar6153 = ( lerpResult5825 * _Texture_14_Color );
           		half4 Texture_14_Final5163 = ifLocalVar6153;
           		float temp_output_5210_0 = ( 1.0 / _Texture_15_Tiling );
           		float2 appendResult5212 = (float2(temp_output_5210_0 , temp_output_5210_0));
           		float2 temp_output_5226_0 = ( Top_Bottom1999 * appendResult5212 );
           		float4 texArray5259 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, temp_output_5226_0, _Texture_15_Albedo_Index );
           		float4 texArray5272 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, ( temp_output_5226_0 / _Texture_15_Far_Multiplier ), _Texture_15_Albedo_Index );
           		float4 lerpResult5821 = lerp( texArray5259 , texArray5272 , UVmixDistance636);
           		float4 ifLocalVar6155 = 0;
           		UNITY_BRANCH 
           		if( _Texture_15_Albedo_Index > -1.0 )
           		ifLocalVar6155 = ( lerpResult5821 * _Texture_15_Color );
           		half4 Texture_15_Final5270 = ifLocalVar6155;
           		float temp_output_5075_0 = ( 1.0 / _Texture_16_Tiling );
           		float2 appendResult5078 = (float2(temp_output_5075_0 , temp_output_5075_0));
           		float2 temp_output_5083_0 = ( Top_Bottom1999 * appendResult5078 );
           		float4 texArray5139 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, temp_output_5083_0, _Texture_16_Albedo_Index );
           		float4 texArray5143 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, ( temp_output_5083_0 / _Texture_16_Far_Multiplier ), _Texture_16_Albedo_Index );
           		float4 lerpResult5817 = lerp( texArray5139 , texArray5143 , UVmixDistance636);
           		float4 ifLocalVar6183 = 0;
           		UNITY_BRANCH 
           		if( _Texture_16_Albedo_Index > -1.0 )
           		ifLocalVar6183 = ( lerpResult5817 * _Texture_16_Color );
           		half4 Texture_16_Final5094 = ifLocalVar6183;
           		float4 layeredBlendVar5646 = tex2DNode4371;
           		float4 layeredBlend5646 = ( lerp( lerp( lerp( lerp( layeredBlend5645 , Texture_13_Final5058 , layeredBlendVar5646.x ) , Texture_14_Final5163 , layeredBlendVar5646.y ) , Texture_15_Final5270 , layeredBlendVar5646.z ) , Texture_16_Final5094 , layeredBlendVar5646.w ) );
           		float3 appendResult6259 = (float3(layeredBlend5646.xyz));
           		float2 temp_cast_1 = (( _Geological_Map_Offset_Close + ( ase_worldPos.y / _Geological_Tiling_Close ) )).xx;
           		float3 appendResult6257 = (float3(tex2D( _Texture_Geological_Map, temp_cast_1 ).rgb));
           		float2 temp_cast_3 = (( ( ase_worldPos.y / _Geological_Tiling_Far ) + _Geological_Map_Offset_Far )).xx;
           		float3 appendResult6256 = (float3(tex2D( _Texture_Geological_Map, temp_cast_3 ).rgb));
           		float3 lerpResult1315 = lerp( ( _Geological_Map_Close_Power * ( appendResult6257 + float3( -0.3,-0.3,-0.3 ) ) ) , ( _Geological_Map_Far_Power * ( appendResult6256 + float3( -0.3,-0.3,-0.3 ) ) ) , UVmixDistance636);
           		half Splat4_A2546 = tex2DNode4371.a;
           		half Splat4_B2545 = tex2DNode4371.b;
           		half Splat4_G2544 = tex2DNode4371.g;
           		half Splat4_R2543 = tex2DNode4371.r;
           		half Splat3_A2540 = tex2DNode4370.a;
           		half Splat3_B2539 = tex2DNode4370.b;
           		half Splat3_G2538 = tex2DNode4370.g;
           		half Splat3_R2537 = tex2DNode4370.r;
           		half Splat2_A2109 = tex2DNode4369.a;
           		half Splat2_B2108 = tex2DNode4369.b;
           		half Splat2_G2107 = tex2DNode4369.g;
           		half Splat2_R2106 = tex2DNode4369.r;
           		half Splat1_R1438 = tex2DNode4368.r;
           		half Splat1_G1441 = tex2DNode4368.g;
           		half Splat1_A1491 = tex2DNode4368.a;
           		half Splat1_B1442 = tex2DNode4368.b;
           		float3 blendOpSrc4362 = appendResult6259;
           		float3 blendOpDest4362 = ( lerpResult1315 * ( ( _Texture_16_Geological_Power * Splat4_A2546 ) + ( ( _Texture_15_Geological_Power * Splat4_B2545 ) + ( ( _Texture_14_Geological_Power * Splat4_G2544 ) + ( ( _Texture_13_Geological_Power * Splat4_R2543 ) + ( ( _Texture_12_Geological_Power * Splat3_A2540 ) + ( ( _Texture_11_Geological_Power * Splat3_B2539 ) + ( ( _Texture_10_Geological_Power * Splat3_G2538 ) + ( ( _Texture_9_Geological_Power * Splat3_R2537 ) + ( ( _Texture_8_Geological_Power * Splat2_A2109 ) + ( ( _Texture_7_Geological_Power * Splat2_B2108 ) + ( ( _Texture_6_Geological_Power * Splat2_G2107 ) + ( ( _Texture_5_Geological_Power * Splat2_R2106 ) + ( ( _Texture_1_Geological_Power * Splat1_R1438 ) + ( ( _Texture_2_Geological_Power * Splat1_G1441 ) + ( ( _Texture_4_Geological_Power * Splat1_A1491 ) + ( _Texture_3_Geological_Power * Splat1_B1442 ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) );
           		float3 clampResult5715 = clamp( ( saturate( ( blendOpSrc4362 + blendOpDest4362 ) )) , float3( 0,0,0 ) , float3( 1,1,1 ) );
           		
				
		        float3 Albedo = clampResult5715;
				float3 Emission = 0;
				float Alpha = 1;
				float AlphaClipThreshold = 0;

         #if _AlphaClip
        		clip(Alpha - AlphaClipThreshold);
        #endif

                MetaInput metaInput = (MetaInput)0;
                metaInput.Albedo = Albedo;
                metaInput.Emission = Emission;
                
                return MetaFragment(metaInput);
            }
            ENDHLSL
        }
		UsePass "Hidden/Nature/Terrain/Utilities/PICKING"
    UsePass "Hidden/Nature/Terrain/Utilities/SELECTION"
		
    }
    
	
	Dependency "BaseMapShader"="CTS/LWRP/CTS Terrain Shader Lite LOD"

}