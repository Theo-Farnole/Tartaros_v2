Shader "CTS/HDRP/CTS Terrain Shader Advanced LOD"
{
	/*CustomNodeUI:HDPBR*/
    Properties
    {
		_Geological_Tiling_Far("Geological_Tiling_Far", Range( 0 , 1000)) = 87
		_Geological_Map_Offset_Far("Geological_Map_Offset _Far", Range( 0 , 1)) = 1
		_Geological_Map_Far_Power("Geological_Map_Far_Power", Range( 0 , 2)) = 1
		_Global_Color_Map_Far_Power("Global_Color_Map_Far_Power", Range( 0 , 10)) = 5
		_Perlin_Normal_Tiling_Far("Perlin_Normal_Tiling_Far", Range( 0.01 , 1000)) = 40
		_Perlin_Normal_Power("Perlin_Normal_Power", Range( 0 , 2)) = 1
		_Global_Color_Opacity_Power("Global_Color_Opacity_Power", Range( 0 , 1)) = 0
		_Terrain_Smoothness("Terrain_Smoothness", Range( 0 , 2)) = 1
		_Terrain_Specular("Terrain_Specular", Range( 0 , 3)) = 1
		_Global_Normalmap_Power("Global_Normalmap_Power", Range( 0 , 10)) = 0
		_Texture_1_Tiling("Texture_1_Tiling", Range( 0.0001 , 100)) = 15
		_Texture_2_Tiling("Texture_2_Tiling", Range( 0.0001 , 100)) = 15
		_Texture_3_Tiling("Texture_3_Tiling", Range( 0.0001 , 100)) = 15
		_Texture_4_Tiling("Texture_4_Tiling", Range( 0.0001 , 100)) = 15
		_Texture_5_Tiling("Texture_5_Tiling", Range( 0.0001 , 100)) = 15
		_Texture_6_Tiling("Texture_6_Tiling", Range( 0.0001 , 100)) = 15
		_Texture_7_Tiling("Texture_7_Tiling", Range( 0.0001 , 100)) = 15
		_Texture_8_Tiling("Texture_8_Tiling", Range( 0.0001 , 100)) = 15
		_Texture_9_Tiling("Texture_9_Tiling", Range( 0.0001 , 100)) = 15
		_Texture_10_Tiling("Texture_10_Tiling", Range( 0.0001 , 100)) = 15
		_Texture_11_Tiling("Texture_11_Tiling", Range( 0.0001 , 100)) = 15
		_Texture_12_Tiling("Texture_12_Tiling", Range( 0.0001 , 100)) = 15
		_Texture_13_Tiling("Texture_13_Tiling", Range( 0.0001 , 100)) = 15
		_Texture_14_Tiling("Texture_14_Tiling", Range( 0.0001 , 100)) = 15
		_Texture_15_Tiling("Texture_15_Tiling", Range( 0.0001 , 100)) = 15
		_Texture_16_Tiling("Texture_16_Tiling", Range( 0.0001 , 100)) = 15
		_Texture_1_Far_Multiplier("Texture_1_Far_Multiplier", Range( 0 , 10)) = 3
		_Texture_2_Far_Multiplier("Texture_2_Far_Multiplier", Range( 0 , 10)) = 3
		_Texture_3_Far_Multiplier("Texture_3_Far_Multiplier", Range( 0 , 10)) = 3
		_Texture_4_Far_Multiplier("Texture_4_Far_Multiplier", Range( 0 , 10)) = 3
		_Texture_5_Far_Multiplier("Texture_5_Far_Multiplier", Range( 0 , 10)) = 3
		_Texture_6_Far_Multiplier("Texture_6_Far_Multiplier", Range( 0 , 10)) = 3
		_Texture_7_Far_Multiplier("Texture_7_Far_Multiplier", Range( 0 , 10)) = 3
		_Texture_8_Far_Multiplier("Texture_8_Far_Multiplier", Range( 0 , 10)) = 3
		_Texture_9_Far_Multiplier("Texture_9_Far_Multiplier", Range( 0 , 10)) = 3
		_Texture_10_Far_Multiplier("Texture_10_Far_Multiplier", Range( 0 , 10)) = 3
		_Texture_11_Far_Multiplier("Texture_11_Far_Multiplier", Range( 0 , 10)) = 3
		_Texture_12_Far_Multiplier("Texture_12_Far_Multiplier", Range( 0 , 10)) = 3
		_Texture_13_Far_Multiplier("Texture_13_Far_Multiplier", Range( 0 , 10)) = 3
		_Texture_14_Far_Multiplier("Texture_14_Far_Multiplier", Range( 0 , 10)) = 3
		_Texture_15_Far_Multiplier("Texture_15_Far_Multiplier", Range( 0 , 10)) = 3
		_Texture_16_Far_Multiplier("Texture_16_Far_Multiplier", Range( 0 , 10)) = 3
		_Texture_1_Perlin_Power("Texture_1_Perlin_Power", Range( 0 , 2)) = 0
		_Texture_2_Perlin_Power("Texture_2_Perlin_Power", Range( 0 , 2)) = 0
		_Texture_3_Perlin_Power("Texture_3_Perlin_Power", Range( 0 , 2)) = 0
		_Texture_4_Perlin_Power("Texture_4_Perlin_Power", Range( 0 , 2)) = 0
		_Texture_5_Perlin_Power("Texture_5_Perlin_Power", Range( 0 , 2)) = 0
		_Texture_6_Perlin_Power("Texture_6_Perlin_Power", Range( 0 , 2)) = 0
		_Texture_7_Perlin_Power("Texture_7_Perlin_Power", Range( 0 , 2)) = 0
		_Texture_8_Perlin_Power("Texture_8_Perlin_Power", Range( 0 , 2)) = 0
		_Texture_9_Perlin_Power("Texture_9_Perlin_Power", Range( 0 , 2)) = 0
		_Texture_10_Perlin_Power("Texture_10_Perlin_Power", Range( 0 , 2)) = 0
		_Texture_11_Perlin_Power("Texture_11_Perlin_Power", Range( 0 , 2)) = 0
		_Texture_12_Perlin_Power("Texture_12_Perlin_Power", Range( 0 , 2)) = 0
		_Texture_13_Perlin_Power("Texture_13_Perlin_Power", Range( 0 , 2)) = 0
		_Texture_14_Perlin_Power("Texture_14_Perlin_Power", Range( 0 , 2)) = 0
		_Texture_15_Perlin_Power("Texture_15_Perlin_Power", Range( 0 , 2)) = 0
		_Texture_16_Perlin_Power("Texture_16_Perlin_Power", Range( 0 , 2)) = 0
		_Snow_Heightmap_Depth("Snow_Heightmap_Depth", Range( 0 , 10)) = 1
		_Texture_14_Heightmap_Depth("Texture_14_Heightmap_Depth", Range( 0 , 10)) = 1
		_Texture_13_Heightmap_Depth("Texture_13_Heightmap_Depth", Range( 0 , 10)) = 1
		_Texture_11_Heightmap_Depth("Texture_11_Heightmap_Depth", Range( 0 , 10)) = 1
		_Texture_15_Heightmap_Depth("Texture_15_Heightmap_Depth", Range( 0 , 10)) = 1
		_Texture_16_Heightmap_Depth("Texture_16_Heightmap_Depth", Range( 0 , 10)) = 1
		_Texture_12_Heightmap_Depth("Texture_12_Heightmap_Depth", Range( 0 , 10)) = 1
		_Texture_6_Heightmap_Depth("Texture_6_Heightmap_Depth", Range( 0 , 10)) = 1
		_Texture_10_Heightmap_Depth("Texture_10_Heightmap_Depth", Range( 0 , 10)) = 1
		_Texture_9_Heightmap_Depth("Texture_9_Heightmap_Depth", Range( 0 , 10)) = 1
		_Texture_5_Heightmap_Depth("Texture_5_Heightmap_Depth", Range( 0 , 10)) = 1
		_Texture_7_Heightmap_Depth("Texture_7_Heightmap_Depth", Range( 0 , 10)) = 1
		_Texture_Array_Albedo("Texture_Array_Albedo", 2DArray ) = "" {}
		_Texture_Array_Normal("Texture_Array_Normal", 2DArray ) = "" {}
		_Texture_3_Heightmap_Depth("Texture_3_Heightmap_Depth", Range( 0 , 10)) = 1
		_Texture_8_Heightmap_Depth("Texture_8_Heightmap_Depth", Range( 0 , 10)) = 1
		_Texture_4_Heightmap_Depth("Texture_4_Heightmap_Depth", Range( 0 , 10)) = 1
		_Texture_2_Heightmap_Depth("Texture_2_Heightmap_Depth", Range( 0 , 10)) = 1
		_Texture_1_Heightmap_Depth("Texture_1_Heightmap_Depth", Range( 0 , 10)) = 1
		_Texture_1_Height_Contrast("Texture_1_Height_Contrast", Range( 0 , 10)) = 1
		_Snow_Height_Contrast("Snow_Height_Contrast", Range( 0 , 10)) = 1
		_Texture_14_Height_Contrast("Texture_14_Height_Contrast", Range( 0 , 10)) = 1
		_Texture_16_Height_Contrast("Texture_16_Height_Contrast", Range( 0 , 10)) = 1
		_Texture_15_Height_Contrast("Texture_15_Height_Contrast", Range( 0 , 10)) = 1
		_Texture_9_Height_Contrast("Texture_9_Height_Contrast", Range( 0 , 10)) = 1
		_Texture_13_Height_Contrast("Texture_13_Height_Contrast", Range( 0 , 10)) = 1
		_Texture_10_Height_Contrast("Texture_10_Height_Contrast", Range( 0 , 10)) = 1
		_Texture_11_Height_Contrast("Texture_11_Height_Contrast", Range( 0 , 10)) = 1
		_Texture_12_Height_Contrast("Texture_12_Height_Contrast", Range( 0 , 10)) = 1
		_Texture_6_Height_Contrast("Texture_6_Height_Contrast", Range( 0 , 10)) = 1
		_Texture_8_Height_Contrast("Texture_8_Height_Contrast", Range( 0 , 10)) = 1
		_Texture_7_Height_Contrast("Texture_7_Height_Contrast", Range( 0 , 10)) = 1
		_Texture_3_Height_Contrast("Texture_3_Height_Contrast", Range( 0 , 10)) = 1
		_Texture_5_Height_Contrast("Texture_5_Height_Contrast", Range( 0 , 10)) = 1
		_Texture_4_Height_Contrast("Texture_4_Height_Contrast", Range( 0 , 10)) = 1
		_Texture_2_Height_Contrast("Texture_2_Height_Contrast", Range( 0 , 10)) = 1
		_Texture_16_Heightblend_Far("Texture_16_Heightblend_Far", Range( 1 , 10)) = 5
		_Texture_15_Heightblend_Far("Texture_15_Heightblend_Far", Range( 1 , 10)) = 5
		_Snow_Heightblend_Far("Snow_Heightblend_Far", Range( 1 , 10)) = 5
		_Texture_14_Heightblend_Far("Texture_14_Heightblend_Far", Range( 1 , 10)) = 5
		_Texture_12_Heightblend_Far("Texture_12_Heightblend_Far", Range( 1 , 10)) = 5
		_Texture_13_Heightblend_Far("Texture_13_Heightblend_Far", Range( 1 , 10)) = 5
		_Texture_7_Heightblend_Far("Texture_7_Heightblend_Far", Range( 1 , 10)) = 5
		_Texture_11_Heightblend_Far("Texture_11_Heightblend_Far", Range( 1 , 10)) = 5
		_Texture_10_Heightblend_Far("Texture_10_Heightblend_Far", Range( 1 , 10)) = 5
		_Texture_9_Heightblend_Far("Texture_9_Heightblend_Far", Range( 1 , 10)) = 5
		_Texture_8_Heightblend_Far("Texture_8_Heightblend_Far", Range( 1 , 10)) = 5
		_Texture_6_Heightblend_Far("Texture_6_Heightblend_Far", Range( 1 , 10)) = 5
		_Texture_5_Heightblend_Far("Texture_5_Heightblend_Far", Range( 1 , 10)) = 5
		_Texture_3_Heightblend_Far("Texture_3_Heightblend_Far", Range( 1 , 10)) = 5
		_Texture_4_Heightblend_Far("Texture_4_Heightblend_Far", Range( 1 , 10)) = 5
		_Texture_2_Heightblend_Far("Texture_2_Heightblend_Far", Range( 1 , 10)) = 5
		_Texture_1_Heightblend_Far("Texture_1_Heightblend_Far", Range( 1 , 10)) = 5
		_Texture_1_Geological_Power("Texture_1_Geological_Power", Range( 0 , 2)) = 1
		_Texture_2_Geological_Power("Texture_2_Geological_Power", Range( 0 , 2)) = 1
		_Texture_3_Geological_Power("Texture_3_Geological_Power", Range( 0 , 2)) = 1
		_Texture_4_Geological_Power("Texture_4_Geological_Power", Range( 0 , 2)) = 1
		_Texture_5_Geological_Power("Texture_5_Geological_Power", Range( 0 , 2)) = 1
		_Texture_6_Geological_Power("Texture_6_Geological_Power", Range( 0 , 2)) = 1
		_Texture_7_Geological_Power("Texture_7_Geological_Power", Range( 0 , 2)) = 1
		_Texture_8_Geological_Power("Texture_8_Geological_Power", Range( 0 , 2)) = 1
		_Texture_9_Geological_Power("Texture_9_Geological_Power", Range( 0 , 2)) = 1
		_Texture_10_Geological_Power("Texture_10_Geological_Power", Range( 0 , 2)) = 1
		_Texture_11_Geological_Power("Texture_11_Geological_Power", Range( 0 , 2)) = 1
		_Texture_12_Geological_Power("Texture_12_Geological_Power", Range( 0 , 2)) = 1
		_Texture_13_Geological_Power("Texture_13_Geological_Power", Range( 0 , 2)) = 1
		_Texture_14_Geological_Power("Texture_14_Geological_Power", Range( 0 , 2)) = 1
		_Texture_15_Geological_Power("Texture_15_Geological_Power", Range( 0 , 2)) = 1
		_Texture_16_Geological_Power("Texture_16_Geological_Power", Range( 0 , 2)) = 1
		_Snow_Specular("Snow_Specular", Range( 0 , 3)) = 1
		_Snow_Color("Snow_Color", Vector) = (1,1,1,1)
		_Snow_Amount("Snow_Amount", Range( 0 , 2)) = 0
		_Snow_Perlin_Power("Snow_Perlin_Power", Range( 0 , 2)) = 0
		_Snow_Min_Height("Snow_Min_Height", Range( -1000 , 10000)) = -1000
		_Snow_Min_Height_Blending("Snow_Min_Height_Blending", Range( 0 , 500)) = 1
		_Snow_Maximum_Angle("Snow_Maximum_Angle", Range( 0.001 , 180)) = 30
		_Snow_Maximum_Angle_Hardness("Snow_Maximum_Angle_Hardness", Range( 0.001 , 10)) = 1
		_Texture_1_Snow_Reduction("Texture_1_Snow_Reduction", Range( 0 , 1)) = 0
		_Texture_2_Snow_Reduction("Texture_2_Snow_Reduction", Range( 0 , 1)) = 0
		_Texture_3_Snow_Reduction("Texture_3_Snow_Reduction", Range( 0 , 1)) = 0
		_Texture_4_Snow_Reduction("Texture_4_Snow_Reduction", Range( 0 , 1)) = 0
		_Texture_5_Snow_Reduction("Texture_5_Snow_Reduction", Range( 0 , 1)) = 0
		_Texture_Snow_Average("Texture_Snow_Average", Vector) = (0,0,0,0)
		_Texture_6_Snow_Reduction("Texture_6_Snow_Reduction", Range( 0 , 1)) = 0
		_Texture_7_Snow_Reduction("Texture_7_Snow_Reduction", Range( 0 , 1)) = 0
		_Texture_8_Snow_Reduction("Texture_8_Snow_Reduction", Range( 0 , 1)) = 0
		_Texture_9_Snow_Reduction("Texture_9_Snow_Reduction", Range( 0 , 1)) = 0
		_Texture_10_Snow_Reduction("Texture_10_Snow_Reduction", Range( 0 , 1)) = 0
		_Texture_11_Snow_Reduction("Texture_11_Snow_Reduction", Range( 0 , 1)) = 0
		_Texture_12_Snow_Reduction("Texture_12_Snow_Reduction", Range( 0 , 1)) = 0
		_Texture_13_Snow_Reduction("Texture_13_Snow_Reduction", Range( 0 , 1)) = 0
		_Texture_14_Snow_Reduction("Texture_14_Snow_Reduction", Range( 0 , 1)) = 0
		_Texture_15_Snow_Reduction("Texture_15_Snow_Reduction", Range( 0 , 1)) = 0
		_Texture_16_Snow_Reduction("Texture_16_Snow_Reduction", Range( 0 , 1)) = 0
		_Texture_Perlin_Normal_Index("Texture_Perlin_Normal_Index", Int) = -1
		_Texture_Snow_H_AO_Index("Texture_Snow_H_AO_Index", Int) = -1
		_Texture_9_Color("Texture_9_Color", Vector) = (1,1,1,1)
		_Texture_10_Color("Texture_10_Color", Vector) = (1,1,1,1)
		_Texture_13_Color("Texture_13_Color", Vector) = (1,1,1,1)
		_Texture_11_Color("Texture_11_Color", Vector) = (1,1,1,1)
		_Texture_12_Color("Texture_12_Color", Vector) = (1,1,1,1)
		_Texture_15_Color("Texture_15_Color", Vector) = (1,1,1,1)
		_Texture_14_Color("Texture_14_Color", Vector) = (1,1,1,1)
		_Texture_8_Color("Texture_8_Color", Vector) = (1,1,1,1)
		_Texture_16_Color("Texture_16_Color", Vector) = (1,1,1,1)
		_Texture_7_Color("Texture_7_Color", Vector) = (1,1,1,1)
		_Texture_5_Color("Texture_5_Color", Vector) = (1,1,1,1)
		_Texture_6_Color("Texture_6_Color", Vector) = (1,1,1,1)
		_Texture_4_Color("Texture_4_Color", Vector) = (1,1,1,1)
		_Texture_1_Color("Texture_1_Color", Vector) = (1,1,1,1)
		_Texture_3_Color("Texture_3_Color", Vector) = (1,1,1,1)
		_Texture_2_Color("Texture_2_Color", Vector) = (1,1,1,1)
		_Texture_Geological_Map("Texture_Geological_Map", 2D) = "white" {}
		_Snow_Noise_Power("Snow_Noise_Power", Range( 0 , 1)) = 1
		_Snow_Noise_Tiling("Snow_Noise_Tiling", Range( 0.001 , 1)) = 0.02
		_Texture_Splat_1("Texture_Splat_1", 2D) = "black" {}
		_Texture_Splat_2("Texture_Splat_2", 2D) = "black" {}
		_Texture_Splat_3("Texture_Splat_3", 2D) = "black" {}
		_Texture_Splat_4("Texture_Splat_4", 2D) = "black" {}
		_Global_Normal_Map("Global_Normal_Map", 2D) = "bump" {}
		_Texture_1_Albedo_Index("Texture_1_Albedo_Index", Range( -1 , 100)) = -1
		_Texture_1_H_AO_Index("Texture_1_H_AO_Index", Range( -1 , 100)) = -1
		_Texture_2_Albedo_Index("Texture_2_Albedo_Index", Range( -1 , 100)) = -1
		_Texture_2_H_AO_Index("Texture_2_H_AO_Index", Range( -1 , 100)) = -1
		_Texture_3_H_AO_Index("Texture_3_H_AO_Index", Range( -1 , 100)) = -1
		_Texture_3_Albedo_Index("Texture_3_Albedo_Index", Range( -1 , 100)) = -1
		_Texture_4_H_AO_Index("Texture_4_H_AO_Index", Range( -1 , 100)) = -1
		_Texture_4_Albedo_Index("Texture_4_Albedo_Index", Range( -1 , 100)) = -1
		_Texture_5_Albedo_Index("Texture_5_Albedo_Index", Range( -1 , 100)) = -1
		_Texture_5_H_AO_Index("Texture_5_H_AO_Index", Range( -1 , 100)) = -1
		_Texture_6_H_AO_Index("Texture_6_H_AO_Index", Range( -1 , 100)) = -1
		_Texture_6_Albedo_Index("Texture_6_Albedo_Index", Range( -1 , 100)) = -1
		_Texture_7_Albedo_Index("Texture_7_Albedo_Index", Range( -1 , 100)) = -1
		_Texture_7_H_AO_Index("Texture_7_H_AO_Index", Range( -1 , 100)) = -1
		_Texture_8_Albedo_Index("Texture_8_Albedo_Index", Range( -1 , 100)) = -1
		_Texture_8_H_AO_Index("Texture_8_H_AO_Index", Range( -1 , 100)) = -1
		_Texture_16_H_AO_Index("Texture_16_H_AO_Index", Range( -1 , 100)) = -1
		_Texture_15_H_AO_Index("Texture_15_H_AO_Index", Range( -1 , 100)) = -1
		_Texture_16_Albedo_Index("Texture_16_Albedo_Index", Range( -1 , 100)) = -1
		_Texture_15_Albedo_Index("Texture_15_Albedo_Index", Range( -1 , 100)) = -1
		_Texture_14_H_AO_Index("Texture_14_H_AO_Index", Range( -1 , 100)) = -1
		_Texture_14_Albedo_Index("Texture_14_Albedo_Index", Range( -1 , 100)) = -1
		_Ambient_Occlusion_Power("Ambient_Occlusion_Power", Range( 0 , 1)) = 1
		_Texture_13_H_AO_Index("Texture_13_H_AO_Index", Range( -1 , 100)) = -1
		_Texture_13_Albedo_Index("Texture_13_Albedo_Index", Range( -1 , 100)) = -1
		_Texture_12_H_AO_Index("Texture_12_H_AO_Index", Range( -1 , 100)) = -1
		_Texture_12_Albedo_Index("Texture_12_Albedo_Index", Range( -1 , 100)) = -1
		_Global_Color_Map("Global_Color_Map", 2D) = "gray" {}
		_Texture_11_H_AO_Index("Texture_11_H_AO_Index", Range( -1 , 100)) = -1
		_Texture_11_Albedo_Index("Texture_11_Albedo_Index", Range( -1 , 100)) = -1
		_Texture_10_Albedo_Index("Texture_10_Albedo_Index", Range( -1 , 100)) = -1
		_Texture_10_H_AO_Index("Texture_10_H_AO_Index", Range( -1 , 100)) = -1
		_Texture_9_H_AO_Index_AO_H_Index("Texture_9_H_AO_Index_AO_H_Index", Range( -1 , 100)) = -1
		_Texture_9_Albedo_Index("Texture_9_Albedo_Index", Range( -1 , 100)) = -1
		[Toggle(_USE_AO_TEXTURE_ON)] _Use_AO_Texture("Use_AO_Texture", Float) = 0
		_Global_Color_Map_Scale("Global_Color_Map_Scale", Float) = 1
		_Global_Color_Map_Offset("Global_Color_Map_Offset", Vector) = (0,0,0,0)
    }

    SubShader
    {
		
        Tags { "RenderPipeline"="HDRenderPipeline" "RenderType"="Opaque" "Queue"="Geometry" }
        
		Cull Back
		Blend One Zero
		ZTest LEqual
		ZWrite On
		ZClip [_ZClip]

		HLSLINCLUDE
		#pragma target 4.5
		#pragma only_renderers d3d11 ps4 xboxone vulkan metal switch
		#pragma multi_compile_instancing
		#pragma instancing_options renderinglayer
		#pragma multi_compile _ LOD_FADE_CROSSFADE

		struct GlobalSurfaceDescription
		{
			//Standard
			float3 Albedo;
			float3 Normal;
			float3 Specular;
			float Metallic;
			float3 Emission;
			float Smoothness;
			float Occlusion;
			float Alpha;
			float AlphaClipThreshold;
			float CoatMask;
			//SSS
			float DiffusionProfile;
			float SubsurfaceMask;
			//Transmission
			float Thickness;
			// Anisotropic
			float3 TangentWS;
			float Anisotropy; 
			//Iridescence
			float IridescenceThickness;
			float IridescenceMask;
			// Transparency
			float IndexOfRefraction;
			float3 TransmittanceColor;
			float TransmittanceAbsorptionDistance;
			float TransmittanceMask;
		};

		struct AlphaSurfaceDescription
		{
			float Alpha;
			float AlphaClipThreshold;
		};

		ENDHLSL
		
        Pass
        {
			
            Name "GBuffer"
            Tags { "LightMode"="GBuffer" }    
			Stencil
			{
				Ref 2
				WriteMask 7
				Comp Always
				Pass Replace
				Fail Keep
				ZFail Keep
			}

     
            HLSLPROGRAM
        	//#define UNITY_MATERIAL_LIT
			#pragma vertex Vert
			#pragma fragment Frag
			
			#define ASE_SRP_VERSION 50702
			#define _MATERIAL_FEATURE_SPECULAR_COLOR 1
			#define _NORMALMAP 1
			#pragma multi_compile __ _USE_AO_TEXTURE_ON
			#pragma instancing_options assumeuniformscaling nomatrices nolightprobe nolightmap
			#include "TerrainVertexCTSHD.hlsl"

		
        
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/NormalSurfaceGradient.hlsl"        
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/FragInputs.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"
        
            #define SHADERPASS SHADERPASS_GBUFFER
            #pragma multi_compile _ LIGHTMAP_ON
            #pragma multi_compile _ DIRLIGHTMAP_COMBINED
            #pragma multi_compile _ DYNAMICLIGHTMAP_ON
            #pragma multi_compile _ SHADOWS_SHADOWMASK
			#pragma multi_compile DECALS_OFF DECALS_3RT DECALS_4RT
			#pragma multi_compile _ LIGHT_LAYERS
            #define ATTRIBUTES_NEED_NORMAL
            #define ATTRIBUTES_NEED_TANGENT
            #define ATTRIBUTES_NEED_TEXCOORD1
            #define ATTRIBUTES_NEED_TEXCOORD2
            #define VARYINGS_NEED_POSITION_WS
            #define VARYINGS_NEED_TANGENT_TO_WORLD
            #define VARYINGS_NEED_TEXCOORD1
            #define VARYINGS_NEED_TEXCOORD2
        
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Material.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/Lit.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/BuiltinUtilities.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/MaterialUtilities.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Decal/DecalUtilities.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/LitDecalData.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphFunctions.hlsl"

            struct AttributesMesh 
			{
                float4 positionOS : POSITION;
                float3 normalOS : NORMAL;
                float4 tangentOS : TANGENT;
                float4 uv1 : TEXCOORD1;
                float4 uv2 : TEXCOORD2;
				float4 ase_texcoord : TEXCOORD0;
				#if UNITY_ANY_INSTANCING_ENABLED
				uint instanceID : INSTANCEID_SEMANTIC;
				#endif
            };

            struct PackedVaryingsMeshToPS 
			{
                float4 positionCS : SV_Position;
                float3 interp00 : TEXCOORD0;
                float3 interp01 : TEXCOORD1;
                float4 interp02 : TEXCOORD2;
                float4 interp03 : TEXCOORD3;
				float4 interp04 : TEXCOORD4;
				float4 ase_texcoord5 : TEXCOORD5;
				#if UNITY_ANY_INSTANCING_ENABLED
				uint instanceID : INSTANCEID_SEMANTIC;
				#endif
            };
        
			half _Global_Color_Map_Far_Power;
			sampler2D _Global_Color_Map;
			float2 _Global_Color_Map_Offset;
			float _Global_Color_Map_Scale;
			half _Global_Color_Opacity_Power;
			half _Texture_13_Heightmap_Depth;
			half _Texture_13_H_AO_Index;
			TEXTURE2D_ARRAY( _Texture_Array_Albedo );
			uniform SAMPLER( sampler_Texture_Array_Albedo );
			half _Texture_13_Tiling;
			half _Texture_13_Far_Multiplier;
			half _Texture_13_Height_Contrast;
			sampler2D _Texture_Splat_4;
			half _Texture_13_Heightblend_Far;
			half _Texture_14_Heightmap_Depth;
			half _Texture_14_H_AO_Index;
			half _Texture_14_Tiling;
			half _Texture_14_Far_Multiplier;
			half _Texture_14_Height_Contrast;
			half _Texture_14_Heightblend_Far;
			half _Texture_15_Heightmap_Depth;
			half _Texture_15_H_AO_Index;
			half _Texture_15_Tiling;
			half _Texture_15_Far_Multiplier;
			half _Texture_15_Height_Contrast;
			half _Texture_15_Heightblend_Far;
			half _Texture_16_Heightmap_Depth;
			half _Texture_16_H_AO_Index;
			half _Texture_16_Tiling;
			half _Texture_16_Far_Multiplier;
			half _Texture_16_Height_Contrast;
			half _Texture_16_Heightblend_Far;
			half _Texture_9_Heightmap_Depth;
			half _Texture_9_H_AO_Index_AO_H_Index;
			half _Texture_9_Tiling;
			half _Texture_9_Far_Multiplier;
			half _Texture_9_Height_Contrast;
			sampler2D _Texture_Splat_3;
			half _Texture_9_Heightblend_Far;
			half _Texture_10_Heightmap_Depth;
			half _Texture_10_H_AO_Index;
			half _Texture_10_Tiling;
			half _Texture_10_Far_Multiplier;
			half _Texture_10_Height_Contrast;
			half _Texture_10_Heightblend_Far;
			half _Texture_11_Heightmap_Depth;
			half _Texture_11_H_AO_Index;
			half _Texture_11_Tiling;
			half _Texture_11_Far_Multiplier;
			half _Texture_11_Height_Contrast;
			half _Texture_11_Heightblend_Far;
			half _Texture_12_Heightmap_Depth;
			half _Texture_12_H_AO_Index;
			half _Texture_12_Tiling;
			half _Texture_12_Far_Multiplier;
			half _Texture_12_Height_Contrast;
			half _Texture_12_Heightblend_Far;
			half _Texture_5_Heightmap_Depth;
			half _Texture_5_H_AO_Index;
			half _Texture_5_Tiling;
			half _Texture_5_Far_Multiplier;
			half _Texture_5_Height_Contrast;
			sampler2D _Texture_Splat_2;
			half _Texture_5_Heightblend_Far;
			half _Texture_6_Heightmap_Depth;
			half _Texture_6_H_AO_Index;
			half _Texture_6_Tiling;
			half _Texture_6_Far_Multiplier;
			half _Texture_6_Height_Contrast;
			half _Texture_6_Heightblend_Far;
			half _Texture_7_Heightmap_Depth;
			half _Texture_7_H_AO_Index;
			half _Texture_7_Tiling;
			half _Texture_7_Far_Multiplier;
			half _Texture_7_Height_Contrast;
			half _Texture_7_Heightblend_Far;
			half _Texture_8_Heightmap_Depth;
			half _Texture_8_H_AO_Index;
			half _Texture_8_Tiling;
			half _Texture_8_Far_Multiplier;
			half _Texture_8_Height_Contrast;
			half _Texture_8_Heightblend_Far;
			half _Texture_1_H_AO_Index;
			half _Texture_1_Tiling;
			half _Texture_1_Far_Multiplier;
			half _Texture_1_Height_Contrast;
			half _Texture_1_Heightmap_Depth;
			sampler2D _Texture_Splat_1;
			half _Texture_1_Heightblend_Far;
			half _Texture_2_Heightmap_Depth;
			half _Texture_2_H_AO_Index;
			half _Texture_2_Tiling;
			half _Texture_2_Far_Multiplier;
			half _Texture_2_Height_Contrast;
			half _Texture_2_Heightblend_Far;
			half _Texture_3_Heightmap_Depth;
			half _Texture_3_H_AO_Index;
			half _Texture_3_Tiling;
			half _Texture_3_Far_Multiplier;
			half _Texture_3_Height_Contrast;
			half _Texture_3_Heightblend_Far;
			half _Texture_4_Heightmap_Depth;
			half _Texture_4_H_AO_Index;
			half _Texture_4_Tiling;
			half _Texture_4_Far_Multiplier;
			half _Texture_4_Height_Contrast;
			half _Texture_4_Heightblend_Far;
			half _Texture_1_Albedo_Index;
			half4 _Texture_1_Color;
			half _Texture_2_Albedo_Index;
			half4 _Texture_2_Color;
			half _Texture_3_Albedo_Index;
			half4 _Texture_3_Color;
			half _Texture_4_Albedo_Index;
			half4 _Texture_4_Color;
			half _Texture_5_Albedo_Index;
			half4 _Texture_5_Color;
			half _Texture_6_Albedo_Index;
			half4 _Texture_6_Color;
			half _Texture_7_Albedo_Index;
			half4 _Texture_7_Color;
			half _Texture_8_Albedo_Index;
			half4 _Texture_8_Color;
			half _Texture_9_Albedo_Index;
			half4 _Texture_9_Color;
			half _Texture_10_Albedo_Index;
			half4 _Texture_10_Color;
			half _Texture_11_Albedo_Index;
			half4 _Texture_11_Color;
			half _Texture_12_Albedo_Index;
			half4 _Texture_12_Color;
			half _Texture_13_Albedo_Index;
			half4 _Texture_13_Color;
			half _Texture_14_Albedo_Index;
			half4 _Texture_14_Color;
			half _Texture_15_Albedo_Index;
			half4 _Texture_15_Color;
			half _Texture_16_Albedo_Index;
			half4 _Texture_16_Color;
			sampler2D _Texture_Geological_Map;
			half _Geological_Tiling_Far;
			half _Geological_Map_Offset_Far;
			half _Geological_Map_Far_Power;
			half _Texture_16_Geological_Power;
			half _Texture_15_Geological_Power;
			half _Texture_14_Geological_Power;
			half _Texture_13_Geological_Power;
			half _Texture_12_Geological_Power;
			half _Texture_11_Geological_Power;
			half _Texture_10_Geological_Power;
			half _Texture_9_Geological_Power;
			half _Texture_8_Geological_Power;
			half _Texture_7_Geological_Power;
			half _Texture_6_Geological_Power;
			half _Texture_5_Geological_Power;
			half _Texture_1_Geological_Power;
			half _Texture_2_Geological_Power;
			half _Texture_4_Geological_Power;
			half _Texture_3_Geological_Power;
			half4 _Texture_Snow_Average;
			half4 _Snow_Color;
			int _Texture_Snow_H_AO_Index;
			half _Snow_Height_Contrast;
			half _Snow_Heightmap_Depth;
			half _Snow_Amount;
			half _Snow_Noise_Tiling;
			half _Snow_Noise_Power;
			half _Snow_Maximum_Angle_Hardness;
			half _Snow_Maximum_Angle;
			half _Snow_Min_Height;
			half _Snow_Min_Height_Blending;
			half _Texture_16_Snow_Reduction;
			half _Texture_15_Snow_Reduction;
			half _Texture_13_Snow_Reduction;
			half _Texture_12_Snow_Reduction;
			half _Texture_11_Snow_Reduction;
			half _Texture_9_Snow_Reduction;
			half _Texture_8_Snow_Reduction;
			half _Texture_7_Snow_Reduction;
			half _Texture_5_Snow_Reduction;
			half _Texture_1_Snow_Reduction;
			half _Texture_2_Snow_Reduction;
			half _Texture_3_Snow_Reduction;
			half _Texture_4_Snow_Reduction;
			half _Texture_6_Snow_Reduction;
			half _Texture_10_Snow_Reduction;
			half _Texture_14_Snow_Reduction;
			half _Snow_Heightblend_Far;
			TEXTURE2D_ARRAY( _Texture_Array_Normal );
			uniform SAMPLER( sampler_Texture_Array_Normal );
			half _Perlin_Normal_Tiling_Far;
			int _Texture_Perlin_Normal_Index;
			half _Perlin_Normal_Power;
			half _Texture_16_Perlin_Power;
			half _Texture_15_Perlin_Power;
			half _Texture_14_Perlin_Power;
			half _Texture_13_Perlin_Power;
			half _Texture_12_Perlin_Power;
			half _Texture_11_Perlin_Power;
			half _Texture_10_Perlin_Power;
			half _Texture_9_Perlin_Power;
			half _Texture_8_Perlin_Power;
			half _Texture_7_Perlin_Power;
			half _Texture_6_Perlin_Power;
			half _Texture_5_Perlin_Power;
			half _Texture_1_Perlin_Power;
			half _Texture_2_Perlin_Power;
			half _Texture_4_Perlin_Power;
			half _Texture_3_Perlin_Power;
			half _Snow_Perlin_Power;
			half _Global_Normalmap_Power;
			sampler2D _Global_Normal_Map;
			half _Terrain_Specular;
			half _Snow_Specular;
			half _Terrain_Smoothness;
			half _Ambient_Occlusion_Power;
			
			float3 mod2D289( float3 x ) { return x - floor( x * ( 1.0 / 289.0 ) ) * 289.0; }
			float2 mod2D289( float2 x ) { return x - floor( x * ( 1.0 / 289.0 ) ) * 289.0; }
			float3 permute( float3 x ) { return mod2D289( ( ( x * 34.0 ) + 1.0 ) * x ); }
			float snoise( float2 v )
			{
				const float4 C = float4( 0.211324865405187, 0.366025403784439, -0.577350269189626, 0.024390243902439 );
				float2 i = floor( v + dot( v, C.yy ) );
				float2 x0 = v - i + dot( i, C.xx );
				float2 i1;
				i1 = ( x0.x > x0.y ) ? float2( 1.0, 0.0 ) : float2( 0.0, 1.0 );
				float4 x12 = x0.xyxy + C.xxzz;
				x12.xy -= i1;
				i = mod2D289( i );
				float3 p = permute( permute( i.y + float3( 0.0, i1.y, 1.0 ) ) + i.x + float3( 0.0, i1.x, 1.0 ) );
				float3 m = max( 0.5 - float3( dot( x0, x0 ), dot( x12.xy, x12.xy ), dot( x12.zw, x12.zw ) ), 0.0 );
				m = m * m;
				m = m * m;
				float3 x = 2.0 * frac( p * C.www ) - 1.0;
				float3 h = abs( x ) - 0.5;
				float3 ox = floor( x + 0.5 );
				float3 a0 = x - ox;
				m *= 1.79284291400159 - 0.85373472095314 * ( a0 * a0 + h * h );
				float3 g;
				g.x = a0.x * x0.x + h.x * x0.y;
				g.yz = a0.yz * x12.xz + h.yz * x12.yw;
				return 130.0 * dot( m, g );
			}
			

			void BuildSurfaceData ( FragInputs fragInputs, GlobalSurfaceDescription surfaceDescription, float3 V, PositionInputs posInput, out SurfaceData surfaceData )
			{
				ZERO_INITIALIZE ( SurfaceData, surfaceData );

				float3 normalTS = float3( 0.0f, 0.0f, 1.0f );
				normalTS = surfaceDescription.Normal;
				float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
				GetNormalWS ( fragInputs, normalTS, surfaceData.normalWS ,doubleSidedConstants);

				surfaceData.ambientOcclusion = 1.0f;

				surfaceData.baseColor = surfaceDescription.Albedo;
				surfaceData.perceptualSmoothness = surfaceDescription.Smoothness;
				surfaceData.ambientOcclusion = surfaceDescription.Occlusion;

				surfaceData.materialFeatures = MATERIALFEATUREFLAGS_LIT_STANDARD;

#ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
				surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SPECULAR_COLOR;
				surfaceData.specularColor = surfaceDescription.Specular;
#else
				surfaceData.metallic = surfaceDescription.Metallic;
#endif

#if defined(_MATERIAL_FEATURE_SUBSURFACE_SCATTERING) || defined(_MATERIAL_FEATURE_TRANSMISSION)
				surfaceData.diffusionProfileHash = asuint (surfaceDescription.DiffusionProfile);
#endif

#ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
				surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SUBSURFACE_SCATTERING;
				surfaceData.subsurfaceMask = surfaceDescription.SubsurfaceMask;
#else
				surfaceData.subsurfaceMask = 1.0f;
#endif

#ifdef _MATERIAL_FEATURE_TRANSMISSION
				surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
				surfaceData.thickness = surfaceDescription.Thickness;
#endif

				surfaceData.tangentWS = normalize ( fragInputs.worldToTangent[ 0 ].xyz );
				surfaceData.tangentWS = Orthonormalize ( surfaceData.tangentWS, surfaceData.normalWS );

#ifdef _MATERIAL_FEATURE_ANISOTROPY
				surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_ANISOTROPY;
				surfaceData.anisotropy = surfaceDescription.Anisotropy;

#else
				surfaceData.anisotropy = 0;
#endif

#ifdef _MATERIAL_FEATURE_CLEAR_COAT
				surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_CLEAR_COAT;
				surfaceData.coatMask = surfaceDescription.CoatMask;
#else
				surfaceData.coatMask = 0.0f;
#endif

#ifdef _MATERIAL_FEATURE_IRIDESCENCE
				surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_IRIDESCENCE;
				surfaceData.iridescenceThickness = surfaceDescription.IridescenceThickness;
				surfaceData.iridescenceMask = surfaceDescription.IridescenceMask;
#else
				surfaceData.iridescenceThickness = 0.0;
				surfaceData.iridescenceMask = 1.0;
#endif

				//ASE CUSTOM TAG
#ifdef _MATERIAL_FEATURE_TRANSPARENCY
				surfaceData.ior = surfaceDescription.IndexOfRefraction;
				surfaceData.transmittanceColor = surfaceDescription.TransmittanceColor;
				surfaceData.atDistance = surfaceDescription.TransmittanceAbsorptionDistance;
				surfaceData.transmittanceMask = surfaceDescription.TransmittanceMask;
#else
				surfaceData.ior = 1.0;
				surfaceData.transmittanceColor = float3( 1.0, 1.0, 1.0 );
				surfaceData.atDistance = 1000000.0;
				surfaceData.transmittanceMask = 0.0;
#endif

				surfaceData.specularOcclusion = 1.0;

#if defined(_BENTNORMALMAP) && defined(_ENABLESPECULAROCCLUSION)
				surfaceData.specularOcclusion = GetSpecularOcclusionFromBentAO ( V, bentNormalWS, surfaceData );
#elif defined(_MASKMAP)
				surfaceData.specularOcclusion = GetSpecularOcclusionFromAmbientOcclusion ( NdotV, surfaceData.ambientOcclusion, PerceptualSmoothnessToRoughness ( surfaceData.perceptualSmoothness ) );
#endif
#if HAVE_DECALS
				if (_EnableDecals)
				{
					DecalSurfaceData decalSurfaceData = GetDecalSurfaceData (posInput, surfaceDescription.Alpha);
					ApplyDecalToSurfaceData (decalSurfaceData, surfaceData);
				}
#endif
			}

            void GetSurfaceAndBuiltinData( GlobalSurfaceDescription surfaceDescription , FragInputs fragInputs, float3 V, inout PositionInputs posInput, out SurfaceData surfaceData, out BuiltinData builtinData)
            {
        
#if _ALPHATEST_ON
				DoAlphaTest ( surfaceDescription.Alpha, surfaceDescription.AlphaClipThreshold );
#endif
				BuildSurfaceData( fragInputs, surfaceDescription, V, posInput, surfaceData );
        
                // Builtin Data
                // For back lighting we use the oposite vertex normal 
				InitBuiltinData(surfaceDescription.Alpha, surfaceData.normalWS, -fragInputs.worldToTangent[2], posInput.positionWS, fragInputs.texCoord1, fragInputs.texCoord2, builtinData);
        
				builtinData.emissiveColor =             surfaceDescription.Emission;
                builtinData.distortion =                float2(0.0, 0.0);           // surfaceDescription.Distortion -- if distortion pass
                builtinData.distortionBlur =            0.0;                        // surfaceDescription.DistortionBlur -- if distortion pass
                builtinData.depthOffset =               0.0;                        // ApplyPerPixelDisplacement(input, V, layerTexCoord, blendMasks); #ifdef _DEPTHOFFSET_ON : ApplyDepthOffsetPositionInput(V, depthOffset, GetWorldToHClipMatrix(), posInput);
        
                PostInitBuiltinData(V, posInput, surfaceData, builtinData);            
            }
        
			PackedVaryingsMeshToPS Vert ( AttributesMesh inputMesh  )
			{
				PackedVaryingsMeshToPS outputPackedVaryingsMeshToPS;

				UNITY_SETUP_INSTANCE_ID ( inputMesh );
				UNITY_TRANSFER_INSTANCE_ID ( inputMesh, outputPackedVaryingsMeshToPS );
				 TerrainInstancingUV(inputMesh.positionOS, inputMesh.normalOS, inputMesh.tangentOS, inputMesh.ase_texcoord.xy);

				#if UNITY_ANY_INSTANCING_ENABLED
				outputPackedVaryingsMeshToPS.instanceID = inputMesh.instanceID;
				#endif

				outputPackedVaryingsMeshToPS.ase_texcoord5.xy = inputMesh.ase_texcoord.xy;
				
				//setting value to unused interpolator channels and avoid initialization warnings
				outputPackedVaryingsMeshToPS.ase_texcoord5.zw = 0;
				float3 vertexValue =  float3( 0, 0, 0 ) ;
				#ifdef ASE_ABSOLUTE_VERTEX_POS
				inputMesh.positionOS.xyz = vertexValue;
				#else
				inputMesh.positionOS.xyz += vertexValue;
				#endif

				inputMesh.normalOS =  inputMesh.normalOS ;

				float3 positionRWS = TransformObjectToWorld ( inputMesh.positionOS.xyz );
				float3 normalWS = TransformObjectToWorldNormal ( inputMesh.normalOS );
				float4 tangentWS = float4( TransformObjectToWorldDir ( inputMesh.tangentOS.xyz ), inputMesh.tangentOS.w );
				float4 positionCS = TransformWorldToHClip ( positionRWS );

				outputPackedVaryingsMeshToPS.positionCS = positionCS;
				outputPackedVaryingsMeshToPS.interp00.xyz = positionRWS;
				outputPackedVaryingsMeshToPS.interp01.xyz = normalWS;
				outputPackedVaryingsMeshToPS.interp02.xyzw = tangentWS;
				outputPackedVaryingsMeshToPS.interp03 = inputMesh.uv1;
				outputPackedVaryingsMeshToPS.interp04 = inputMesh.uv2;
			
				return outputPackedVaryingsMeshToPS;
			}

			void Frag ( PackedVaryingsMeshToPS packedInput, 
						OUTPUT_GBUFFER ( outGBuffer )
						#ifdef _DEPTHOFFSET_ON
						, out float outputDepth : SV_Depth
						#endif
						 
						)
			{
				FragInputs input;
				ZERO_INITIALIZE ( FragInputs, input );
				input.worldToTangent = k_identity3x3;
				
				float3 positionRWS = packedInput.interp00.xyz;
				float3 normalWS = packedInput.interp01.xyz;
				float4 tangentWS = packedInput.interp02.xyzw;
			
				input.positionSS = packedInput.positionCS;
				input.positionRWS = positionRWS;
				input.worldToTangent = BuildWorldToTangent ( tangentWS, normalWS );
				input.texCoord1 = packedInput.interp03;
				input.texCoord2 = packedInput.interp04;

				// input.positionSS is SV_Position
				PositionInputs posInput = GetPositionInput ( input.positionSS.xy, _ScreenSize.zw, input.positionSS.z, input.positionSS.w, input.positionRWS );

				float3 normalizedWorldViewDir = GetWorldSpaceNormalizeViewDir ( input.positionRWS );

				SurfaceData surfaceData;
				BuiltinData builtinData;

				GlobalSurfaceDescription surfaceDescription = ( GlobalSurfaceDescription ) 0;
				float2 uv02588 = packedInput.ase_texcoord5.xy * float2( 1,1 ) + float2( 0,0 );
				float4 tex2DNode7708 = tex2D( _Global_Color_Map, ( _Global_Color_Map_Offset + ( _Global_Color_Map_Scale * uv02588 ) ) );
				float clampResult7747 = clamp( ( tex2DNode7708.a + ( 1.0 - _Global_Color_Opacity_Power ) ) , 0.0 , 1.0 );
				float2 appendResult7710 = (float2(1.0 , ( _Global_Color_Map_Far_Power * clampResult7747 )));
				float3 ase_worldPos = GetAbsolutePositionWS( positionRWS );
				float3 break7753 = ase_worldPos;
				float2 appendResult7739 = (float2(break7753.x , break7753.z));
				half2 Top_Bottom1999 = appendResult7739;
				float temp_output_5125_0 = ( 1.0 / _Texture_13_Tiling );
				float2 appendResult5027 = (float2(temp_output_5125_0 , temp_output_5125_0));
				float2 temp_output_5112_0 = ( ( Top_Bottom1999 * appendResult5027 ) / _Texture_13_Far_Multiplier );
				float4 texArray5971 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, temp_output_5112_0, _Texture_13_H_AO_Index );
				float ifLocalVar7681 = 0;
				UNITY_BRANCH 
				if( _Texture_13_H_AO_Index > -1.0 )
				ifLocalVar7681 = texArray5971.y;
				half Texture_13_H5992 = ifLocalVar7681;
				float temp_output_6168_0 = ( _Texture_13_Heightmap_Depth * pow( Texture_13_H5992 , _Texture_13_Height_Contrast ) );
				float4 tex2DNode4371 = tex2D( _Texture_Splat_4, uv02588 );
				half Splat4_R2543 = tex2DNode4371.r;
				float HeightMask6231 = saturate(pow(((temp_output_6168_0*Splat4_R2543)*4)+(Splat4_R2543*2),_Texture_13_Heightblend_Far));
				float temp_output_5006_0 = ( 1.0 / _Texture_14_Tiling );
				float2 appendResult5033 = (float2(temp_output_5006_0 , temp_output_5006_0));
				float2 temp_output_5172_0 = ( ( Top_Bottom1999 * appendResult5033 ) / _Texture_14_Far_Multiplier );
				float4 texArray6011 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, temp_output_5172_0, _Texture_14_H_AO_Index );
				float ifLocalVar7679 = 0;
				UNITY_BRANCH 
				if( _Texture_14_H_AO_Index > -1.0 )
				ifLocalVar7679 = texArray6011.y;
				half Texture_14_H6032 = ifLocalVar7679;
				float temp_output_6174_0 = ( _Texture_14_Heightmap_Depth * pow( Texture_14_H6032 , _Texture_14_Height_Contrast ) );
				half Splat4_G2544 = tex2DNode4371.g;
				float HeightMask6234 = saturate(pow(((temp_output_6174_0*Splat4_G2544)*4)+(Splat4_G2544*2),_Texture_14_Heightblend_Far));
				float temp_output_5210_0 = ( 1.0 / _Texture_15_Tiling );
				float2 appendResult5212 = (float2(temp_output_5210_0 , temp_output_5210_0));
				float2 temp_output_5190_0 = ( ( Top_Bottom1999 * appendResult5212 ) / _Texture_15_Far_Multiplier );
				float4 texArray6051 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, temp_output_5190_0, _Texture_15_H_AO_Index );
				float ifLocalVar7677 = 0;
				UNITY_BRANCH 
				if( _Texture_15_H_AO_Index > -1.0 )
				ifLocalVar7677 = texArray6051.y;
				half Texture_15_H6072 = ifLocalVar7677;
				float temp_output_6180_0 = ( _Texture_15_Heightmap_Depth * pow( Texture_15_H6072 , _Texture_15_Height_Contrast ) );
				half Splat4_B2545 = tex2DNode4371.b;
				float HeightMask6237 = saturate(pow(((temp_output_6180_0*Splat4_B2545)*4)+(Splat4_B2545*2),_Texture_15_Heightblend_Far));
				float temp_output_5075_0 = ( 1.0 / _Texture_16_Tiling );
				float2 appendResult5078 = (float2(temp_output_5075_0 , temp_output_5075_0));
				float2 temp_output_5153_0 = ( ( Top_Bottom1999 * appendResult5078 ) / _Texture_16_Far_Multiplier );
				float4 texArray6091 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, temp_output_5153_0, _Texture_16_H_AO_Index );
				float ifLocalVar7675 = 0;
				UNITY_BRANCH 
				if( _Texture_16_H_AO_Index > -1.0 )
				ifLocalVar7675 = texArray6091.y;
				half Texture_16_H6112 = ifLocalVar7675;
				float temp_output_6186_0 = ( _Texture_16_Heightmap_Depth * pow( Texture_16_H6112 , _Texture_16_Height_Contrast ) );
				half Splat4_A2546 = tex2DNode4371.a;
				float HeightMask6240 = saturate(pow(((temp_output_6186_0*Splat4_A2546)*4)+(Splat4_A2546*2),_Texture_16_Heightblend_Far));
				float4 appendResult6533 = (float4(HeightMask6231 , HeightMask6234 , HeightMask6237 , HeightMask6240));
				float temp_output_4703_0 = ( 1.0 / _Texture_9_Tiling );
				float2 appendResult4736 = (float2(temp_output_4703_0 , temp_output_4703_0));
				float2 temp_output_4721_0 = ( ( Top_Bottom1999 * appendResult4736 ) / _Texture_9_Far_Multiplier );
				float4 texArray5811 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, temp_output_4721_0, _Texture_9_H_AO_Index_AO_H_Index );
				float ifLocalVar7689 = 0;
				UNITY_BRANCH 
				if( _Texture_9_H_AO_Index_AO_H_Index > -1.0 )
				ifLocalVar7689 = texArray5811.y;
				half Texture_9_H5832 = ifLocalVar7689;
				float temp_output_6144_0 = ( _Texture_9_Heightmap_Depth * pow( Texture_9_H5832 , _Texture_9_Height_Contrast ) );
				float4 tex2DNode4370 = tex2D( _Texture_Splat_3, uv02588 );
				half Splat3_R2537 = tex2DNode4370.r;
				float HeightMask6219 = saturate(pow(((temp_output_6144_0*Splat3_R2537)*4)+(Splat3_R2537*2),_Texture_9_Heightblend_Far));
				float temp_output_4734_0 = ( 1.0 / _Texture_10_Tiling );
				float2 appendResult4738 = (float2(temp_output_4734_0 , temp_output_4734_0));
				float2 temp_output_4879_0 = ( ( Top_Bottom1999 * appendResult4738 ) / _Texture_10_Far_Multiplier );
				float4 texArray5851 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, temp_output_4879_0, _Texture_10_H_AO_Index );
				float ifLocalVar7687 = 0;
				UNITY_BRANCH 
				if( _Texture_10_H_AO_Index > -1.0 )
				ifLocalVar7687 = texArray5851.y;
				half Texture_10_H5872 = ifLocalVar7687;
				float temp_output_6150_0 = ( _Texture_10_Heightmap_Depth * pow( Texture_10_H5872 , _Texture_10_Height_Contrast ) );
				half Splat3_G2538 = tex2DNode4370.g;
				float HeightMask6222 = saturate(pow(((temp_output_6150_0*Splat3_G2538)*4)+(Splat3_G2538*2),_Texture_10_Heightblend_Far));
				float temp_output_4739_0 = ( 1.0 / _Texture_11_Tiling );
				float2 appendResult4741 = (float2(temp_output_4739_0 , temp_output_4739_0));
				float2 temp_output_4904_0 = ( ( Top_Bottom1999 * appendResult4741 ) / _Texture_11_Far_Multiplier );
				float4 texArray5891 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, temp_output_4904_0, _Texture_11_H_AO_Index );
				float ifLocalVar7685 = 0;
				UNITY_BRANCH 
				if( _Texture_11_H_AO_Index > -1.0 )
				ifLocalVar7685 = texArray5891.y;
				half Texture_11_H5912 = ifLocalVar7685;
				float temp_output_6156_0 = ( _Texture_11_Heightmap_Depth * pow( Texture_11_H5912 , _Texture_11_Height_Contrast ) );
				half Splat3_B2539 = tex2DNode4370.b;
				float HeightMask6225 = saturate(pow(((temp_output_6156_0*Splat3_B2539)*4)+(Splat3_B2539*2),_Texture_11_Heightblend_Far));
				float temp_output_4745_0 = ( 1.0 / _Texture_12_Tiling );
				float2 appendResult4751 = (float2(temp_output_4745_0 , temp_output_4745_0));
				float2 temp_output_4932_0 = ( ( Top_Bottom1999 * appendResult4751 ) / _Texture_12_Far_Multiplier );
				float4 texArray5931 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, temp_output_4932_0, _Texture_12_H_AO_Index );
				float ifLocalVar7683 = 0;
				UNITY_BRANCH 
				if( _Texture_12_H_AO_Index > -1.0 )
				ifLocalVar7683 = texArray5931.y;
				half Texture_12_H5952 = ifLocalVar7683;
				float temp_output_6162_0 = ( _Texture_12_Heightmap_Depth * pow( Texture_12_H5952 , _Texture_12_Height_Contrast ) );
				half Splat3_A2540 = tex2DNode4370.a;
				float HeightMask6228 = saturate(pow(((temp_output_6162_0*Splat3_A2540)*4)+(Splat3_A2540*2),_Texture_12_Heightblend_Far));
				float4 appendResult6529 = (float4(HeightMask6219 , HeightMask6222 , HeightMask6225 , HeightMask6228));
				float temp_output_4397_0 = ( 1.0 / _Texture_5_Tiling );
				float2 appendResult4399 = (float2(temp_output_4397_0 , temp_output_4397_0));
				float2 temp_output_4440_0 = ( ( Top_Bottom1999 * appendResult4399 ) / _Texture_5_Far_Multiplier );
				float4 texArray5655 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, temp_output_4440_0, _Texture_5_H_AO_Index );
				float ifLocalVar7668 = 0;
				UNITY_BRANCH 
				if( _Texture_5_H_AO_Index > -1.0 )
				ifLocalVar7668 = texArray5655.y;
				half Texture_5_H5671 = ifLocalVar7668;
				float temp_output_6120_0 = ( _Texture_5_Heightmap_Depth * pow( Texture_5_H5671 , _Texture_5_Height_Contrast ) );
				float4 tex2DNode4369 = tex2D( _Texture_Splat_2, uv02588 );
				half Splat2_R2106 = tex2DNode4369.r;
				float HeightMask6205 = saturate(pow(((temp_output_6120_0*Splat2_R2106)*4)+(Splat2_R2106*2),_Texture_5_Heightblend_Far));
				float temp_output_4469_0 = ( 1.0 / _Texture_6_Tiling );
				float2 appendResult4471 = (float2(temp_output_4469_0 , temp_output_4469_0));
				float2 temp_output_4507_0 = ( ( Top_Bottom1999 * appendResult4471 ) / _Texture_6_Far_Multiplier );
				float4 texArray5695 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, temp_output_4507_0, _Texture_6_H_AO_Index );
				float ifLocalVar7670 = 0;
				UNITY_BRANCH 
				if( _Texture_6_H_AO_Index > -1.0 )
				ifLocalVar7670 = texArray5695.y;
				half Texture_6_H5711 = ifLocalVar7670;
				float temp_output_6126_0 = ( _Texture_6_Heightmap_Depth * pow( Texture_6_H5711 , _Texture_6_Height_Contrast ) );
				half Splat2_G2107 = tex2DNode4369.g;
				float HeightMask6208 = saturate(pow(((temp_output_6126_0*Splat2_G2107)*4)+(Splat2_G2107*2),_Texture_6_Heightblend_Far));
				float temp_output_4543_0 = ( 1.0 / _Texture_7_Tiling );
				float2 appendResult4545 = (float2(temp_output_4543_0 , temp_output_4543_0));
				float2 temp_output_4581_0 = ( ( Top_Bottom1999 * appendResult4545 ) / _Texture_7_Far_Multiplier );
				float4 texArray5735 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, temp_output_4581_0, _Texture_7_H_AO_Index );
				float ifLocalVar7672 = 0;
				UNITY_BRANCH 
				if( _Texture_7_H_AO_Index > -1.0 )
				ifLocalVar7672 = texArray5735.y;
				half Texture_7_H5751 = ifLocalVar7672;
				float temp_output_6132_0 = ( _Texture_7_Heightmap_Depth * pow( Texture_7_H5751 , _Texture_7_Height_Contrast ) );
				half Splat2_B2108 = tex2DNode4369.b;
				float HeightMask6211 = saturate(pow(((temp_output_6132_0*Splat2_B2108)*4)+(Splat2_B2108*2),_Texture_7_Heightblend_Far));
				float temp_output_4617_0 = ( 1.0 / _Texture_8_Tiling );
				float2 appendResult4619 = (float2(temp_output_4617_0 , temp_output_4617_0));
				float2 temp_output_4655_0 = ( ( Top_Bottom1999 * appendResult4619 ) / _Texture_8_Far_Multiplier );
				float4 texArray5775 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, temp_output_4655_0, _Texture_8_H_AO_Index );
				float ifLocalVar7674 = 0;
				UNITY_BRANCH 
				if( _Texture_8_H_AO_Index > -1.0 )
				ifLocalVar7674 = texArray5775.y;
				half Texture_8_H5791 = ifLocalVar7674;
				float temp_output_6138_0 = ( _Texture_8_Heightmap_Depth * pow( Texture_8_H5791 , _Texture_8_Height_Contrast ) );
				half Splat2_A2109 = tex2DNode4369.a;
				float HeightMask6214 = saturate(pow(((temp_output_6138_0*Splat2_A2109)*4)+(Splat2_A2109*2),_Texture_8_Heightblend_Far));
				float4 appendResult6524 = (float4(HeightMask6205 , HeightMask6208 , HeightMask6211 , HeightMask6214));
				float temp_output_3830_0 = ( 1.0 / _Texture_1_Tiling );
				float2 appendResult3284 = (float2(temp_output_3830_0 , temp_output_3830_0));
				float2 temp_output_3298_0 = ( ( Top_Bottom1999 * appendResult3284 ) / _Texture_1_Far_Multiplier );
				float4 texArray7704 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, temp_output_3298_0, _Texture_1_H_AO_Index );
				float ifLocalVar7658 = 0;
				UNITY_BRANCH 
				if( _Texture_1_H_AO_Index > -1.0 )
				ifLocalVar7658 = texArray7704.g;
				half Texture_1_H5480 = ifLocalVar7658;
				float temp_output_5544_0 = ( pow( Texture_1_H5480 , _Texture_1_Height_Contrast ) * _Texture_1_Heightmap_Depth );
				float4 tex2DNode4368 = tex2D( _Texture_Splat_1, uv02588 );
				half Splat1_R1438 = tex2DNode4368.r;
				float HeightMask6196 = saturate(pow(((temp_output_5544_0*Splat1_R1438)*4)+(Splat1_R1438*2),_Texture_1_Heightblend_Far));
				float temp_output_3831_0 = ( 1.0 / _Texture_2_Tiling );
				float2 appendResult3349 = (float2(temp_output_3831_0 , temp_output_3831_0));
				float2 temp_output_3345_0 = ( ( Top_Bottom1999 * appendResult3349 ) / _Texture_2_Far_Multiplier );
				float4 texArray5533 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, temp_output_3345_0, _Texture_2_H_AO_Index );
				float ifLocalVar7662 = 0;
				UNITY_BRANCH 
				if( _Texture_2_H_AO_Index > -1.0 )
				ifLocalVar7662 = texArray5533.y;
				half Texture_2_H5497 = ifLocalVar7662;
				float temp_output_5545_0 = ( _Texture_2_Heightmap_Depth * pow( Texture_2_H5497 , _Texture_2_Height_Contrast ) );
				half Splat1_G1441 = tex2DNode4368.g;
				float HeightMask6515 = saturate(pow(((temp_output_5545_0*Splat1_G1441)*4)+(Splat1_G1441*2),_Texture_2_Heightblend_Far));
				float temp_output_3832_0 = ( 1.0 / _Texture_3_Tiling );
				float2 appendResult3415 = (float2(temp_output_3832_0 , temp_output_3832_0));
				float2 temp_output_3412_0 = ( ( Top_Bottom1999 * appendResult3415 ) / _Texture_3_Far_Multiplier );
				float4 texArray5586 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, temp_output_3412_0, _Texture_3_H_AO_Index );
				float ifLocalVar7664 = 0;
				UNITY_BRANCH 
				if( _Texture_3_H_AO_Index > -1.0 )
				ifLocalVar7664 = texArray5586.y;
				half Texture_3_H5581 = ifLocalVar7664;
				float temp_output_5590_0 = ( _Texture_3_Heightmap_Depth * pow( Texture_3_H5581 , _Texture_3_Height_Contrast ) );
				half Splat1_B1442 = tex2DNode4368.b;
				float HeightMask6516 = saturate(pow(((temp_output_5590_0*Splat1_B1442)*4)+(Splat1_B1442*2),_Texture_3_Heightblend_Far));
				float temp_output_3833_0 = ( 1.0 / _Texture_4_Tiling );
				float2 appendResult3482 = (float2(temp_output_3833_0 , temp_output_3833_0));
				float2 temp_output_3479_0 = ( ( Top_Bottom1999 * appendResult3482 ) / _Texture_4_Far_Multiplier );
				float4 texArray5615 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, temp_output_3479_0, _Texture_4_H_AO_Index );
				float ifLocalVar7666 = 0;
				UNITY_BRANCH 
				if( _Texture_4_H_AO_Index > -1.0 )
				ifLocalVar7666 = texArray5615.y;
				half Texture_4_H5631 = ifLocalVar7666;
				float temp_output_6118_0 = ( _Texture_4_Heightmap_Depth * pow( Texture_4_H5631 , _Texture_4_Height_Contrast ) );
				half Splat1_A1491 = tex2DNode4368.a;
				float HeightMask6203 = saturate(pow(((temp_output_6118_0*Splat1_A1491)*4)+(Splat1_A1491*2),_Texture_4_Heightblend_Far));
				float4 appendResult6517 = (float4(HeightMask6196 , HeightMask6515 , HeightMask6516 , HeightMask6203));
				float4 texArray3292 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, temp_output_3298_0, _Texture_1_Albedo_Index );
				float4 ifLocalVar7657 = 0;
				UNITY_BRANCH 
				if( _Texture_1_Albedo_Index > -1.0 )
				ifLocalVar7657 = ( texArray3292 * _Texture_1_Color );
				half4 Texture_1_Final950 = ifLocalVar7657;
				float4 texArray3339 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, temp_output_3345_0, _Texture_2_Albedo_Index );
				float4 ifLocalVar7661 = 0;
				UNITY_BRANCH 
				if( _Texture_2_Albedo_Index > -1.0 )
				ifLocalVar7661 = ( texArray3339 * _Texture_2_Color );
				half4 Texture_2_Final3385 = ifLocalVar7661;
				float4 texArray3406 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, temp_output_3412_0, _Texture_3_Albedo_Index );
				float4 ifLocalVar7663 = 0;
				UNITY_BRANCH 
				if( _Texture_3_Albedo_Index > -1.0 )
				ifLocalVar7663 = ( texArray3406 * _Texture_3_Color );
				half4 Texture_3_Final3451 = ifLocalVar7663;
				float4 texArray3473 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, temp_output_3479_0, _Texture_4_Albedo_Index );
				float4 ifLocalVar7665 = 0;
				UNITY_BRANCH 
				if( _Texture_4_Albedo_Index > -1.0 )
				ifLocalVar7665 = ( texArray3473 * _Texture_4_Color );
				half4 Texture_4_Final3518 = ifLocalVar7665;
				float4 layeredBlendVar6512 = appendResult6517;
				float4 layeredBlend6512 = ( lerp( lerp( lerp( lerp( float4( 0,0,0,0 ) , Texture_1_Final950 , layeredBlendVar6512.x ) , Texture_2_Final3385 , layeredBlendVar6512.y ) , Texture_3_Final3451 , layeredBlendVar6512.z ) , Texture_4_Final3518 , layeredBlendVar6512.w ) );
				float4 texArray4445 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, temp_output_4440_0, _Texture_5_Albedo_Index );
				float4 ifLocalVar7667 = 0;
				UNITY_BRANCH 
				if( _Texture_5_Albedo_Index > -1.0 )
				ifLocalVar7667 = ( texArray4445 * _Texture_5_Color );
				half4 Texture_5_Final4396 = ifLocalVar7667;
				float4 texArray4512 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, temp_output_4507_0, _Texture_6_Albedo_Index );
				float4 ifLocalVar7669 = 0;
				UNITY_BRANCH 
				if( _Texture_6_Albedo_Index > -1.0 )
				ifLocalVar7669 = ( texArray4512 * _Texture_6_Color );
				half4 Texture_6_Final4536 = ifLocalVar7669;
				float4 texArray4586 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, temp_output_4581_0, _Texture_7_Albedo_Index );
				float4 ifLocalVar7671 = 0;
				UNITY_BRANCH 
				if( _Texture_7_Albedo_Index > -1.0 )
				ifLocalVar7671 = ( texArray4586 * _Texture_7_Color );
				half4 Texture_7_Final4614 = ifLocalVar7671;
				float4 texArray4660 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, temp_output_4655_0, _Texture_8_Albedo_Index );
				float4 ifLocalVar7673 = 0;
				UNITY_BRANCH 
				if( _Texture_8_Albedo_Index > -1.0 )
				ifLocalVar7673 = ( texArray4660 * _Texture_8_Color );
				half4 Texture_8_Final4689 = ifLocalVar7673;
				float4 layeredBlendVar6520 = appendResult6524;
				float4 layeredBlend6520 = ( lerp( lerp( lerp( lerp( layeredBlend6512 , Texture_5_Final4396 , layeredBlendVar6520.x ) , Texture_6_Final4536 , layeredBlendVar6520.y ) , Texture_7_Final4614 , layeredBlendVar6520.z ) , Texture_8_Final4689 , layeredBlendVar6520.w ) );
				float4 texArray4889 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, temp_output_4721_0, _Texture_9_Albedo_Index );
				float4 ifLocalVar7690 = 0;
				UNITY_BRANCH 
				if( _Texture_9_Albedo_Index > -1.0 )
				ifLocalVar7690 = ( texArray4889 * _Texture_9_Color );
				half4 Texture_9_Final4987 = ifLocalVar7690;
				float4 texArray4913 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, temp_output_4879_0, _Texture_10_Albedo_Index );
				float4 ifLocalVar7688 = 0;
				UNITY_BRANCH 
				if( _Texture_10_Albedo_Index > -1.0 )
				ifLocalVar7688 = ( texArray4913 * _Texture_10_Color );
				half4 Texture_10_Final4994 = ifLocalVar7688;
				float4 texArray4923 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, temp_output_4904_0, _Texture_11_Albedo_Index );
				float4 ifLocalVar7686 = 0;
				UNITY_BRANCH 
				if( _Texture_11_Albedo_Index > -1.0 )
				ifLocalVar7686 = ( texArray4923 * _Texture_11_Color );
				half4 Texture_11_Final4996 = ifLocalVar7686;
				float4 texArray4952 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, temp_output_4932_0, _Texture_12_Albedo_Index );
				float4 ifLocalVar7684 = 0;
				UNITY_BRANCH 
				if( _Texture_12_Albedo_Index > -1.0 )
				ifLocalVar7684 = ( texArray4952 * _Texture_12_Color );
				half4 Texture_12_Final4997 = ifLocalVar7684;
				float4 layeredBlendVar6528 = appendResult6529;
				float4 layeredBlend6528 = ( lerp( lerp( lerp( lerp( layeredBlend6520 , Texture_9_Final4987 , layeredBlendVar6528.x ) , Texture_10_Final4994 , layeredBlendVar6528.y ) , Texture_11_Final4996 , layeredBlendVar6528.z ) , Texture_12_Final4997 , layeredBlendVar6528.w ) );
				float4 texArray5034 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, temp_output_5112_0, _Texture_13_Albedo_Index );
				float4 ifLocalVar7682 = 0;
				UNITY_BRANCH 
				if( _Texture_13_Albedo_Index > -1.0 )
				ifLocalVar7682 = ( texArray5034 * _Texture_13_Color );
				half4 Texture_13_Final5058 = ifLocalVar7682;
				float4 texArray5171 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, temp_output_5172_0, _Texture_14_Albedo_Index );
				float4 ifLocalVar7680 = 0;
				UNITY_BRANCH 
				if( _Texture_14_Albedo_Index > -1.0 )
				ifLocalVar7680 = ( texArray5171 * _Texture_14_Color );
				half4 Texture_14_Final5163 = ifLocalVar7680;
				float4 texArray5272 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, temp_output_5190_0, _Texture_15_Albedo_Index );
				float4 ifLocalVar7678 = 0;
				UNITY_BRANCH 
				if( _Texture_15_Albedo_Index > -1.0 )
				ifLocalVar7678 = ( texArray5272 * _Texture_15_Color );
				half4 Texture_15_Final5270 = ifLocalVar7678;
				float4 texArray5143 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, temp_output_5153_0, _Texture_16_Albedo_Index );
				float4 ifLocalVar7676 = 0;
				UNITY_BRANCH 
				if( _Texture_16_Albedo_Index > -1.0 )
				ifLocalVar7676 = ( texArray5143 * _Texture_16_Color );
				half4 Texture_16_Final5094 = ifLocalVar7676;
				float4 layeredBlendVar6532 = appendResult6533;
				float4 layeredBlend6532 = ( lerp( lerp( lerp( lerp( layeredBlend6528 , Texture_13_Final5058 , layeredBlendVar6532.x ) , Texture_14_Final5163 , layeredBlendVar6532.y ) , Texture_15_Final5270 , layeredBlendVar6532.z ) , Texture_16_Final5094 , layeredBlendVar6532.w ) );
				float4 break3856 = layeredBlend6532;
				float3 appendResult3857 = (float3(break3856.x , break3856.y , break3856.z));
				float3 appendResult7709 = (float3(tex2DNode7708.r , tex2DNode7708.g , tex2DNode7708.b));
				float2 weightedBlendVar7711 = appendResult7710;
				float3 weightedAvg7711 = ( ( weightedBlendVar7711.x*appendResult3857 + weightedBlendVar7711.y*appendResult7709 )/( weightedBlendVar7711.x + weightedBlendVar7711.y ) );
				float2 temp_cast_0 = (( ( ase_worldPos.y / _Geological_Tiling_Far ) + _Geological_Map_Offset_Far )).xx;
				float4 tex2DNode6969 = tex2D( _Texture_Geological_Map, temp_cast_0 );
				float3 appendResult6971 = (float3(tex2DNode6969.r , tex2DNode6969.g , tex2DNode6969.b));
				float3 blendOpSrc4362 = weightedAvg7711;
				float3 blendOpDest4362 = ( ( ( appendResult6971 + float3( -0.3,-0.3,-0.3 ) ) * _Geological_Map_Far_Power ) * ( ( _Texture_16_Geological_Power * Splat4_A2546 ) + ( ( _Texture_15_Geological_Power * Splat4_B2545 ) + ( ( _Texture_14_Geological_Power * Splat4_G2544 ) + ( ( _Texture_13_Geological_Power * Splat4_R2543 ) + ( ( _Texture_12_Geological_Power * Splat3_A2540 ) + ( ( _Texture_11_Geological_Power * Splat3_B2539 ) + ( ( _Texture_10_Geological_Power * Splat3_G2538 ) + ( ( _Texture_9_Geological_Power * Splat3_R2537 ) + ( ( _Texture_8_Geological_Power * Splat2_A2109 ) + ( ( _Texture_7_Geological_Power * Splat2_B2108 ) + ( ( _Texture_6_Geological_Power * Splat2_G2107 ) + ( ( _Texture_5_Geological_Power * Splat2_R2106 ) + ( ( _Texture_1_Geological_Power * Splat1_R1438 ) + ( ( _Texture_2_Geological_Power * Splat1_G1441 ) + ( ( _Texture_4_Geological_Power * Splat1_A1491 ) + ( _Texture_3_Geological_Power * Splat1_B1442 ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) );
				float4 break1409 = ( _Texture_Snow_Average * _Snow_Color );
				float3 appendResult1410 = (float3(break1409.x , break1409.y , break1409.z));
				float4 layeredBlendVar6518 = tex2DNode4368;
				float layeredBlend6518 = ( lerp( lerp( lerp( lerp( 0.0 , temp_output_5544_0 , layeredBlendVar6518.x ) , temp_output_5545_0 , layeredBlendVar6518.y ) , temp_output_5590_0 , layeredBlendVar6518.z ) , temp_output_6118_0 , layeredBlendVar6518.w ) );
				float4 layeredBlendVar6525 = tex2DNode4369;
				float layeredBlend6525 = ( lerp( lerp( lerp( lerp( layeredBlend6518 , temp_output_6120_0 , layeredBlendVar6525.x ) , temp_output_6126_0 , layeredBlendVar6525.y ) , temp_output_6132_0 , layeredBlendVar6525.z ) , temp_output_6138_0 , layeredBlendVar6525.w ) );
				float4 layeredBlendVar6527 = tex2DNode4370;
				float layeredBlend6527 = ( lerp( lerp( lerp( lerp( layeredBlend6525 , temp_output_6144_0 , layeredBlendVar6527.x ) , temp_output_6150_0 , layeredBlendVar6527.y ) , temp_output_6156_0 , layeredBlendVar6527.z ) , temp_output_6162_0 , layeredBlendVar6527.w ) );
				float4 layeredBlendVar6530 = tex2DNode4371;
				float layeredBlend6530 = ( lerp( lerp( lerp( lerp( layeredBlend6527 , temp_output_6168_0 , layeredBlendVar6530.x ) , temp_output_6174_0 , layeredBlendVar6530.y ) , temp_output_6180_0 , layeredBlendVar6530.z ) , temp_output_6186_0 , layeredBlendVar6530.w ) );
				float4 texArray6270 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, Top_Bottom1999, (float)_Texture_Snow_H_AO_Index );
				float temp_output_6545_0 = ( layeredBlend6530 + ( pow( texArray6270.y , _Snow_Height_Contrast ) * _Snow_Heightmap_Depth ) );
				float clampResult6546 = clamp( temp_output_6545_0 , 0.0 , temp_output_6545_0 );
				float clampResult7176 = clamp( clampResult6546 , 0.0 , 1.0 );
				float simplePerlin2D7750 = snoise( ( Top_Bottom1999 * _Snow_Noise_Tiling ) );
				float lerpResult7728 = lerp( 1.0 , simplePerlin2D7750 , ( _Snow_Noise_Power * 0.1 ));
				float temp_output_7621_0 = ( _Snow_Maximum_Angle_Hardness * 0.5 );
				float clampResult1354 = clamp( normalWS.y , 0.0 , 0.9999 );
				float temp_output_1349_0 = ( _Snow_Maximum_Angle / 90.0 );
				float clampResult1347 = clamp( ( clampResult1354 - ( 1.0 - temp_output_1349_0 ) ) , 0.0 , 2.0 );
				half SnowSlope1352 = ( clampResult1347 * ( 1.0 / temp_output_1349_0 ) );
				float clampResult6569 = clamp( ( 1.0 - ( temp_output_7621_0 * 0.1 ) ) , 0.01 , 1.0 );
				float clampResult4146 = clamp( pow( ( ( _Snow_Amount * ( 0.1 - ( temp_output_7621_0 * 0.01 ) ) ) * SnowSlope1352 ) , clampResult6569 ) , 0.0 , 1.0 );
				float temp_output_3751_0 = ( ( 1.0 - _Snow_Min_Height ) + ase_worldPos.y );
				float clampResult4220 = clamp( ( temp_output_3751_0 + 1.0 ) , 0.0 , 1.0 );
				float clampResult4260 = clamp( ( ( 1.0 - ( ( temp_output_3751_0 + _Snow_Min_Height_Blending ) / temp_output_3751_0 ) ) + -0.5 ) , 0.0 , 1.0 );
				float clampResult4263 = clamp( ( clampResult4220 + clampResult4260 ) , 0.0 , 1.0 );
				float lerpResult3759 = lerp( 0.0 , ( ( _Snow_Amount * lerpResult7728 ) * clampResult4146 ) , clampResult4263);
				float clampResult4298 = clamp( lerpResult3759 , 0.0 , 2.0 );
				float HeightMask6539 = saturate(pow(((( 1.0 - clampResult7176 )*( clampResult4298 * ( 1.0 - ( ( _Texture_16_Snow_Reduction * Splat4_A2546 ) + ( ( _Texture_15_Snow_Reduction * Splat4_B2545 ) + ( ( ( _Texture_13_Snow_Reduction * Splat4_R2543 ) + ( ( _Texture_12_Snow_Reduction * Splat3_A2540 ) + ( ( _Texture_11_Snow_Reduction * Splat3_B2539 ) + ( ( ( _Texture_9_Snow_Reduction * Splat3_R2537 ) + ( ( _Texture_8_Snow_Reduction * Splat2_A2109 ) + ( ( _Texture_7_Snow_Reduction * Splat2_B2108 ) + ( ( ( _Texture_5_Snow_Reduction * Splat2_R2106 ) + ( ( _Texture_1_Snow_Reduction * Splat1_R1438 ) + ( ( _Texture_2_Snow_Reduction * Splat1_G1441 ) + ( ( _Texture_3_Snow_Reduction * Splat1_B1442 ) + ( _Texture_4_Snow_Reduction * Splat1_A1491 ) ) ) ) ) + ( _Texture_6_Snow_Reduction * Splat2_G2107 ) ) ) ) ) + ( _Texture_10_Snow_Reduction * Splat3_G2538 ) ) ) ) ) + ( _Texture_14_Snow_Reduction * Splat4_G2544 ) ) ) ) ) ))*4)+(( clampResult4298 * ( 1.0 - ( ( _Texture_16_Snow_Reduction * Splat4_A2546 ) + ( ( _Texture_15_Snow_Reduction * Splat4_B2545 ) + ( ( ( _Texture_13_Snow_Reduction * Splat4_R2543 ) + ( ( _Texture_12_Snow_Reduction * Splat3_A2540 ) + ( ( _Texture_11_Snow_Reduction * Splat3_B2539 ) + ( ( ( _Texture_9_Snow_Reduction * Splat3_R2537 ) + ( ( _Texture_8_Snow_Reduction * Splat2_A2109 ) + ( ( _Texture_7_Snow_Reduction * Splat2_B2108 ) + ( ( ( _Texture_5_Snow_Reduction * Splat2_R2106 ) + ( ( _Texture_1_Snow_Reduction * Splat1_R1438 ) + ( ( _Texture_2_Snow_Reduction * Splat1_G1441 ) + ( ( _Texture_3_Snow_Reduction * Splat1_B1442 ) + ( _Texture_4_Snow_Reduction * Splat1_A1491 ) ) ) ) ) + ( _Texture_6_Snow_Reduction * Splat2_G2107 ) ) ) ) ) + ( _Texture_10_Snow_Reduction * Splat3_G2538 ) ) ) ) ) + ( _Texture_14_Snow_Reduction * Splat4_G2544 ) ) ) ) ) )*2),_Snow_Heightblend_Far));
				float3 lerpResult1356 = lerp( ( saturate( ( blendOpSrc4362 + blendOpDest4362 ) )) , appendResult1410 , HeightMask6539);
				
				float4 texArray4374 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Normal, sampler_Texture_Array_Normal, ( Top_Bottom1999 / _Perlin_Normal_Tiling_Far ), (float)_Texture_Perlin_Normal_Index );
				float2 appendResult11_g668 = (float2(texArray4374.w , texArray4374.y));
				float2 temp_output_4_0_g668 = ( ( ( appendResult11_g668 * float2( 2,2 ) ) + float2( -1,-1 ) ) * _Perlin_Normal_Power );
				float2 break8_g668 = temp_output_4_0_g668;
				float dotResult5_g668 = dot( temp_output_4_0_g668 , temp_output_4_0_g668 );
				float temp_output_9_0_g668 = sqrt( ( 1.0 - saturate( dotResult5_g668 ) ) );
				float3 appendResult20_g668 = (float3(break8_g668.x , break8_g668.y , temp_output_9_0_g668));
				float3 temp_output_7038_0 = appendResult20_g668;
				float clampResult3775 = clamp( ( ( _Texture_16_Perlin_Power * Splat4_A2546 ) + ( ( _Texture_15_Perlin_Power * Splat4_B2545 ) + ( ( _Texture_14_Perlin_Power * Splat4_G2544 ) + ( ( _Texture_13_Perlin_Power * Splat4_R2543 ) + ( ( _Texture_12_Perlin_Power * Splat3_A2540 ) + ( ( _Texture_11_Perlin_Power * Splat3_B2539 ) + ( ( _Texture_10_Perlin_Power * Splat3_G2538 ) + ( ( _Texture_9_Perlin_Power * Splat3_R2537 ) + ( ( _Texture_8_Perlin_Power * Splat2_A2109 ) + ( ( _Texture_7_Perlin_Power * Splat2_B2108 ) + ( ( _Texture_6_Perlin_Power * Splat2_G2107 ) + ( ( _Texture_5_Perlin_Power * Splat2_R2106 ) + ( ( _Texture_1_Perlin_Power * Splat1_R1438 ) + ( ( _Texture_2_Perlin_Power * Splat1_G1441 ) + ( ( _Texture_4_Perlin_Power * Splat1_A1491 ) + ( _Texture_3_Perlin_Power * Splat1_B1442 ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) , 0.0 , 1.0 );
				float3 lerpResult3776 = lerp( float3( 0,0,1 ) , temp_output_7038_0 , clampResult3775);
				float3 lerpResult3906 = lerp( float3( 0,0,1 ) , temp_output_7038_0 , ( _Snow_Perlin_Power * 0.5 ));
				float3 lerpResult6503 = lerp( lerpResult3776 , lerpResult3906 , HeightMask6539);
				float3 normalizeResult3901 = normalize( UnpackNormalmapRGorAG( tex2D( _Global_Normal_Map, uv02588 ), _Global_Normalmap_Power ) );
				float3 temp_output_4100_0 = BlendNormal( lerpResult6503 , normalizeResult3901 );
				
				float3 clampResult6245 = clamp( appendResult1410 , float3( 0,0,0 ) , float3( 0.5,0.5,0.5 ) );
				float3 lerpResult4040 = lerp( ( ( appendResult3857 * float3( 0.3,0.3,0.3 ) ) * _Terrain_Specular ) , ( clampResult6245 * _Snow_Specular ) , HeightMask6539);
				
				float lerpResult3951 = lerp( ( break3856.w * _Terrain_Smoothness ) , break1409.w , HeightMask6539);
				
				float clampResult7695 = clamp( ( ( 1.0 + temp_output_4100_0.y ) * 0.5 ) , ( 1.0 - _Ambient_Occlusion_Power ) , 1.0 );
				#ifdef _USE_AO_TEXTURE_ON
				float staticSwitch7703 = 1.0;
				#else
				float staticSwitch7703 = clampResult7695;
				#endif
				
				surfaceDescription.Albedo = lerpResult1356;
				surfaceDescription.Normal = temp_output_4100_0;
				surfaceDescription.Emission = 0;
				surfaceDescription.Specular = lerpResult4040;
				surfaceDescription.Metallic = 0;
				surfaceDescription.Smoothness = lerpResult3951;
				surfaceDescription.Occlusion = staticSwitch7703;
				surfaceDescription.Alpha = 1;
				surfaceDescription.AlphaClipThreshold = 0;

#ifdef _MATERIAL_FEATURE_CLEAR_COAT
				surfaceDescription.CoatMask = 0;
#endif

#if defined(_MATERIAL_FEATURE_SUBSURFACE_SCATTERING) || defined(_MATERIAL_FEATURE_TRANSMISSION)
				surfaceDescription.DiffusionProfile = asfloat (uint(1074012128);
#endif

#ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
				surfaceDescription.SubsurfaceMask = 1;
#endif

#ifdef _MATERIAL_FEATURE_TRANSMISSION
				surfaceDescription.Thickness = 0;
#endif

#ifdef _MATERIAL_FEATURE_ANISOTROPY
				surfaceDescription.Anisotropy = 0;
#endif

#ifdef _MATERIAL_FEATURE_IRIDESCENCE
				surfaceDescription.IridescenceThickness = 0;
				surfaceDescription.IridescenceMask = 1;
#endif

#ifdef _MATERIAL_FEATURE_TRANSPARENCY
				surfaceDescription.IndexOfRefraction = 1;
				surfaceDescription.TransmittanceColor = float3( 1, 1, 1 );
				surfaceDescription.TransmittanceAbsorptionDistance = 1000000;
				surfaceDescription.TransmittanceMask = 0;
#endif
				GetSurfaceAndBuiltinData ( surfaceDescription, input, normalizedWorldViewDir, posInput, surfaceData, builtinData );
				ENCODE_INTO_GBUFFER ( surfaceData, builtinData, posInput.positionSS, outGBuffer );
#ifdef _DEPTHOFFSET_ON
				outputDepth = posInput.deviceDepth;
#endif
			}

            ENDHLSL
        }
        
		
		
        Pass
        {
			
            Name "META"
            Tags { "LightMode"="Meta" }
            Cull Off
            HLSLPROGRAM
			//#define UNITY_MATERIAL_LIT
			#pragma vertex Vert
			#pragma fragment Frag

			#define ASE_SRP_VERSION 50702
			#define _MATERIAL_FEATURE_SPECULAR_COLOR 1
			#define _NORMALMAP 1
			#pragma multi_compile __ _USE_AO_TEXTURE_ON
			#pragma instancing_options assumeuniformscaling nomatrices nolightprobe nolightmap
			#include "TerrainVertexCTSHD.hlsl"

        
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/NormalSurfaceGradient.hlsl"
        
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/FragInputs.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"
        
			#define SHADERPASS SHADERPASS_LIGHT_TRANSPORT
            #define ATTRIBUTES_NEED_NORMAL
            #define ATTRIBUTES_NEED_TANGENT
            #define ATTRIBUTES_NEED_TEXCOORD0
            #define ATTRIBUTES_NEED_TEXCOORD1
            #define ATTRIBUTES_NEED_TEXCOORD2
			#define ATTRIBUTES_NEED_COLOR
        
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Material.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/Lit.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/BuiltinUtilities.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/MaterialUtilities.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Decal/DecalUtilities.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/LitDecalData.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphFunctions.hlsl"

            struct AttributesMesh 
			{
                float4 positionOS : POSITION;
                float3 normalOS : NORMAL;
                float4 tangentOS : TANGENT;
                float2 uv0 : TEXCOORD0;
                float2 uv1 : TEXCOORD1;
                float2 uv2 : TEXCOORD2;
                float4 color : COLOR;
				
            };

            struct PackedVaryingsMeshToPS
			{
                float4 positionCS : SV_Position;
				float4 ase_texcoord : TEXCOORD0;
				float4 ase_texcoord1 : TEXCOORD1;
				float4 ase_texcoord2 : TEXCOORD2;
            };
            
			half _Global_Color_Map_Far_Power;
			sampler2D _Global_Color_Map;
			float2 _Global_Color_Map_Offset;
			float _Global_Color_Map_Scale;
			half _Global_Color_Opacity_Power;
			half _Texture_13_Heightmap_Depth;
			half _Texture_13_H_AO_Index;
			TEXTURE2D_ARRAY( _Texture_Array_Albedo );
			uniform SAMPLER( sampler_Texture_Array_Albedo );
			half _Texture_13_Tiling;
			half _Texture_13_Far_Multiplier;
			half _Texture_13_Height_Contrast;
			sampler2D _Texture_Splat_4;
			half _Texture_13_Heightblend_Far;
			half _Texture_14_Heightmap_Depth;
			half _Texture_14_H_AO_Index;
			half _Texture_14_Tiling;
			half _Texture_14_Far_Multiplier;
			half _Texture_14_Height_Contrast;
			half _Texture_14_Heightblend_Far;
			half _Texture_15_Heightmap_Depth;
			half _Texture_15_H_AO_Index;
			half _Texture_15_Tiling;
			half _Texture_15_Far_Multiplier;
			half _Texture_15_Height_Contrast;
			half _Texture_15_Heightblend_Far;
			half _Texture_16_Heightmap_Depth;
			half _Texture_16_H_AO_Index;
			half _Texture_16_Tiling;
			half _Texture_16_Far_Multiplier;
			half _Texture_16_Height_Contrast;
			half _Texture_16_Heightblend_Far;
			half _Texture_9_Heightmap_Depth;
			half _Texture_9_H_AO_Index_AO_H_Index;
			half _Texture_9_Tiling;
			half _Texture_9_Far_Multiplier;
			half _Texture_9_Height_Contrast;
			sampler2D _Texture_Splat_3;
			half _Texture_9_Heightblend_Far;
			half _Texture_10_Heightmap_Depth;
			half _Texture_10_H_AO_Index;
			half _Texture_10_Tiling;
			half _Texture_10_Far_Multiplier;
			half _Texture_10_Height_Contrast;
			half _Texture_10_Heightblend_Far;
			half _Texture_11_Heightmap_Depth;
			half _Texture_11_H_AO_Index;
			half _Texture_11_Tiling;
			half _Texture_11_Far_Multiplier;
			half _Texture_11_Height_Contrast;
			half _Texture_11_Heightblend_Far;
			half _Texture_12_Heightmap_Depth;
			half _Texture_12_H_AO_Index;
			half _Texture_12_Tiling;
			half _Texture_12_Far_Multiplier;
			half _Texture_12_Height_Contrast;
			half _Texture_12_Heightblend_Far;
			half _Texture_5_Heightmap_Depth;
			half _Texture_5_H_AO_Index;
			half _Texture_5_Tiling;
			half _Texture_5_Far_Multiplier;
			half _Texture_5_Height_Contrast;
			sampler2D _Texture_Splat_2;
			half _Texture_5_Heightblend_Far;
			half _Texture_6_Heightmap_Depth;
			half _Texture_6_H_AO_Index;
			half _Texture_6_Tiling;
			half _Texture_6_Far_Multiplier;
			half _Texture_6_Height_Contrast;
			half _Texture_6_Heightblend_Far;
			half _Texture_7_Heightmap_Depth;
			half _Texture_7_H_AO_Index;
			half _Texture_7_Tiling;
			half _Texture_7_Far_Multiplier;
			half _Texture_7_Height_Contrast;
			half _Texture_7_Heightblend_Far;
			half _Texture_8_Heightmap_Depth;
			half _Texture_8_H_AO_Index;
			half _Texture_8_Tiling;
			half _Texture_8_Far_Multiplier;
			half _Texture_8_Height_Contrast;
			half _Texture_8_Heightblend_Far;
			half _Texture_1_H_AO_Index;
			half _Texture_1_Tiling;
			half _Texture_1_Far_Multiplier;
			half _Texture_1_Height_Contrast;
			half _Texture_1_Heightmap_Depth;
			sampler2D _Texture_Splat_1;
			half _Texture_1_Heightblend_Far;
			half _Texture_2_Heightmap_Depth;
			half _Texture_2_H_AO_Index;
			half _Texture_2_Tiling;
			half _Texture_2_Far_Multiplier;
			half _Texture_2_Height_Contrast;
			half _Texture_2_Heightblend_Far;
			half _Texture_3_Heightmap_Depth;
			half _Texture_3_H_AO_Index;
			half _Texture_3_Tiling;
			half _Texture_3_Far_Multiplier;
			half _Texture_3_Height_Contrast;
			half _Texture_3_Heightblend_Far;
			half _Texture_4_Heightmap_Depth;
			half _Texture_4_H_AO_Index;
			half _Texture_4_Tiling;
			half _Texture_4_Far_Multiplier;
			half _Texture_4_Height_Contrast;
			half _Texture_4_Heightblend_Far;
			half _Texture_1_Albedo_Index;
			half4 _Texture_1_Color;
			half _Texture_2_Albedo_Index;
			half4 _Texture_2_Color;
			half _Texture_3_Albedo_Index;
			half4 _Texture_3_Color;
			half _Texture_4_Albedo_Index;
			half4 _Texture_4_Color;
			half _Texture_5_Albedo_Index;
			half4 _Texture_5_Color;
			half _Texture_6_Albedo_Index;
			half4 _Texture_6_Color;
			half _Texture_7_Albedo_Index;
			half4 _Texture_7_Color;
			half _Texture_8_Albedo_Index;
			half4 _Texture_8_Color;
			half _Texture_9_Albedo_Index;
			half4 _Texture_9_Color;
			half _Texture_10_Albedo_Index;
			half4 _Texture_10_Color;
			half _Texture_11_Albedo_Index;
			half4 _Texture_11_Color;
			half _Texture_12_Albedo_Index;
			half4 _Texture_12_Color;
			half _Texture_13_Albedo_Index;
			half4 _Texture_13_Color;
			half _Texture_14_Albedo_Index;
			half4 _Texture_14_Color;
			half _Texture_15_Albedo_Index;
			half4 _Texture_15_Color;
			half _Texture_16_Albedo_Index;
			half4 _Texture_16_Color;
			sampler2D _Texture_Geological_Map;
			half _Geological_Tiling_Far;
			half _Geological_Map_Offset_Far;
			half _Geological_Map_Far_Power;
			half _Texture_16_Geological_Power;
			half _Texture_15_Geological_Power;
			half _Texture_14_Geological_Power;
			half _Texture_13_Geological_Power;
			half _Texture_12_Geological_Power;
			half _Texture_11_Geological_Power;
			half _Texture_10_Geological_Power;
			half _Texture_9_Geological_Power;
			half _Texture_8_Geological_Power;
			half _Texture_7_Geological_Power;
			half _Texture_6_Geological_Power;
			half _Texture_5_Geological_Power;
			half _Texture_1_Geological_Power;
			half _Texture_2_Geological_Power;
			half _Texture_4_Geological_Power;
			half _Texture_3_Geological_Power;
			half4 _Texture_Snow_Average;
			half4 _Snow_Color;
			int _Texture_Snow_H_AO_Index;
			half _Snow_Height_Contrast;
			half _Snow_Heightmap_Depth;
			half _Snow_Amount;
			half _Snow_Noise_Tiling;
			half _Snow_Noise_Power;
			half _Snow_Maximum_Angle_Hardness;
			half _Snow_Maximum_Angle;
			half _Snow_Min_Height;
			half _Snow_Min_Height_Blending;
			half _Texture_16_Snow_Reduction;
			half _Texture_15_Snow_Reduction;
			half _Texture_13_Snow_Reduction;
			half _Texture_12_Snow_Reduction;
			half _Texture_11_Snow_Reduction;
			half _Texture_9_Snow_Reduction;
			half _Texture_8_Snow_Reduction;
			half _Texture_7_Snow_Reduction;
			half _Texture_5_Snow_Reduction;
			half _Texture_1_Snow_Reduction;
			half _Texture_2_Snow_Reduction;
			half _Texture_3_Snow_Reduction;
			half _Texture_4_Snow_Reduction;
			half _Texture_6_Snow_Reduction;
			half _Texture_10_Snow_Reduction;
			half _Texture_14_Snow_Reduction;
			half _Snow_Heightblend_Far;
			TEXTURE2D_ARRAY( _Texture_Array_Normal );
			uniform SAMPLER( sampler_Texture_Array_Normal );
			half _Perlin_Normal_Tiling_Far;
			int _Texture_Perlin_Normal_Index;
			half _Perlin_Normal_Power;
			half _Texture_16_Perlin_Power;
			half _Texture_15_Perlin_Power;
			half _Texture_14_Perlin_Power;
			half _Texture_13_Perlin_Power;
			half _Texture_12_Perlin_Power;
			half _Texture_11_Perlin_Power;
			half _Texture_10_Perlin_Power;
			half _Texture_9_Perlin_Power;
			half _Texture_8_Perlin_Power;
			half _Texture_7_Perlin_Power;
			half _Texture_6_Perlin_Power;
			half _Texture_5_Perlin_Power;
			half _Texture_1_Perlin_Power;
			half _Texture_2_Perlin_Power;
			half _Texture_4_Perlin_Power;
			half _Texture_3_Perlin_Power;
			half _Snow_Perlin_Power;
			half _Global_Normalmap_Power;
			sampler2D _Global_Normal_Map;
			half _Terrain_Specular;
			half _Snow_Specular;
			half _Terrain_Smoothness;
			half _Ambient_Occlusion_Power;
			
			float3 mod2D289( float3 x ) { return x - floor( x * ( 1.0 / 289.0 ) ) * 289.0; }
			float2 mod2D289( float2 x ) { return x - floor( x * ( 1.0 / 289.0 ) ) * 289.0; }
			float3 permute( float3 x ) { return mod2D289( ( ( x * 34.0 ) + 1.0 ) * x ); }
			float snoise( float2 v )
			{
				const float4 C = float4( 0.211324865405187, 0.366025403784439, -0.577350269189626, 0.024390243902439 );
				float2 i = floor( v + dot( v, C.yy ) );
				float2 x0 = v - i + dot( i, C.xx );
				float2 i1;
				i1 = ( x0.x > x0.y ) ? float2( 1.0, 0.0 ) : float2( 0.0, 1.0 );
				float4 x12 = x0.xyxy + C.xxzz;
				x12.xy -= i1;
				i = mod2D289( i );
				float3 p = permute( permute( i.y + float3( 0.0, i1.y, 1.0 ) ) + i.x + float3( 0.0, i1.x, 1.0 ) );
				float3 m = max( 0.5 - float3( dot( x0, x0 ), dot( x12.xy, x12.xy ), dot( x12.zw, x12.zw ) ), 0.0 );
				m = m * m;
				m = m * m;
				float3 x = 2.0 * frac( p * C.www ) - 1.0;
				float3 h = abs( x ) - 0.5;
				float3 ox = floor( x + 0.5 );
				float3 a0 = x - ox;
				m *= 1.79284291400159 - 0.85373472095314 * ( a0 * a0 + h * h );
				float3 g;
				g.x = a0.x * x0.x + h.x * x0.y;
				g.yz = a0.yz * x12.xz + h.yz * x12.yw;
				return 130.0 * dot( m, g );
			}
			

			void BuildSurfaceData ( FragInputs fragInputs, GlobalSurfaceDescription surfaceDescription, float3 V, PositionInputs posInput, out SurfaceData surfaceData )
			{
				ZERO_INITIALIZE ( SurfaceData, surfaceData );

				float3 normalTS = float3( 0.0f, 0.0f, 1.0f );
				normalTS = surfaceDescription.Normal;
				float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
				GetNormalWS ( fragInputs, normalTS, surfaceData.normalWS ,doubleSidedConstants);

				surfaceData.ambientOcclusion = 1.0f;

				surfaceData.baseColor = surfaceDescription.Albedo;
				surfaceData.perceptualSmoothness = surfaceDescription.Smoothness;
				surfaceData.ambientOcclusion = surfaceDescription.Occlusion;

				surfaceData.materialFeatures = MATERIALFEATUREFLAGS_LIT_STANDARD;

#ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
				surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SPECULAR_COLOR;
				surfaceData.specularColor = surfaceDescription.Specular;
#else
				surfaceData.metallic = surfaceDescription.Metallic;
#endif

#if defined(_MATERIAL_FEATURE_SUBSURFACE_SCATTERING) || defined(_MATERIAL_FEATURE_TRANSMISSION)
				surfaceData.diffusionProfileHash = asuint(surfaceDescription.DiffusionProfile);
#endif

#ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
				surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SUBSURFACE_SCATTERING;
				surfaceData.subsurfaceMask = surfaceDescription.SubsurfaceMask;

#else
				surfaceData.subsurfaceMask = 1.0f;
#endif

#ifdef _MATERIAL_FEATURE_TRANSMISSION
				surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
				surfaceData.thickness = surfaceDescription.Thickness;
#endif

				surfaceData.tangentWS = normalize ( fragInputs.worldToTangent[ 0 ].xyz );
				surfaceData.tangentWS = Orthonormalize ( surfaceData.tangentWS, surfaceData.normalWS );

#ifdef _MATERIAL_FEATURE_ANISOTROPY
				surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_ANISOTROPY;
				surfaceData.anisotropy = surfaceDescription.Anisotropy;

#else
				surfaceData.anisotropy = 0;
#endif

#ifdef _MATERIAL_FEATURE_CLEAR_COAT
				surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_CLEAR_COAT;
				surfaceData.coatMask = surfaceDescription.CoatMask;
#else
				surfaceData.coatMask = 0.0f;
#endif

#ifdef _MATERIAL_FEATURE_IRIDESCENCE
				surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_IRIDESCENCE;
				surfaceData.iridescenceThickness = surfaceDescription.IridescenceThickness;
				surfaceData.iridescenceMask = surfaceDescription.IridescenceMask;
#else
				surfaceData.iridescenceThickness = 0.0;
				surfaceData.iridescenceMask = 1.0;
#endif

				//ASE CUSTOM TAG
#ifdef _MATERIAL_FEATURE_TRANSPARENCY
				surfaceData.ior = surfaceDescription.IndexOfRefraction;
				surfaceData.transmittanceColor = surfaceDescription.TransmittanceColor;
				surfaceData.atDistance = surfaceDescription.TransmittanceAbsorptionDistance;
				surfaceData.transmittanceMask = surfaceDescription.TransmittanceMask;
#else
				surfaceData.ior = 1.0;
				surfaceData.transmittanceColor = float3( 1.0, 1.0, 1.0 );
				surfaceData.atDistance = 1000000.0;
				surfaceData.transmittanceMask = 0.0;
#endif

				surfaceData.specularOcclusion = GetSpecularOcclusionFromAmbientOcclusion (ClampNdotV (dot (surfaceData.normalWS, V)), surfaceData.ambientOcclusion, PerceptualSmoothnessToRoughness (surfaceData.perceptualSmoothness));

#if HAVE_DECALS
				if (_EnableDecals)
				{
					DecalSurfaceData decalSurfaceData = GetDecalSurfaceData (posInput, surfaceDescription.Alpha);
					ApplyDecalToSurfaceData (decalSurfaceData, surfaceData);
				}
#endif

#if defined(_BENTNORMALMAP) && defined(_ENABLESPECULAROCCLUSION)
				surfaceData.specularOcclusion = GetSpecularOcclusionFromBentAO ( V, bentNormalWS, surfaceData );
#elif defined(_MASKMAP)
				surfaceData.specularOcclusion = GetSpecularOcclusionFromAmbientOcclusion ( NdotV, surfaceData.ambientOcclusion, PerceptualSmoothnessToRoughness ( surfaceData.perceptualSmoothness ) );
#endif
			}

            void GetSurfaceAndBuiltinData( GlobalSurfaceDescription surfaceDescription, FragInputs fragInputs, float3 V, inout PositionInputs posInput, out SurfaceData surfaceData, out BuiltinData builtinData)
            {
#if _ALPHATEST_ON
				DoAlphaTest ( surfaceDescription.Alpha, surfaceDescription.AlphaClipThreshold );
#endif
				BuildSurfaceData (fragInputs, surfaceDescription, V, posInput, surfaceData);
        
               // Builtin Data
                // For back lighting we use the oposite vertex normal 
				InitBuiltinData(surfaceDescription.Alpha, surfaceData.normalWS, -fragInputs.worldToTangent[2], posInput.positionWS, fragInputs.texCoord1, fragInputs.texCoord2, builtinData);
        
		        builtinData.emissiveColor =             surfaceDescription.Emission;
                builtinData.distortion =                float2(0.0, 0.0);           // surfaceDescription.Distortion -- if distortion pass
                builtinData.distortionBlur =            0.0;                        // surfaceDescription.DistortionBlur -- if distortion pass
                builtinData.depthOffset =               0.0;                        // ApplyPerPixelDisplacement(input, V, layerTexCoord, blendMasks); #ifdef _DEPTHOFFSET_ON : ApplyDepthOffsetPositionInput(V, depthOffset, GetWorldToHClipMatrix(), posInput);
        
                PostInitBuiltinData(V, posInput, surfaceData, builtinData);
            }
        
           
			CBUFFER_START ( UnityMetaPass )
				bool4 unity_MetaVertexControl;
				bool4 unity_MetaFragmentControl;
			CBUFFER_END


			float unity_OneOverOutputBoost;
			float unity_MaxOutputValue;

			PackedVaryingsMeshToPS Vert ( AttributesMesh inputMesh  )
			{
				PackedVaryingsMeshToPS outputPackedVaryingsMeshToPS;

				UNITY_SETUP_INSTANCE_ID ( inputMesh );
				UNITY_TRANSFER_INSTANCE_ID ( inputMesh, outputPackedVaryingsMeshToPS );
				TerrainInstancing(inputMesh.positionOS, inputMesh.normalOS, inputMesh.tangentOS);


				float3 ase_worldPos = GetAbsolutePositionWS( TransformObjectToWorld( (inputMesh.positionOS).xyz ) );
				outputPackedVaryingsMeshToPS.ase_texcoord1.xyz = ase_worldPos;
				float3 ase_worldNormal = TransformObjectToWorldNormal(inputMesh.normalOS);
				outputPackedVaryingsMeshToPS.ase_texcoord2.xyz = ase_worldNormal;
				
				outputPackedVaryingsMeshToPS.ase_texcoord.xy = inputMesh.uv0;
				
				//setting value to unused interpolator channels and avoid initialization warnings
				outputPackedVaryingsMeshToPS.ase_texcoord.zw = 0;
				outputPackedVaryingsMeshToPS.ase_texcoord1.w = 0;
				outputPackedVaryingsMeshToPS.ase_texcoord2.w = 0;
				float3 vertexValue =  float3( 0, 0, 0 ) ;
				#ifdef ASE_ABSOLUTE_VERTEX_POS
				inputMesh.positionOS.xyz = vertexValue;
				#else
				inputMesh.positionOS.xyz += vertexValue;
				#endif

				inputMesh.normalOS =  inputMesh.normalOS ;

				float2 uv;

				if ( unity_MetaVertexControl.x )
				{
					uv = inputMesh.uv1 * unity_LightmapST.xy + unity_LightmapST.zw;
				}
				else if ( unity_MetaVertexControl.y )
				{
					uv = inputMesh.uv2 * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
				}

				outputPackedVaryingsMeshToPS.positionCS = float4( uv * 2.0 - 1.0, inputMesh.positionOS.z > 0 ? 1.0e-4 : 0.0, 1.0 );

				return outputPackedVaryingsMeshToPS;
			}

			float4 Frag ( PackedVaryingsMeshToPS packedInput  ) : SV_Target
			{
				FragInputs input;
				ZERO_INITIALIZE ( FragInputs, input );
				input.worldToTangent = k_identity3x3;
				input.positionSS = packedInput.positionCS;

				PositionInputs posInput = GetPositionInput ( input.positionSS.xy, _ScreenSize.zw, input.positionSS.z, input.positionSS.w, input.positionRWS );

				float3 V = 0;

				SurfaceData surfaceData;
				BuiltinData builtinData;

				GlobalSurfaceDescription surfaceDescription = ( GlobalSurfaceDescription ) 0;
				float2 uv02588 = packedInput.ase_texcoord.xy * float2( 1,1 ) + float2( 0,0 );
				float4 tex2DNode7708 = tex2D( _Global_Color_Map, ( _Global_Color_Map_Offset + ( _Global_Color_Map_Scale * uv02588 ) ) );
				float clampResult7747 = clamp( ( tex2DNode7708.a + ( 1.0 - _Global_Color_Opacity_Power ) ) , 0.0 , 1.0 );
				float2 appendResult7710 = (float2(1.0 , ( _Global_Color_Map_Far_Power * clampResult7747 )));
				float3 ase_worldPos = packedInput.ase_texcoord1.xyz;
				float3 break7753 = ase_worldPos;
				float2 appendResult7739 = (float2(break7753.x , break7753.z));
				half2 Top_Bottom1999 = appendResult7739;
				float temp_output_5125_0 = ( 1.0 / _Texture_13_Tiling );
				float2 appendResult5027 = (float2(temp_output_5125_0 , temp_output_5125_0));
				float2 temp_output_5112_0 = ( ( Top_Bottom1999 * appendResult5027 ) / _Texture_13_Far_Multiplier );
				float4 texArray5971 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, temp_output_5112_0, _Texture_13_H_AO_Index );
				float ifLocalVar7681 = 0;
				UNITY_BRANCH 
				if( _Texture_13_H_AO_Index > -1.0 )
				ifLocalVar7681 = texArray5971.y;
				half Texture_13_H5992 = ifLocalVar7681;
				float temp_output_6168_0 = ( _Texture_13_Heightmap_Depth * pow( Texture_13_H5992 , _Texture_13_Height_Contrast ) );
				float4 tex2DNode4371 = tex2D( _Texture_Splat_4, uv02588 );
				half Splat4_R2543 = tex2DNode4371.r;
				float HeightMask6231 = saturate(pow(((temp_output_6168_0*Splat4_R2543)*4)+(Splat4_R2543*2),_Texture_13_Heightblend_Far));
				float temp_output_5006_0 = ( 1.0 / _Texture_14_Tiling );
				float2 appendResult5033 = (float2(temp_output_5006_0 , temp_output_5006_0));
				float2 temp_output_5172_0 = ( ( Top_Bottom1999 * appendResult5033 ) / _Texture_14_Far_Multiplier );
				float4 texArray6011 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, temp_output_5172_0, _Texture_14_H_AO_Index );
				float ifLocalVar7679 = 0;
				UNITY_BRANCH 
				if( _Texture_14_H_AO_Index > -1.0 )
				ifLocalVar7679 = texArray6011.y;
				half Texture_14_H6032 = ifLocalVar7679;
				float temp_output_6174_0 = ( _Texture_14_Heightmap_Depth * pow( Texture_14_H6032 , _Texture_14_Height_Contrast ) );
				half Splat4_G2544 = tex2DNode4371.g;
				float HeightMask6234 = saturate(pow(((temp_output_6174_0*Splat4_G2544)*4)+(Splat4_G2544*2),_Texture_14_Heightblend_Far));
				float temp_output_5210_0 = ( 1.0 / _Texture_15_Tiling );
				float2 appendResult5212 = (float2(temp_output_5210_0 , temp_output_5210_0));
				float2 temp_output_5190_0 = ( ( Top_Bottom1999 * appendResult5212 ) / _Texture_15_Far_Multiplier );
				float4 texArray6051 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, temp_output_5190_0, _Texture_15_H_AO_Index );
				float ifLocalVar7677 = 0;
				UNITY_BRANCH 
				if( _Texture_15_H_AO_Index > -1.0 )
				ifLocalVar7677 = texArray6051.y;
				half Texture_15_H6072 = ifLocalVar7677;
				float temp_output_6180_0 = ( _Texture_15_Heightmap_Depth * pow( Texture_15_H6072 , _Texture_15_Height_Contrast ) );
				half Splat4_B2545 = tex2DNode4371.b;
				float HeightMask6237 = saturate(pow(((temp_output_6180_0*Splat4_B2545)*4)+(Splat4_B2545*2),_Texture_15_Heightblend_Far));
				float temp_output_5075_0 = ( 1.0 / _Texture_16_Tiling );
				float2 appendResult5078 = (float2(temp_output_5075_0 , temp_output_5075_0));
				float2 temp_output_5153_0 = ( ( Top_Bottom1999 * appendResult5078 ) / _Texture_16_Far_Multiplier );
				float4 texArray6091 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, temp_output_5153_0, _Texture_16_H_AO_Index );
				float ifLocalVar7675 = 0;
				UNITY_BRANCH 
				if( _Texture_16_H_AO_Index > -1.0 )
				ifLocalVar7675 = texArray6091.y;
				half Texture_16_H6112 = ifLocalVar7675;
				float temp_output_6186_0 = ( _Texture_16_Heightmap_Depth * pow( Texture_16_H6112 , _Texture_16_Height_Contrast ) );
				half Splat4_A2546 = tex2DNode4371.a;
				float HeightMask6240 = saturate(pow(((temp_output_6186_0*Splat4_A2546)*4)+(Splat4_A2546*2),_Texture_16_Heightblend_Far));
				float4 appendResult6533 = (float4(HeightMask6231 , HeightMask6234 , HeightMask6237 , HeightMask6240));
				float temp_output_4703_0 = ( 1.0 / _Texture_9_Tiling );
				float2 appendResult4736 = (float2(temp_output_4703_0 , temp_output_4703_0));
				float2 temp_output_4721_0 = ( ( Top_Bottom1999 * appendResult4736 ) / _Texture_9_Far_Multiplier );
				float4 texArray5811 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, temp_output_4721_0, _Texture_9_H_AO_Index_AO_H_Index );
				float ifLocalVar7689 = 0;
				UNITY_BRANCH 
				if( _Texture_9_H_AO_Index_AO_H_Index > -1.0 )
				ifLocalVar7689 = texArray5811.y;
				half Texture_9_H5832 = ifLocalVar7689;
				float temp_output_6144_0 = ( _Texture_9_Heightmap_Depth * pow( Texture_9_H5832 , _Texture_9_Height_Contrast ) );
				float4 tex2DNode4370 = tex2D( _Texture_Splat_3, uv02588 );
				half Splat3_R2537 = tex2DNode4370.r;
				float HeightMask6219 = saturate(pow(((temp_output_6144_0*Splat3_R2537)*4)+(Splat3_R2537*2),_Texture_9_Heightblend_Far));
				float temp_output_4734_0 = ( 1.0 / _Texture_10_Tiling );
				float2 appendResult4738 = (float2(temp_output_4734_0 , temp_output_4734_0));
				float2 temp_output_4879_0 = ( ( Top_Bottom1999 * appendResult4738 ) / _Texture_10_Far_Multiplier );
				float4 texArray5851 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, temp_output_4879_0, _Texture_10_H_AO_Index );
				float ifLocalVar7687 = 0;
				UNITY_BRANCH 
				if( _Texture_10_H_AO_Index > -1.0 )
				ifLocalVar7687 = texArray5851.y;
				half Texture_10_H5872 = ifLocalVar7687;
				float temp_output_6150_0 = ( _Texture_10_Heightmap_Depth * pow( Texture_10_H5872 , _Texture_10_Height_Contrast ) );
				half Splat3_G2538 = tex2DNode4370.g;
				float HeightMask6222 = saturate(pow(((temp_output_6150_0*Splat3_G2538)*4)+(Splat3_G2538*2),_Texture_10_Heightblend_Far));
				float temp_output_4739_0 = ( 1.0 / _Texture_11_Tiling );
				float2 appendResult4741 = (float2(temp_output_4739_0 , temp_output_4739_0));
				float2 temp_output_4904_0 = ( ( Top_Bottom1999 * appendResult4741 ) / _Texture_11_Far_Multiplier );
				float4 texArray5891 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, temp_output_4904_0, _Texture_11_H_AO_Index );
				float ifLocalVar7685 = 0;
				UNITY_BRANCH 
				if( _Texture_11_H_AO_Index > -1.0 )
				ifLocalVar7685 = texArray5891.y;
				half Texture_11_H5912 = ifLocalVar7685;
				float temp_output_6156_0 = ( _Texture_11_Heightmap_Depth * pow( Texture_11_H5912 , _Texture_11_Height_Contrast ) );
				half Splat3_B2539 = tex2DNode4370.b;
				float HeightMask6225 = saturate(pow(((temp_output_6156_0*Splat3_B2539)*4)+(Splat3_B2539*2),_Texture_11_Heightblend_Far));
				float temp_output_4745_0 = ( 1.0 / _Texture_12_Tiling );
				float2 appendResult4751 = (float2(temp_output_4745_0 , temp_output_4745_0));
				float2 temp_output_4932_0 = ( ( Top_Bottom1999 * appendResult4751 ) / _Texture_12_Far_Multiplier );
				float4 texArray5931 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, temp_output_4932_0, _Texture_12_H_AO_Index );
				float ifLocalVar7683 = 0;
				UNITY_BRANCH 
				if( _Texture_12_H_AO_Index > -1.0 )
				ifLocalVar7683 = texArray5931.y;
				half Texture_12_H5952 = ifLocalVar7683;
				float temp_output_6162_0 = ( _Texture_12_Heightmap_Depth * pow( Texture_12_H5952 , _Texture_12_Height_Contrast ) );
				half Splat3_A2540 = tex2DNode4370.a;
				float HeightMask6228 = saturate(pow(((temp_output_6162_0*Splat3_A2540)*4)+(Splat3_A2540*2),_Texture_12_Heightblend_Far));
				float4 appendResult6529 = (float4(HeightMask6219 , HeightMask6222 , HeightMask6225 , HeightMask6228));
				float temp_output_4397_0 = ( 1.0 / _Texture_5_Tiling );
				float2 appendResult4399 = (float2(temp_output_4397_0 , temp_output_4397_0));
				float2 temp_output_4440_0 = ( ( Top_Bottom1999 * appendResult4399 ) / _Texture_5_Far_Multiplier );
				float4 texArray5655 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, temp_output_4440_0, _Texture_5_H_AO_Index );
				float ifLocalVar7668 = 0;
				UNITY_BRANCH 
				if( _Texture_5_H_AO_Index > -1.0 )
				ifLocalVar7668 = texArray5655.y;
				half Texture_5_H5671 = ifLocalVar7668;
				float temp_output_6120_0 = ( _Texture_5_Heightmap_Depth * pow( Texture_5_H5671 , _Texture_5_Height_Contrast ) );
				float4 tex2DNode4369 = tex2D( _Texture_Splat_2, uv02588 );
				half Splat2_R2106 = tex2DNode4369.r;
				float HeightMask6205 = saturate(pow(((temp_output_6120_0*Splat2_R2106)*4)+(Splat2_R2106*2),_Texture_5_Heightblend_Far));
				float temp_output_4469_0 = ( 1.0 / _Texture_6_Tiling );
				float2 appendResult4471 = (float2(temp_output_4469_0 , temp_output_4469_0));
				float2 temp_output_4507_0 = ( ( Top_Bottom1999 * appendResult4471 ) / _Texture_6_Far_Multiplier );
				float4 texArray5695 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, temp_output_4507_0, _Texture_6_H_AO_Index );
				float ifLocalVar7670 = 0;
				UNITY_BRANCH 
				if( _Texture_6_H_AO_Index > -1.0 )
				ifLocalVar7670 = texArray5695.y;
				half Texture_6_H5711 = ifLocalVar7670;
				float temp_output_6126_0 = ( _Texture_6_Heightmap_Depth * pow( Texture_6_H5711 , _Texture_6_Height_Contrast ) );
				half Splat2_G2107 = tex2DNode4369.g;
				float HeightMask6208 = saturate(pow(((temp_output_6126_0*Splat2_G2107)*4)+(Splat2_G2107*2),_Texture_6_Heightblend_Far));
				float temp_output_4543_0 = ( 1.0 / _Texture_7_Tiling );
				float2 appendResult4545 = (float2(temp_output_4543_0 , temp_output_4543_0));
				float2 temp_output_4581_0 = ( ( Top_Bottom1999 * appendResult4545 ) / _Texture_7_Far_Multiplier );
				float4 texArray5735 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, temp_output_4581_0, _Texture_7_H_AO_Index );
				float ifLocalVar7672 = 0;
				UNITY_BRANCH 
				if( _Texture_7_H_AO_Index > -1.0 )
				ifLocalVar7672 = texArray5735.y;
				half Texture_7_H5751 = ifLocalVar7672;
				float temp_output_6132_0 = ( _Texture_7_Heightmap_Depth * pow( Texture_7_H5751 , _Texture_7_Height_Contrast ) );
				half Splat2_B2108 = tex2DNode4369.b;
				float HeightMask6211 = saturate(pow(((temp_output_6132_0*Splat2_B2108)*4)+(Splat2_B2108*2),_Texture_7_Heightblend_Far));
				float temp_output_4617_0 = ( 1.0 / _Texture_8_Tiling );
				float2 appendResult4619 = (float2(temp_output_4617_0 , temp_output_4617_0));
				float2 temp_output_4655_0 = ( ( Top_Bottom1999 * appendResult4619 ) / _Texture_8_Far_Multiplier );
				float4 texArray5775 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, temp_output_4655_0, _Texture_8_H_AO_Index );
				float ifLocalVar7674 = 0;
				UNITY_BRANCH 
				if( _Texture_8_H_AO_Index > -1.0 )
				ifLocalVar7674 = texArray5775.y;
				half Texture_8_H5791 = ifLocalVar7674;
				float temp_output_6138_0 = ( _Texture_8_Heightmap_Depth * pow( Texture_8_H5791 , _Texture_8_Height_Contrast ) );
				half Splat2_A2109 = tex2DNode4369.a;
				float HeightMask6214 = saturate(pow(((temp_output_6138_0*Splat2_A2109)*4)+(Splat2_A2109*2),_Texture_8_Heightblend_Far));
				float4 appendResult6524 = (float4(HeightMask6205 , HeightMask6208 , HeightMask6211 , HeightMask6214));
				float temp_output_3830_0 = ( 1.0 / _Texture_1_Tiling );
				float2 appendResult3284 = (float2(temp_output_3830_0 , temp_output_3830_0));
				float2 temp_output_3298_0 = ( ( Top_Bottom1999 * appendResult3284 ) / _Texture_1_Far_Multiplier );
				float4 texArray7704 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, temp_output_3298_0, _Texture_1_H_AO_Index );
				float ifLocalVar7658 = 0;
				UNITY_BRANCH 
				if( _Texture_1_H_AO_Index > -1.0 )
				ifLocalVar7658 = texArray7704.g;
				half Texture_1_H5480 = ifLocalVar7658;
				float temp_output_5544_0 = ( pow( Texture_1_H5480 , _Texture_1_Height_Contrast ) * _Texture_1_Heightmap_Depth );
				float4 tex2DNode4368 = tex2D( _Texture_Splat_1, uv02588 );
				half Splat1_R1438 = tex2DNode4368.r;
				float HeightMask6196 = saturate(pow(((temp_output_5544_0*Splat1_R1438)*4)+(Splat1_R1438*2),_Texture_1_Heightblend_Far));
				float temp_output_3831_0 = ( 1.0 / _Texture_2_Tiling );
				float2 appendResult3349 = (float2(temp_output_3831_0 , temp_output_3831_0));
				float2 temp_output_3345_0 = ( ( Top_Bottom1999 * appendResult3349 ) / _Texture_2_Far_Multiplier );
				float4 texArray5533 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, temp_output_3345_0, _Texture_2_H_AO_Index );
				float ifLocalVar7662 = 0;
				UNITY_BRANCH 
				if( _Texture_2_H_AO_Index > -1.0 )
				ifLocalVar7662 = texArray5533.y;
				half Texture_2_H5497 = ifLocalVar7662;
				float temp_output_5545_0 = ( _Texture_2_Heightmap_Depth * pow( Texture_2_H5497 , _Texture_2_Height_Contrast ) );
				half Splat1_G1441 = tex2DNode4368.g;
				float HeightMask6515 = saturate(pow(((temp_output_5545_0*Splat1_G1441)*4)+(Splat1_G1441*2),_Texture_2_Heightblend_Far));
				float temp_output_3832_0 = ( 1.0 / _Texture_3_Tiling );
				float2 appendResult3415 = (float2(temp_output_3832_0 , temp_output_3832_0));
				float2 temp_output_3412_0 = ( ( Top_Bottom1999 * appendResult3415 ) / _Texture_3_Far_Multiplier );
				float4 texArray5586 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, temp_output_3412_0, _Texture_3_H_AO_Index );
				float ifLocalVar7664 = 0;
				UNITY_BRANCH 
				if( _Texture_3_H_AO_Index > -1.0 )
				ifLocalVar7664 = texArray5586.y;
				half Texture_3_H5581 = ifLocalVar7664;
				float temp_output_5590_0 = ( _Texture_3_Heightmap_Depth * pow( Texture_3_H5581 , _Texture_3_Height_Contrast ) );
				half Splat1_B1442 = tex2DNode4368.b;
				float HeightMask6516 = saturate(pow(((temp_output_5590_0*Splat1_B1442)*4)+(Splat1_B1442*2),_Texture_3_Heightblend_Far));
				float temp_output_3833_0 = ( 1.0 / _Texture_4_Tiling );
				float2 appendResult3482 = (float2(temp_output_3833_0 , temp_output_3833_0));
				float2 temp_output_3479_0 = ( ( Top_Bottom1999 * appendResult3482 ) / _Texture_4_Far_Multiplier );
				float4 texArray5615 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, temp_output_3479_0, _Texture_4_H_AO_Index );
				float ifLocalVar7666 = 0;
				UNITY_BRANCH 
				if( _Texture_4_H_AO_Index > -1.0 )
				ifLocalVar7666 = texArray5615.y;
				half Texture_4_H5631 = ifLocalVar7666;
				float temp_output_6118_0 = ( _Texture_4_Heightmap_Depth * pow( Texture_4_H5631 , _Texture_4_Height_Contrast ) );
				half Splat1_A1491 = tex2DNode4368.a;
				float HeightMask6203 = saturate(pow(((temp_output_6118_0*Splat1_A1491)*4)+(Splat1_A1491*2),_Texture_4_Heightblend_Far));
				float4 appendResult6517 = (float4(HeightMask6196 , HeightMask6515 , HeightMask6516 , HeightMask6203));
				float4 texArray3292 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, temp_output_3298_0, _Texture_1_Albedo_Index );
				float4 ifLocalVar7657 = 0;
				UNITY_BRANCH 
				if( _Texture_1_Albedo_Index > -1.0 )
				ifLocalVar7657 = ( texArray3292 * _Texture_1_Color );
				half4 Texture_1_Final950 = ifLocalVar7657;
				float4 texArray3339 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, temp_output_3345_0, _Texture_2_Albedo_Index );
				float4 ifLocalVar7661 = 0;
				UNITY_BRANCH 
				if( _Texture_2_Albedo_Index > -1.0 )
				ifLocalVar7661 = ( texArray3339 * _Texture_2_Color );
				half4 Texture_2_Final3385 = ifLocalVar7661;
				float4 texArray3406 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, temp_output_3412_0, _Texture_3_Albedo_Index );
				float4 ifLocalVar7663 = 0;
				UNITY_BRANCH 
				if( _Texture_3_Albedo_Index > -1.0 )
				ifLocalVar7663 = ( texArray3406 * _Texture_3_Color );
				half4 Texture_3_Final3451 = ifLocalVar7663;
				float4 texArray3473 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, temp_output_3479_0, _Texture_4_Albedo_Index );
				float4 ifLocalVar7665 = 0;
				UNITY_BRANCH 
				if( _Texture_4_Albedo_Index > -1.0 )
				ifLocalVar7665 = ( texArray3473 * _Texture_4_Color );
				half4 Texture_4_Final3518 = ifLocalVar7665;
				float4 layeredBlendVar6512 = appendResult6517;
				float4 layeredBlend6512 = ( lerp( lerp( lerp( lerp( float4( 0,0,0,0 ) , Texture_1_Final950 , layeredBlendVar6512.x ) , Texture_2_Final3385 , layeredBlendVar6512.y ) , Texture_3_Final3451 , layeredBlendVar6512.z ) , Texture_4_Final3518 , layeredBlendVar6512.w ) );
				float4 texArray4445 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, temp_output_4440_0, _Texture_5_Albedo_Index );
				float4 ifLocalVar7667 = 0;
				UNITY_BRANCH 
				if( _Texture_5_Albedo_Index > -1.0 )
				ifLocalVar7667 = ( texArray4445 * _Texture_5_Color );
				half4 Texture_5_Final4396 = ifLocalVar7667;
				float4 texArray4512 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, temp_output_4507_0, _Texture_6_Albedo_Index );
				float4 ifLocalVar7669 = 0;
				UNITY_BRANCH 
				if( _Texture_6_Albedo_Index > -1.0 )
				ifLocalVar7669 = ( texArray4512 * _Texture_6_Color );
				half4 Texture_6_Final4536 = ifLocalVar7669;
				float4 texArray4586 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, temp_output_4581_0, _Texture_7_Albedo_Index );
				float4 ifLocalVar7671 = 0;
				UNITY_BRANCH 
				if( _Texture_7_Albedo_Index > -1.0 )
				ifLocalVar7671 = ( texArray4586 * _Texture_7_Color );
				half4 Texture_7_Final4614 = ifLocalVar7671;
				float4 texArray4660 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, temp_output_4655_0, _Texture_8_Albedo_Index );
				float4 ifLocalVar7673 = 0;
				UNITY_BRANCH 
				if( _Texture_8_Albedo_Index > -1.0 )
				ifLocalVar7673 = ( texArray4660 * _Texture_8_Color );
				half4 Texture_8_Final4689 = ifLocalVar7673;
				float4 layeredBlendVar6520 = appendResult6524;
				float4 layeredBlend6520 = ( lerp( lerp( lerp( lerp( layeredBlend6512 , Texture_5_Final4396 , layeredBlendVar6520.x ) , Texture_6_Final4536 , layeredBlendVar6520.y ) , Texture_7_Final4614 , layeredBlendVar6520.z ) , Texture_8_Final4689 , layeredBlendVar6520.w ) );
				float4 texArray4889 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, temp_output_4721_0, _Texture_9_Albedo_Index );
				float4 ifLocalVar7690 = 0;
				UNITY_BRANCH 
				if( _Texture_9_Albedo_Index > -1.0 )
				ifLocalVar7690 = ( texArray4889 * _Texture_9_Color );
				half4 Texture_9_Final4987 = ifLocalVar7690;
				float4 texArray4913 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, temp_output_4879_0, _Texture_10_Albedo_Index );
				float4 ifLocalVar7688 = 0;
				UNITY_BRANCH 
				if( _Texture_10_Albedo_Index > -1.0 )
				ifLocalVar7688 = ( texArray4913 * _Texture_10_Color );
				half4 Texture_10_Final4994 = ifLocalVar7688;
				float4 texArray4923 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, temp_output_4904_0, _Texture_11_Albedo_Index );
				float4 ifLocalVar7686 = 0;
				UNITY_BRANCH 
				if( _Texture_11_Albedo_Index > -1.0 )
				ifLocalVar7686 = ( texArray4923 * _Texture_11_Color );
				half4 Texture_11_Final4996 = ifLocalVar7686;
				float4 texArray4952 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, temp_output_4932_0, _Texture_12_Albedo_Index );
				float4 ifLocalVar7684 = 0;
				UNITY_BRANCH 
				if( _Texture_12_Albedo_Index > -1.0 )
				ifLocalVar7684 = ( texArray4952 * _Texture_12_Color );
				half4 Texture_12_Final4997 = ifLocalVar7684;
				float4 layeredBlendVar6528 = appendResult6529;
				float4 layeredBlend6528 = ( lerp( lerp( lerp( lerp( layeredBlend6520 , Texture_9_Final4987 , layeredBlendVar6528.x ) , Texture_10_Final4994 , layeredBlendVar6528.y ) , Texture_11_Final4996 , layeredBlendVar6528.z ) , Texture_12_Final4997 , layeredBlendVar6528.w ) );
				float4 texArray5034 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, temp_output_5112_0, _Texture_13_Albedo_Index );
				float4 ifLocalVar7682 = 0;
				UNITY_BRANCH 
				if( _Texture_13_Albedo_Index > -1.0 )
				ifLocalVar7682 = ( texArray5034 * _Texture_13_Color );
				half4 Texture_13_Final5058 = ifLocalVar7682;
				float4 texArray5171 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, temp_output_5172_0, _Texture_14_Albedo_Index );
				float4 ifLocalVar7680 = 0;
				UNITY_BRANCH 
				if( _Texture_14_Albedo_Index > -1.0 )
				ifLocalVar7680 = ( texArray5171 * _Texture_14_Color );
				half4 Texture_14_Final5163 = ifLocalVar7680;
				float4 texArray5272 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, temp_output_5190_0, _Texture_15_Albedo_Index );
				float4 ifLocalVar7678 = 0;
				UNITY_BRANCH 
				if( _Texture_15_Albedo_Index > -1.0 )
				ifLocalVar7678 = ( texArray5272 * _Texture_15_Color );
				half4 Texture_15_Final5270 = ifLocalVar7678;
				float4 texArray5143 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, temp_output_5153_0, _Texture_16_Albedo_Index );
				float4 ifLocalVar7676 = 0;
				UNITY_BRANCH 
				if( _Texture_16_Albedo_Index > -1.0 )
				ifLocalVar7676 = ( texArray5143 * _Texture_16_Color );
				half4 Texture_16_Final5094 = ifLocalVar7676;
				float4 layeredBlendVar6532 = appendResult6533;
				float4 layeredBlend6532 = ( lerp( lerp( lerp( lerp( layeredBlend6528 , Texture_13_Final5058 , layeredBlendVar6532.x ) , Texture_14_Final5163 , layeredBlendVar6532.y ) , Texture_15_Final5270 , layeredBlendVar6532.z ) , Texture_16_Final5094 , layeredBlendVar6532.w ) );
				float4 break3856 = layeredBlend6532;
				float3 appendResult3857 = (float3(break3856.x , break3856.y , break3856.z));
				float3 appendResult7709 = (float3(tex2DNode7708.r , tex2DNode7708.g , tex2DNode7708.b));
				float2 weightedBlendVar7711 = appendResult7710;
				float3 weightedAvg7711 = ( ( weightedBlendVar7711.x*appendResult3857 + weightedBlendVar7711.y*appendResult7709 )/( weightedBlendVar7711.x + weightedBlendVar7711.y ) );
				float2 temp_cast_0 = (( ( ase_worldPos.y / _Geological_Tiling_Far ) + _Geological_Map_Offset_Far )).xx;
				float4 tex2DNode6969 = tex2D( _Texture_Geological_Map, temp_cast_0 );
				float3 appendResult6971 = (float3(tex2DNode6969.r , tex2DNode6969.g , tex2DNode6969.b));
				float3 blendOpSrc4362 = weightedAvg7711;
				float3 blendOpDest4362 = ( ( ( appendResult6971 + float3( -0.3,-0.3,-0.3 ) ) * _Geological_Map_Far_Power ) * ( ( _Texture_16_Geological_Power * Splat4_A2546 ) + ( ( _Texture_15_Geological_Power * Splat4_B2545 ) + ( ( _Texture_14_Geological_Power * Splat4_G2544 ) + ( ( _Texture_13_Geological_Power * Splat4_R2543 ) + ( ( _Texture_12_Geological_Power * Splat3_A2540 ) + ( ( _Texture_11_Geological_Power * Splat3_B2539 ) + ( ( _Texture_10_Geological_Power * Splat3_G2538 ) + ( ( _Texture_9_Geological_Power * Splat3_R2537 ) + ( ( _Texture_8_Geological_Power * Splat2_A2109 ) + ( ( _Texture_7_Geological_Power * Splat2_B2108 ) + ( ( _Texture_6_Geological_Power * Splat2_G2107 ) + ( ( _Texture_5_Geological_Power * Splat2_R2106 ) + ( ( _Texture_1_Geological_Power * Splat1_R1438 ) + ( ( _Texture_2_Geological_Power * Splat1_G1441 ) + ( ( _Texture_4_Geological_Power * Splat1_A1491 ) + ( _Texture_3_Geological_Power * Splat1_B1442 ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) );
				float4 break1409 = ( _Texture_Snow_Average * _Snow_Color );
				float3 appendResult1410 = (float3(break1409.x , break1409.y , break1409.z));
				float4 layeredBlendVar6518 = tex2DNode4368;
				float layeredBlend6518 = ( lerp( lerp( lerp( lerp( 0.0 , temp_output_5544_0 , layeredBlendVar6518.x ) , temp_output_5545_0 , layeredBlendVar6518.y ) , temp_output_5590_0 , layeredBlendVar6518.z ) , temp_output_6118_0 , layeredBlendVar6518.w ) );
				float4 layeredBlendVar6525 = tex2DNode4369;
				float layeredBlend6525 = ( lerp( lerp( lerp( lerp( layeredBlend6518 , temp_output_6120_0 , layeredBlendVar6525.x ) , temp_output_6126_0 , layeredBlendVar6525.y ) , temp_output_6132_0 , layeredBlendVar6525.z ) , temp_output_6138_0 , layeredBlendVar6525.w ) );
				float4 layeredBlendVar6527 = tex2DNode4370;
				float layeredBlend6527 = ( lerp( lerp( lerp( lerp( layeredBlend6525 , temp_output_6144_0 , layeredBlendVar6527.x ) , temp_output_6150_0 , layeredBlendVar6527.y ) , temp_output_6156_0 , layeredBlendVar6527.z ) , temp_output_6162_0 , layeredBlendVar6527.w ) );
				float4 layeredBlendVar6530 = tex2DNode4371;
				float layeredBlend6530 = ( lerp( lerp( lerp( lerp( layeredBlend6527 , temp_output_6168_0 , layeredBlendVar6530.x ) , temp_output_6174_0 , layeredBlendVar6530.y ) , temp_output_6180_0 , layeredBlendVar6530.z ) , temp_output_6186_0 , layeredBlendVar6530.w ) );
				float4 texArray6270 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, Top_Bottom1999, (float)_Texture_Snow_H_AO_Index );
				float temp_output_6545_0 = ( layeredBlend6530 + ( pow( texArray6270.y , _Snow_Height_Contrast ) * _Snow_Heightmap_Depth ) );
				float clampResult6546 = clamp( temp_output_6545_0 , 0.0 , temp_output_6545_0 );
				float clampResult7176 = clamp( clampResult6546 , 0.0 , 1.0 );
				float simplePerlin2D7750 = snoise( ( Top_Bottom1999 * _Snow_Noise_Tiling ) );
				float lerpResult7728 = lerp( 1.0 , simplePerlin2D7750 , ( _Snow_Noise_Power * 0.1 ));
				float temp_output_7621_0 = ( _Snow_Maximum_Angle_Hardness * 0.5 );
				float3 ase_worldNormal = packedInput.ase_texcoord2.xyz;
				float clampResult1354 = clamp( ase_worldNormal.y , 0.0 , 0.9999 );
				float temp_output_1349_0 = ( _Snow_Maximum_Angle / 90.0 );
				float clampResult1347 = clamp( ( clampResult1354 - ( 1.0 - temp_output_1349_0 ) ) , 0.0 , 2.0 );
				half SnowSlope1352 = ( clampResult1347 * ( 1.0 / temp_output_1349_0 ) );
				float clampResult6569 = clamp( ( 1.0 - ( temp_output_7621_0 * 0.1 ) ) , 0.01 , 1.0 );
				float clampResult4146 = clamp( pow( ( ( _Snow_Amount * ( 0.1 - ( temp_output_7621_0 * 0.01 ) ) ) * SnowSlope1352 ) , clampResult6569 ) , 0.0 , 1.0 );
				float temp_output_3751_0 = ( ( 1.0 - _Snow_Min_Height ) + ase_worldPos.y );
				float clampResult4220 = clamp( ( temp_output_3751_0 + 1.0 ) , 0.0 , 1.0 );
				float clampResult4260 = clamp( ( ( 1.0 - ( ( temp_output_3751_0 + _Snow_Min_Height_Blending ) / temp_output_3751_0 ) ) + -0.5 ) , 0.0 , 1.0 );
				float clampResult4263 = clamp( ( clampResult4220 + clampResult4260 ) , 0.0 , 1.0 );
				float lerpResult3759 = lerp( 0.0 , ( ( _Snow_Amount * lerpResult7728 ) * clampResult4146 ) , clampResult4263);
				float clampResult4298 = clamp( lerpResult3759 , 0.0 , 2.0 );
				float HeightMask6539 = saturate(pow(((( 1.0 - clampResult7176 )*( clampResult4298 * ( 1.0 - ( ( _Texture_16_Snow_Reduction * Splat4_A2546 ) + ( ( _Texture_15_Snow_Reduction * Splat4_B2545 ) + ( ( ( _Texture_13_Snow_Reduction * Splat4_R2543 ) + ( ( _Texture_12_Snow_Reduction * Splat3_A2540 ) + ( ( _Texture_11_Snow_Reduction * Splat3_B2539 ) + ( ( ( _Texture_9_Snow_Reduction * Splat3_R2537 ) + ( ( _Texture_8_Snow_Reduction * Splat2_A2109 ) + ( ( _Texture_7_Snow_Reduction * Splat2_B2108 ) + ( ( ( _Texture_5_Snow_Reduction * Splat2_R2106 ) + ( ( _Texture_1_Snow_Reduction * Splat1_R1438 ) + ( ( _Texture_2_Snow_Reduction * Splat1_G1441 ) + ( ( _Texture_3_Snow_Reduction * Splat1_B1442 ) + ( _Texture_4_Snow_Reduction * Splat1_A1491 ) ) ) ) ) + ( _Texture_6_Snow_Reduction * Splat2_G2107 ) ) ) ) ) + ( _Texture_10_Snow_Reduction * Splat3_G2538 ) ) ) ) ) + ( _Texture_14_Snow_Reduction * Splat4_G2544 ) ) ) ) ) ))*4)+(( clampResult4298 * ( 1.0 - ( ( _Texture_16_Snow_Reduction * Splat4_A2546 ) + ( ( _Texture_15_Snow_Reduction * Splat4_B2545 ) + ( ( ( _Texture_13_Snow_Reduction * Splat4_R2543 ) + ( ( _Texture_12_Snow_Reduction * Splat3_A2540 ) + ( ( _Texture_11_Snow_Reduction * Splat3_B2539 ) + ( ( ( _Texture_9_Snow_Reduction * Splat3_R2537 ) + ( ( _Texture_8_Snow_Reduction * Splat2_A2109 ) + ( ( _Texture_7_Snow_Reduction * Splat2_B2108 ) + ( ( ( _Texture_5_Snow_Reduction * Splat2_R2106 ) + ( ( _Texture_1_Snow_Reduction * Splat1_R1438 ) + ( ( _Texture_2_Snow_Reduction * Splat1_G1441 ) + ( ( _Texture_3_Snow_Reduction * Splat1_B1442 ) + ( _Texture_4_Snow_Reduction * Splat1_A1491 ) ) ) ) ) + ( _Texture_6_Snow_Reduction * Splat2_G2107 ) ) ) ) ) + ( _Texture_10_Snow_Reduction * Splat3_G2538 ) ) ) ) ) + ( _Texture_14_Snow_Reduction * Splat4_G2544 ) ) ) ) ) )*2),_Snow_Heightblend_Far));
				float3 lerpResult1356 = lerp( ( saturate( ( blendOpSrc4362 + blendOpDest4362 ) )) , appendResult1410 , HeightMask6539);
				
				float4 texArray4374 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Normal, sampler_Texture_Array_Normal, ( Top_Bottom1999 / _Perlin_Normal_Tiling_Far ), (float)_Texture_Perlin_Normal_Index );
				float2 appendResult11_g668 = (float2(texArray4374.w , texArray4374.y));
				float2 temp_output_4_0_g668 = ( ( ( appendResult11_g668 * float2( 2,2 ) ) + float2( -1,-1 ) ) * _Perlin_Normal_Power );
				float2 break8_g668 = temp_output_4_0_g668;
				float dotResult5_g668 = dot( temp_output_4_0_g668 , temp_output_4_0_g668 );
				float temp_output_9_0_g668 = sqrt( ( 1.0 - saturate( dotResult5_g668 ) ) );
				float3 appendResult20_g668 = (float3(break8_g668.x , break8_g668.y , temp_output_9_0_g668));
				float3 temp_output_7038_0 = appendResult20_g668;
				float clampResult3775 = clamp( ( ( _Texture_16_Perlin_Power * Splat4_A2546 ) + ( ( _Texture_15_Perlin_Power * Splat4_B2545 ) + ( ( _Texture_14_Perlin_Power * Splat4_G2544 ) + ( ( _Texture_13_Perlin_Power * Splat4_R2543 ) + ( ( _Texture_12_Perlin_Power * Splat3_A2540 ) + ( ( _Texture_11_Perlin_Power * Splat3_B2539 ) + ( ( _Texture_10_Perlin_Power * Splat3_G2538 ) + ( ( _Texture_9_Perlin_Power * Splat3_R2537 ) + ( ( _Texture_8_Perlin_Power * Splat2_A2109 ) + ( ( _Texture_7_Perlin_Power * Splat2_B2108 ) + ( ( _Texture_6_Perlin_Power * Splat2_G2107 ) + ( ( _Texture_5_Perlin_Power * Splat2_R2106 ) + ( ( _Texture_1_Perlin_Power * Splat1_R1438 ) + ( ( _Texture_2_Perlin_Power * Splat1_G1441 ) + ( ( _Texture_4_Perlin_Power * Splat1_A1491 ) + ( _Texture_3_Perlin_Power * Splat1_B1442 ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) , 0.0 , 1.0 );
				float3 lerpResult3776 = lerp( float3( 0,0,1 ) , temp_output_7038_0 , clampResult3775);
				float3 lerpResult3906 = lerp( float3( 0,0,1 ) , temp_output_7038_0 , ( _Snow_Perlin_Power * 0.5 ));
				float3 lerpResult6503 = lerp( lerpResult3776 , lerpResult3906 , HeightMask6539);
				float3 normalizeResult3901 = normalize( UnpackNormalmapRGorAG( tex2D( _Global_Normal_Map, uv02588 ), _Global_Normalmap_Power ) );
				float3 temp_output_4100_0 = BlendNormal( lerpResult6503 , normalizeResult3901 );
				
				float3 clampResult6245 = clamp( appendResult1410 , float3( 0,0,0 ) , float3( 0.5,0.5,0.5 ) );
				float3 lerpResult4040 = lerp( ( ( appendResult3857 * float3( 0.3,0.3,0.3 ) ) * _Terrain_Specular ) , ( clampResult6245 * _Snow_Specular ) , HeightMask6539);
				
				float lerpResult3951 = lerp( ( break3856.w * _Terrain_Smoothness ) , break1409.w , HeightMask6539);
				
				float clampResult7695 = clamp( ( ( 1.0 + temp_output_4100_0.y ) * 0.5 ) , ( 1.0 - _Ambient_Occlusion_Power ) , 1.0 );
				#ifdef _USE_AO_TEXTURE_ON
				float staticSwitch7703 = 1.0;
				#else
				float staticSwitch7703 = clampResult7695;
				#endif
				
				surfaceDescription.Albedo = lerpResult1356;
				surfaceDescription.Normal = temp_output_4100_0;
				surfaceDescription.Emission = 0;
				surfaceDescription.Specular = lerpResult4040;
				surfaceDescription.Metallic = 0;
				surfaceDescription.Smoothness = lerpResult3951;
				surfaceDescription.Occlusion = staticSwitch7703;
				surfaceDescription.Alpha = 1;
				surfaceDescription.AlphaClipThreshold = 0;

#ifdef _MATERIAL_FEATURE_CLEAR_COAT
				surfaceDescription.CoatMask = 0;
#endif

#if defined(_MATERIAL_FEATURE_SUBSURFACE_SCATTERING) || defined(_MATERIAL_FEATURE_TRANSMISSION)
				surfaceDescription.DiffusionProfile = asfloat (uint(1074012128);
#endif

#ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
				surfaceDescription.SubsurfaceMask = 1;
#endif

#ifdef _MATERIAL_FEATURE_TRANSMISSION
				surfaceDescription.Thickness = 0;
#endif

#ifdef _MATERIAL_FEATURE_ANISOTROPY
				surfaceDescription.Anisotropy = 0;
#endif

#ifdef _MATERIAL_FEATURE_IRIDESCENCE
				surfaceDescription.IridescenceThickness = 0;
				surfaceDescription.IridescenceMask = 1;
#endif

#ifdef _MATERIAL_FEATURE_TRANSPARENCY
				surfaceDescription.IndexOfRefraction = 1;
				surfaceDescription.TransmittanceColor = float3( 1, 1, 1 );
				surfaceDescription.TransmittanceAbsorptionDistance = 1000000;
				surfaceDescription.TransmittanceMask = 0;
#endif

				GetSurfaceAndBuiltinData ( surfaceDescription, input, V, posInput, surfaceData, builtinData );

				BSDFData bsdfData = ConvertSurfaceDataToBSDFData ( input.positionSS.xy, surfaceData );

				LightTransportData lightTransportData = GetLightTransportData ( surfaceData, builtinData, bsdfData );

				float4 res = float4( 0.0, 0.0, 0.0, 1.0 );
				if ( unity_MetaFragmentControl.x )
				{
					res.rgb = clamp ( pow ( abs ( lightTransportData.diffuseColor ), saturate ( unity_OneOverOutputBoost ) ), 0, unity_MaxOutputValue );
				}

				if ( unity_MetaFragmentControl.y )
				{
					res.rgb = lightTransportData.emissiveColor;
				}

				return res;
			}
       
            ENDHLSL
        }

		
		  Pass
		{
			Name "ShadowCaster"
			Tags{ "LightMode" = "ShadowCaster" }

			Cull[_CullMode]

			ZClip[_ZClip]
			ZWrite On
			ZTest LEqual

			ColorMask 0

			HLSLPROGRAM

				#pragma target 4.5
				#pragma only_renderers d3d11 ps4 xboxone vulkan metal switch

				#pragma shader_feature _TERRAIN_8_LAYERS
				#pragma shader_feature _TERRAIN_BLEND_HEIGHT
				#pragma shader_feature _NORMALMAP
				#pragma shader_feature _MASKMAP

				#pragma shader_feature _TERRAIN_INSTANCED_PERPIXEL_NORMAL
				#pragma shader_feature _DISABLE_DECALS

				#define SURFACE_GRADIENT
				#define HAVE_MESH_MODIFICATION

				#pragma multi_compile_instancing
				#pragma instancing_options assumeuniformscaling nomatrices nolightprobe nolightmap

				#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
				#include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"

				#define SHADERPASS SHADERPASS_SHADOWS
				#define USE_LEGACY_UNITY_MATRIX_VARIABLES
				#include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/FragInputs.hlsl"
				#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
				#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Material.hlsl"
				#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/Lit.hlsl"
				#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/ShaderPass/LitDepthPass.hlsl"
				#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/TerrainLit/TerrainLitData.hlsl"
				 #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/TerrainLit/TerrainLit_Basemap.hlsl"
				#include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPassDepthOnly.hlsl"


				#pragma vertex Vert
				#pragma fragment Frag

			ENDHLSL
		}
		
        Pass
        {
			
            Name "DepthOnly"
            Tags { "LightMode"="DepthOnly" }
			Stencil
			{
				Ref 0
				WriteMask 48
				Comp Always
				Pass Replace
				Fail Keep
				ZFail Keep
			}

            
            HLSLPROGRAM
				//#define UNITY_MATERIAL_LIT
				#pragma vertex Vert
				#pragma fragment Frag
        
				#define ASE_SRP_VERSION 50702
				#define _MATERIAL_FEATURE_SPECULAR_COLOR 1
				#pragma instancing_options assumeuniformscaling nomatrices nolightprobe nolightmap
				#include "TerrainVertexCTSHD.hlsl"


        
				#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"        
				#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/NormalSurfaceGradient.hlsl"
        
				#include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/FragInputs.hlsl"
				#include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"
        
				#define SHADERPASS SHADERPASS_DEPTH_ONLY
				#pragma multi_compile _ WRITE_NORMAL_BUFFER
				#pragma multi_compile _ WRITE_MSAA_DEPTH

				#define ATTRIBUTES_NEED_NORMAL
				#define ATTRIBUTES_NEED_TANGENT
				#define ATTRIBUTES_NEED_TEXCOORD0
				#define ATTRIBUTES_NEED_TEXCOORD1
				#define ATTRIBUTES_NEED_TEXCOORD2
				#define ATTRIBUTES_NEED_TEXCOORD3
				#define ATTRIBUTES_NEED_COLOR
				#define VARYINGS_NEED_POSITION_WS
				#define VARYINGS_NEED_TANGENT_TO_WORLD
				#define VARYINGS_NEED_TEXCOORD0
				#define VARYINGS_NEED_TEXCOORD1
				#define VARYINGS_NEED_TEXCOORD2
				#define VARYINGS_NEED_TEXCOORD3
				#define VARYINGS_NEED_COLOR
        
				#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
				#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Material.hlsl"
				#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/Lit.hlsl"
				#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/BuiltinUtilities.hlsl"
				#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/MaterialUtilities.hlsl"
				#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Decal/DecalUtilities.hlsl"
				#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/LitDecalData.hlsl"
				#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphFunctions.hlsl"
				
				struct AttributesMesh 
				{
					float3 positionOS : POSITION;
					float3 normalOS : NORMAL;
					
					#if UNITY_ANY_INSTANCING_ENABLED
					uint instanceID : INSTANCEID_SEMANTIC;
					#endif
				};

				struct PackedVaryingsMeshToPS 
				{
					float4 positionCS : SV_Position;
					
					#if UNITY_ANY_INSTANCING_ENABLED
					uint instanceID : INSTANCEID_SEMANTIC;
					#endif
				};

								
				        
				void BuildSurfaceData(FragInputs fragInputs, AlphaSurfaceDescription surfaceDescription, float3 V, PositionInputs posInput, out SurfaceData surfaceData)
				{
					ZERO_INITIALIZE(SurfaceData, surfaceData);
					surfaceData.ambientOcclusion =      1.0f;
					surfaceData.subsurfaceMask =        1.0f;

					surfaceData.materialFeatures = MATERIALFEATUREFLAGS_LIT_STANDARD;
			#ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
					surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SUBSURFACE_SCATTERING;
			#endif
			#ifdef _MATERIAL_FEATURE_TRANSMISSION
					surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
			#endif
			#ifdef _MATERIAL_FEATURE_ANISOTROPY
					surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_ANISOTROPY;
			#endif
			#ifdef _MATERIAL_FEATURE_CLEAR_COAT
					surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_CLEAR_COAT;
			#endif
			#ifdef _MATERIAL_FEATURE_IRIDESCENCE
					surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_IRIDESCENCE;
			#endif
			#ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
					surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SPECULAR_COLOR;
			#endif
					float3 normalTS =                   float3(0.0f, 0.0f, 1.0f);
					float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
					GetNormalWS(fragInputs, normalTS, surfaceData.normalWS,doubleSidedConstants);
					surfaceData.tangentWS = normalize(fragInputs.worldToTangent[0].xyz);    // The tangent is not normalize in worldToTangent for mikkt. TODO: Check if it expected that we normalize with Morten. Tag: SURFACE_GRADIENT
					surfaceData.tangentWS = Orthonormalize(surfaceData.tangentWS, surfaceData.normalWS);
					surfaceData.anisotropy = 0;
					surfaceData.coatMask = 0.0f;
					surfaceData.iridescenceThickness = 0.0;
					surfaceData.iridescenceMask = 1.0;
					surfaceData.ior = 1.0;
					surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
					surfaceData.atDistance = 1000000.0;
					surfaceData.transmittanceMask = 0.0;
					surfaceData.specularOcclusion = 1.0;
			#if defined(_BENTNORMALMAP) && defined(_ENABLESPECULAROCCLUSION)
					surfaceData.specularOcclusion = GetSpecularOcclusionFromBentAO(V, bentNormalWS, surfaceData);
			#elif defined(_MASKMAP)
					surfaceData.specularOcclusion = GetSpecularOcclusionFromAmbientOcclusion(NdotV, surfaceData.ambientOcclusion, PerceptualSmoothnessToRoughness(surfaceData.perceptualSmoothness));
			#endif
				#if HAVE_DECALS
					if (_EnableDecals)
					{
						DecalSurfaceData decalSurfaceData = GetDecalSurfaceData (posInput, surfaceDescription.Alpha);
						ApplyDecalToSurfaceData (decalSurfaceData, surfaceData);
					}
				#endif
				}
        
				void GetSurfaceAndBuiltinData(AlphaSurfaceDescription surfaceDescription,FragInputs fragInputs, float3 V, inout PositionInputs posInput, out SurfaceData surfaceData, out BuiltinData builtinData)
				{
					#if _ALPHATEST_ON
						DoAlphaTest ( surfaceDescription.Alpha, surfaceDescription.AlphaClipThreshold );
					#endif
					BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData);
					InitBuiltinData(surfaceDescription.Alpha, surfaceData.normalWS, -fragInputs.worldToTangent[2], posInput.positionWS, fragInputs.texCoord1, fragInputs.texCoord2, builtinData);

					builtinData.distortion =                float2(0.0, 0.0);           // surfaceDescription.Distortion -- if distortion pass
					builtinData.distortionBlur =            0.0;                        // surfaceDescription.DistortionBlur -- if distortion pass
					builtinData.depthOffset =               0.0;                        // ApplyPerPixelDisplacement(input, V, layerTexCoord, blendMasks); #ifdef _DEPTHOFFSET_ON : ApplyDepthOffsetPositionInput(V, depthOffset, GetWorldToHClipMatrix(), posInput);
					PostInitBuiltinData(V, posInput, surfaceData, builtinData);
				}

				PackedVaryingsMeshToPS Vert(AttributesMesh inputMesh  )
				{
					PackedVaryingsMeshToPS outputPackedVaryingsMeshToPS;
					UNITY_SETUP_INSTANCE_ID(inputMesh);
					UNITY_TRANSFER_INSTANCE_ID(inputMesh, outputPackedVaryingsMeshToPS);
					TerrainInstancing(inputMesh.positionOS, inputMesh.normalOS);
					
					float3 vertexValue =  float3( 0, 0, 0 ) ;
					#ifdef ASE_ABSOLUTE_VERTEX_POS
					inputMesh.positionOS.xyz = vertexValue;
					#else
					inputMesh.positionOS.xyz += vertexValue;
					#endif

					inputMesh.normalOS =  inputMesh.normalOS ;

					float3 positionRWS = TransformObjectToWorld(inputMesh.positionOS);
					outputPackedVaryingsMeshToPS.positionCS = TransformWorldToHClip(positionRWS);
					return outputPackedVaryingsMeshToPS;
				}

				void Frag(  PackedVaryingsMeshToPS packedInput
							#ifdef WRITE_NORMAL_BUFFER
							, out float4 outNormalBuffer : SV_Target0
								#ifdef WRITE_MSAA_DEPTH
								, out float1 depthColor : SV_Target1
								#endif
							#elif defined(WRITE_MSAA_DEPTH) // When only WRITE_MSAA_DEPTH is define and not WRITE_NORMAL_BUFFER it mean we are Unlit and only need depth, but we still have normal buffer binded
							, out float4 outNormalBuffer : SV_Target0
							, out float1 depthColor : SV_Target1
							#else
							, out float4 outColor : SV_Target0
							#endif

							#ifdef _DEPTHOFFSET_ON
							, out float outputDepth : SV_Depth
							#endif
							
						)
				{
							
					FragInputs input;
					ZERO_INITIALIZE(FragInputs, input);
					input.worldToTangent = k_identity3x3;
					input.positionSS = packedInput.positionCS;
				
					PositionInputs posInput = GetPositionInput(input.positionSS.xy, _ScreenSize.zw, input.positionSS.z, input.positionSS.w, input.positionRWS);

					float3 V = float3(1.0, 1.0, 1.0);

					SurfaceData surfaceData;
					BuiltinData builtinData;
					AlphaSurfaceDescription surfaceDescription = ( AlphaSurfaceDescription ) 0;
					
					surfaceDescription.Alpha = 1;
					surfaceDescription.AlphaClipThreshold = 0;

					GetSurfaceAndBuiltinData(surfaceDescription, input, V, posInput, surfaceData, builtinData);

				#ifdef _DEPTHOFFSET_ON
					outputDepth = posInput.deviceDepth;
				#endif

				#ifdef WRITE_NORMAL_BUFFER
					EncodeIntoNormalBuffer(ConvertSurfaceDataToNormalData(surfaceData), posInput.positionSS, outNormalBuffer);
					#ifdef WRITE_MSAA_DEPTH
					depthColor = packedInput.positionCS.z;
					#endif
				#elif defined(WRITE_MSAA_DEPTH)
					outNormalBuffer = float4(0.0, 0.0, 0.0, 1.0);
					depthColor = packedInput.vmesh.positionCS.z;
				#elif defined(SCENESELECTIONPASS)
					outColor = float4(_ObjectId, _PassValue, 1.0, 1.0);
				#else
					outColor = float4(0.0, 0.0, 0.0, 0.0);
				#endif
				}
        
            ENDHLSL
        }

		
        Pass
        {
            
            
			Name "Forward"
			Tags { "LightMode"="Forward" }
			Stencil
			{
				Ref 2
				WriteMask 7
				Comp Always
				Pass Replace
				Fail Keep
				ZFail Keep
			}


            HLSLPROGRAM
                //#define UNITY_MATERIAL_LIT
				#pragma vertex Vert
				#pragma fragment Frag
        
				#define ASE_SRP_VERSION 50702
				#define _MATERIAL_FEATURE_SPECULAR_COLOR 1
				#define _NORMALMAP 1
				#pragma multi_compile __ _USE_AO_TEXTURE_ON
				#pragma instancing_options assumeuniformscaling nomatrices nolightprobe nolightmap
				#include "TerrainVertexCTSHD.hlsl"

        
				#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
				#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/NormalSurfaceGradient.hlsl"
        
				#include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/FragInputs.hlsl"
				#include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"
        
                #define SHADERPASS SHADERPASS_FORWARD
                #pragma multi_compile _ LIGHTMAP_ON
                #pragma multi_compile _ DIRLIGHTMAP_COMBINED
                #pragma multi_compile _ DYNAMICLIGHTMAP_ON
                #pragma multi_compile _ SHADOWS_SHADOWMASK
				#pragma multi_compile DECALS_OFF DECALS_3RT DECALS_4RT
                #pragma multi_compile USE_FPTL_LIGHTLIST USE_CLUSTERED_LIGHTLIST
				#pragma multi_compile SHADOW_LOW SHADOW_MEDIUM SHADOW_HIGH
				
				#define SHADERPASS_FORWARD_BYPASS_ALPHA_TEST

                #define ATTRIBUTES_NEED_NORMAL
                #define ATTRIBUTES_NEED_TANGENT
                #define ATTRIBUTES_NEED_TEXCOORD1
                #define ATTRIBUTES_NEED_TEXCOORD2
                #define VARYINGS_NEED_POSITION_WS
                #define VARYINGS_NEED_TANGENT_TO_WORLD
                #define VARYINGS_NEED_TEXCOORD1
                #define VARYINGS_NEED_TEXCOORD2
        
        
				#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
        
				#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Material.hlsl"
        
				#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Lighting/Lighting.hlsl"
        
				#define HAS_LIGHTLOOP
        
				#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Lighting/LightLoop/LightLoopDef.hlsl"
				#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/Lit.hlsl"
				#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Lighting/LightLoop/LightLoop.hlsl"
        
        
				#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/BuiltinUtilities.hlsl"
				#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/MaterialUtilities.hlsl"
				#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Decal/DecalUtilities.hlsl"
				#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/LitDecalData.hlsl"
				#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphFunctions.hlsl"
				
				struct AttributesMesh 
				{
					float3 positionOS : POSITION;
					float3 normalOS : NORMAL;
					float4 tangentOS : TANGENT;
					float4 uv1 : TEXCOORD1;
					float4 uv2 : TEXCOORD2;
					float4 ase_texcoord : TEXCOORD0;
					#if UNITY_ANY_INSTANCING_ENABLED
					uint instanceID : INSTANCEID_SEMANTIC;
					#endif
				};
        
				struct PackedVaryingsMeshToPS 
				{
					float4 positionCS : SV_Position;
					float3 interp00 : TEXCOORD0;
					float3 interp01 : TEXCOORD1;
					float4 interp02 : TEXCOORD2;
					float4 interp03 : TEXCOORD3;
					float4 interp04 : TEXCOORD4;
					float4 ase_texcoord5 : TEXCOORD5;
					#if UNITY_ANY_INSTANCING_ENABLED
					uint instanceID : INSTANCEID_SEMANTIC;
					#endif
				};

				half _Global_Color_Map_Far_Power;
				sampler2D _Global_Color_Map;
				float2 _Global_Color_Map_Offset;
				float _Global_Color_Map_Scale;
				half _Global_Color_Opacity_Power;
				half _Texture_13_Heightmap_Depth;
				half _Texture_13_H_AO_Index;
				TEXTURE2D_ARRAY( _Texture_Array_Albedo );
				uniform SAMPLER( sampler_Texture_Array_Albedo );
				half _Texture_13_Tiling;
				half _Texture_13_Far_Multiplier;
				half _Texture_13_Height_Contrast;
				sampler2D _Texture_Splat_4;
				half _Texture_13_Heightblend_Far;
				half _Texture_14_Heightmap_Depth;
				half _Texture_14_H_AO_Index;
				half _Texture_14_Tiling;
				half _Texture_14_Far_Multiplier;
				half _Texture_14_Height_Contrast;
				half _Texture_14_Heightblend_Far;
				half _Texture_15_Heightmap_Depth;
				half _Texture_15_H_AO_Index;
				half _Texture_15_Tiling;
				half _Texture_15_Far_Multiplier;
				half _Texture_15_Height_Contrast;
				half _Texture_15_Heightblend_Far;
				half _Texture_16_Heightmap_Depth;
				half _Texture_16_H_AO_Index;
				half _Texture_16_Tiling;
				half _Texture_16_Far_Multiplier;
				half _Texture_16_Height_Contrast;
				half _Texture_16_Heightblend_Far;
				half _Texture_9_Heightmap_Depth;
				half _Texture_9_H_AO_Index_AO_H_Index;
				half _Texture_9_Tiling;
				half _Texture_9_Far_Multiplier;
				half _Texture_9_Height_Contrast;
				sampler2D _Texture_Splat_3;
				half _Texture_9_Heightblend_Far;
				half _Texture_10_Heightmap_Depth;
				half _Texture_10_H_AO_Index;
				half _Texture_10_Tiling;
				half _Texture_10_Far_Multiplier;
				half _Texture_10_Height_Contrast;
				half _Texture_10_Heightblend_Far;
				half _Texture_11_Heightmap_Depth;
				half _Texture_11_H_AO_Index;
				half _Texture_11_Tiling;
				half _Texture_11_Far_Multiplier;
				half _Texture_11_Height_Contrast;
				half _Texture_11_Heightblend_Far;
				half _Texture_12_Heightmap_Depth;
				half _Texture_12_H_AO_Index;
				half _Texture_12_Tiling;
				half _Texture_12_Far_Multiplier;
				half _Texture_12_Height_Contrast;
				half _Texture_12_Heightblend_Far;
				half _Texture_5_Heightmap_Depth;
				half _Texture_5_H_AO_Index;
				half _Texture_5_Tiling;
				half _Texture_5_Far_Multiplier;
				half _Texture_5_Height_Contrast;
				sampler2D _Texture_Splat_2;
				half _Texture_5_Heightblend_Far;
				half _Texture_6_Heightmap_Depth;
				half _Texture_6_H_AO_Index;
				half _Texture_6_Tiling;
				half _Texture_6_Far_Multiplier;
				half _Texture_6_Height_Contrast;
				half _Texture_6_Heightblend_Far;
				half _Texture_7_Heightmap_Depth;
				half _Texture_7_H_AO_Index;
				half _Texture_7_Tiling;
				half _Texture_7_Far_Multiplier;
				half _Texture_7_Height_Contrast;
				half _Texture_7_Heightblend_Far;
				half _Texture_8_Heightmap_Depth;
				half _Texture_8_H_AO_Index;
				half _Texture_8_Tiling;
				half _Texture_8_Far_Multiplier;
				half _Texture_8_Height_Contrast;
				half _Texture_8_Heightblend_Far;
				half _Texture_1_H_AO_Index;
				half _Texture_1_Tiling;
				half _Texture_1_Far_Multiplier;
				half _Texture_1_Height_Contrast;
				half _Texture_1_Heightmap_Depth;
				sampler2D _Texture_Splat_1;
				half _Texture_1_Heightblend_Far;
				half _Texture_2_Heightmap_Depth;
				half _Texture_2_H_AO_Index;
				half _Texture_2_Tiling;
				half _Texture_2_Far_Multiplier;
				half _Texture_2_Height_Contrast;
				half _Texture_2_Heightblend_Far;
				half _Texture_3_Heightmap_Depth;
				half _Texture_3_H_AO_Index;
				half _Texture_3_Tiling;
				half _Texture_3_Far_Multiplier;
				half _Texture_3_Height_Contrast;
				half _Texture_3_Heightblend_Far;
				half _Texture_4_Heightmap_Depth;
				half _Texture_4_H_AO_Index;
				half _Texture_4_Tiling;
				half _Texture_4_Far_Multiplier;
				half _Texture_4_Height_Contrast;
				half _Texture_4_Heightblend_Far;
				half _Texture_1_Albedo_Index;
				half4 _Texture_1_Color;
				half _Texture_2_Albedo_Index;
				half4 _Texture_2_Color;
				half _Texture_3_Albedo_Index;
				half4 _Texture_3_Color;
				half _Texture_4_Albedo_Index;
				half4 _Texture_4_Color;
				half _Texture_5_Albedo_Index;
				half4 _Texture_5_Color;
				half _Texture_6_Albedo_Index;
				half4 _Texture_6_Color;
				half _Texture_7_Albedo_Index;
				half4 _Texture_7_Color;
				half _Texture_8_Albedo_Index;
				half4 _Texture_8_Color;
				half _Texture_9_Albedo_Index;
				half4 _Texture_9_Color;
				half _Texture_10_Albedo_Index;
				half4 _Texture_10_Color;
				half _Texture_11_Albedo_Index;
				half4 _Texture_11_Color;
				half _Texture_12_Albedo_Index;
				half4 _Texture_12_Color;
				half _Texture_13_Albedo_Index;
				half4 _Texture_13_Color;
				half _Texture_14_Albedo_Index;
				half4 _Texture_14_Color;
				half _Texture_15_Albedo_Index;
				half4 _Texture_15_Color;
				half _Texture_16_Albedo_Index;
				half4 _Texture_16_Color;
				sampler2D _Texture_Geological_Map;
				half _Geological_Tiling_Far;
				half _Geological_Map_Offset_Far;
				half _Geological_Map_Far_Power;
				half _Texture_16_Geological_Power;
				half _Texture_15_Geological_Power;
				half _Texture_14_Geological_Power;
				half _Texture_13_Geological_Power;
				half _Texture_12_Geological_Power;
				half _Texture_11_Geological_Power;
				half _Texture_10_Geological_Power;
				half _Texture_9_Geological_Power;
				half _Texture_8_Geological_Power;
				half _Texture_7_Geological_Power;
				half _Texture_6_Geological_Power;
				half _Texture_5_Geological_Power;
				half _Texture_1_Geological_Power;
				half _Texture_2_Geological_Power;
				half _Texture_4_Geological_Power;
				half _Texture_3_Geological_Power;
				half4 _Texture_Snow_Average;
				half4 _Snow_Color;
				int _Texture_Snow_H_AO_Index;
				half _Snow_Height_Contrast;
				half _Snow_Heightmap_Depth;
				half _Snow_Amount;
				half _Snow_Noise_Tiling;
				half _Snow_Noise_Power;
				half _Snow_Maximum_Angle_Hardness;
				half _Snow_Maximum_Angle;
				half _Snow_Min_Height;
				half _Snow_Min_Height_Blending;
				half _Texture_16_Snow_Reduction;
				half _Texture_15_Snow_Reduction;
				half _Texture_13_Snow_Reduction;
				half _Texture_12_Snow_Reduction;
				half _Texture_11_Snow_Reduction;
				half _Texture_9_Snow_Reduction;
				half _Texture_8_Snow_Reduction;
				half _Texture_7_Snow_Reduction;
				half _Texture_5_Snow_Reduction;
				half _Texture_1_Snow_Reduction;
				half _Texture_2_Snow_Reduction;
				half _Texture_3_Snow_Reduction;
				half _Texture_4_Snow_Reduction;
				half _Texture_6_Snow_Reduction;
				half _Texture_10_Snow_Reduction;
				half _Texture_14_Snow_Reduction;
				half _Snow_Heightblend_Far;
				TEXTURE2D_ARRAY( _Texture_Array_Normal );
				uniform SAMPLER( sampler_Texture_Array_Normal );
				half _Perlin_Normal_Tiling_Far;
				int _Texture_Perlin_Normal_Index;
				half _Perlin_Normal_Power;
				half _Texture_16_Perlin_Power;
				half _Texture_15_Perlin_Power;
				half _Texture_14_Perlin_Power;
				half _Texture_13_Perlin_Power;
				half _Texture_12_Perlin_Power;
				half _Texture_11_Perlin_Power;
				half _Texture_10_Perlin_Power;
				half _Texture_9_Perlin_Power;
				half _Texture_8_Perlin_Power;
				half _Texture_7_Perlin_Power;
				half _Texture_6_Perlin_Power;
				half _Texture_5_Perlin_Power;
				half _Texture_1_Perlin_Power;
				half _Texture_2_Perlin_Power;
				half _Texture_4_Perlin_Power;
				half _Texture_3_Perlin_Power;
				half _Snow_Perlin_Power;
				half _Global_Normalmap_Power;
				sampler2D _Global_Normal_Map;
				half _Terrain_Specular;
				half _Snow_Specular;
				half _Terrain_Smoothness;
				half _Ambient_Occlusion_Power;
				
				float3 mod2D289( float3 x ) { return x - floor( x * ( 1.0 / 289.0 ) ) * 289.0; }
				float2 mod2D289( float2 x ) { return x - floor( x * ( 1.0 / 289.0 ) ) * 289.0; }
				float3 permute( float3 x ) { return mod2D289( ( ( x * 34.0 ) + 1.0 ) * x ); }
				float snoise( float2 v )
				{
					const float4 C = float4( 0.211324865405187, 0.366025403784439, -0.577350269189626, 0.024390243902439 );
					float2 i = floor( v + dot( v, C.yy ) );
					float2 x0 = v - i + dot( i, C.xx );
					float2 i1;
					i1 = ( x0.x > x0.y ) ? float2( 1.0, 0.0 ) : float2( 0.0, 1.0 );
					float4 x12 = x0.xyxy + C.xxzz;
					x12.xy -= i1;
					i = mod2D289( i );
					float3 p = permute( permute( i.y + float3( 0.0, i1.y, 1.0 ) ) + i.x + float3( 0.0, i1.x, 1.0 ) );
					float3 m = max( 0.5 - float3( dot( x0, x0 ), dot( x12.xy, x12.xy ), dot( x12.zw, x12.zw ) ), 0.0 );
					m = m * m;
					m = m * m;
					float3 x = 2.0 * frac( p * C.www ) - 1.0;
					float3 h = abs( x ) - 0.5;
					float3 ox = floor( x + 0.5 );
					float3 a0 = x - ox;
					m *= 1.79284291400159 - 0.85373472095314 * ( a0 * a0 + h * h );
					float3 g;
					g.x = a0.x * x0.x + h.x * x0.y;
					g.yz = a0.yz * x12.xz + h.yz * x12.yw;
					return 130.0 * dot( m, g );
				}
				
                
        
				void BuildSurfaceData ( FragInputs fragInputs, GlobalSurfaceDescription surfaceDescription, float3 V, PositionInputs posInput, out SurfaceData surfaceData )
			{
				ZERO_INITIALIZE ( SurfaceData, surfaceData );

				float3 normalTS = float3( 0.0f, 0.0f, 1.0f );
				normalTS = surfaceDescription.Normal;
				float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
				GetNormalWS ( fragInputs, normalTS, surfaceData.normalWS ,doubleSidedConstants);

				surfaceData.ambientOcclusion = 1.0f;

				surfaceData.baseColor = surfaceDescription.Albedo;
				surfaceData.perceptualSmoothness = surfaceDescription.Smoothness;
				surfaceData.ambientOcclusion = surfaceDescription.Occlusion;

				surfaceData.materialFeatures = MATERIALFEATUREFLAGS_LIT_STANDARD;

#ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
				surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SPECULAR_COLOR;
				surfaceData.specularColor = surfaceDescription.Specular;
#else
				surfaceData.metallic = surfaceDescription.Metallic;
#endif

#if defined(_MATERIAL_FEATURE_SUBSURFACE_SCATTERING) || defined(_MATERIAL_FEATURE_TRANSMISSION)
				surfaceData.diffusionProfileHash = asuint (surfaceDescription.DiffusionProfile);
#endif

#ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
				surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SUBSURFACE_SCATTERING;
				surfaceData.subsurfaceMask = surfaceDescription.SubsurfaceMask;
#else
				surfaceData.subsurfaceMask = 1.0f;
#endif

#ifdef _MATERIAL_FEATURE_TRANSMISSION
				surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
				surfaceData.thickness = surfaceDescription.Thickness;
#endif

				surfaceData.tangentWS = normalize ( fragInputs.worldToTangent[ 0 ].xyz );
				surfaceData.tangentWS = Orthonormalize ( surfaceData.tangentWS, surfaceData.normalWS );

#ifdef _MATERIAL_FEATURE_ANISOTROPY
				surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_ANISOTROPY;
				surfaceData.anisotropy = surfaceDescription.Anisotropy;

#else
				surfaceData.anisotropy = 0;
#endif

#ifdef _MATERIAL_FEATURE_CLEAR_COAT
				surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_CLEAR_COAT;
				surfaceData.coatMask = surfaceDescription.CoatMask;
#else
				surfaceData.coatMask = 0.0f;
#endif

#ifdef _MATERIAL_FEATURE_IRIDESCENCE
				surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_IRIDESCENCE;
				surfaceData.iridescenceThickness = surfaceDescription.IridescenceThickness;
				surfaceData.iridescenceMask = surfaceDescription.IridescenceMask;
#else
				surfaceData.iridescenceThickness = 0.0;
				surfaceData.iridescenceMask = 1.0;
#endif

				//ASE CUSTOM TAG
#ifdef _MATERIAL_FEATURE_TRANSPARENCY
				surfaceData.ior = surfaceDescription.IndexOfRefraction;
				surfaceData.transmittanceColor = surfaceDescription.TransmittanceColor;
				surfaceData.atDistance = surfaceDescription.TransmittanceAbsorptionDistance;
				surfaceData.transmittanceMask = surfaceDescription.TransmittanceMask;
#else
				surfaceData.ior = 1.0;
				surfaceData.transmittanceColor = float3( 1.0, 1.0, 1.0 );
				surfaceData.atDistance = 1000000.0;
				surfaceData.transmittanceMask = 0.0;
#endif

				surfaceData.specularOcclusion = 1.0;

#if defined(_BENTNORMALMAP) && defined(_ENABLESPECULAROCCLUSION)
				surfaceData.specularOcclusion = GetSpecularOcclusionFromBentAO ( V, bentNormalWS, surfaceData );
#elif defined(_MASKMAP)
				surfaceData.specularOcclusion = GetSpecularOcclusionFromAmbientOcclusion ( NdotV, surfaceData.ambientOcclusion, PerceptualSmoothnessToRoughness ( surfaceData.perceptualSmoothness ) );
#endif
			#if HAVE_DECALS
				if (_EnableDecals)
				{
					DecalSurfaceData decalSurfaceData = GetDecalSurfaceData (posInput, surfaceDescription.Alpha);
					ApplyDecalToSurfaceData (decalSurfaceData, surfaceData);
				}
			#endif
			}
        
				void GetSurfaceAndBuiltinData( GlobalSurfaceDescription surfaceDescription , FragInputs fragInputs, float3 V, inout PositionInputs posInput, out SurfaceData surfaceData, out BuiltinData builtinData)
				{
				#if _ALPHATEST_ON
					DoAlphaTest ( surfaceDescription.Alpha, surfaceDescription.AlphaClipThreshold );
				#endif
		
					BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData);
					InitBuiltinData(surfaceDescription.Alpha, surfaceData.normalWS, -fragInputs.worldToTangent[2], posInput.positionWS, fragInputs.texCoord1, fragInputs.texCoord2, builtinData);
        
					builtinData.emissiveColor =             surfaceDescription.Emission;
					builtinData.distortion =                float2(0.0, 0.0);           // surfaceDescription.Distortion -- if distortion pass
					builtinData.distortionBlur =            0.0;                        // surfaceDescription.DistortionBlur -- if distortion pass
        
					builtinData.depthOffset =               0.0;                        // ApplyPerPixelDisplacement(input, V, layerTexCoord, blendMasks); #ifdef _DEPTHOFFSET_ON : ApplyDepthOffsetPositionInput(V, depthOffset, GetWorldToHClipMatrix(), posInput);
        
					PostInitBuiltinData(V, posInput, surfaceData, builtinData);
				}
        
			
				PackedVaryingsMeshToPS Vert(AttributesMesh inputMesh  )
				{
					PackedVaryingsMeshToPS outputPackedVaryingsMeshToPS;

					UNITY_SETUP_INSTANCE_ID(inputMesh);
					UNITY_TRANSFER_INSTANCE_ID(inputMesh, outputPackedVaryingsMeshToPS);
					   TerrainInstancingUV(inputMesh.positionOS, inputMesh.normalOS, inputMesh.tangentOS, inputMesh.ase_texcoord.xy);
    
					outputPackedVaryingsMeshToPS.ase_texcoord5.xy = inputMesh.ase_texcoord.xy;
					
					//setting value to unused interpolator channels and avoid initialization warnings
					outputPackedVaryingsMeshToPS.ase_texcoord5.zw = 0;
					float3 vertexValue =  float3( 0, 0, 0 ) ;
					#ifdef ASE_ABSOLUTE_VERTEX_POS
					inputMesh.positionOS.xyz = vertexValue;
					#else
					inputMesh.positionOS.xyz += vertexValue;
					#endif
					
					inputMesh.normalOS =  inputMesh.normalOS ;

					float3 positionRWS = TransformObjectToWorld(inputMesh.positionOS);
					float3 normalWS = TransformObjectToWorldNormal(inputMesh.normalOS);
					float4 tangentWS = float4(TransformObjectToWorldDir(inputMesh.tangentOS.xyz), inputMesh.tangentOS.w);

					outputPackedVaryingsMeshToPS.positionCS = TransformWorldToHClip(positionRWS);
					outputPackedVaryingsMeshToPS.interp00.xyz = positionRWS;
					outputPackedVaryingsMeshToPS.interp01.xyz = normalWS;
					outputPackedVaryingsMeshToPS.interp02.xyzw = tangentWS;
					outputPackedVaryingsMeshToPS.interp03.xyzw = inputMesh.uv1;
					outputPackedVaryingsMeshToPS.interp04.xyzw = inputMesh.uv2;

					return outputPackedVaryingsMeshToPS;
				}

				void Frag(	PackedVaryingsMeshToPS packedInput,
							#ifdef OUTPUT_SPLIT_LIGHTING
								out float4 outColor : SV_Target0, 
								out float4 outDiffuseLighting : SV_Target1,
								OUTPUT_SSSBUFFER (outSSSBuffer)
							#else
								out float4 outColor : SV_Target0
							#ifdef _WRITE_TRANSPARENT_MOTION_VECTOR
								, out float4 outMotionVec : SV_Target1
							#endif 
							#endif 
							#ifdef _DEPTHOFFSET_ON
								, out float outputDepth : SV_Depth
							#endif
						 
						  )
				{
					FragInputs input;
					ZERO_INITIALIZE(FragInputs, input);
        
					input.worldToTangent = k_identity3x3;
					input.positionSS = packedInput.positionCS;
					float3 positionRWS = packedInput.interp00.xyz;
					float3 normalWS = packedInput.interp01.xyz;
					float4 tangentWS = packedInput.interp02.xyzw;
						
					input.positionRWS = positionRWS;
					input.worldToTangent = BuildWorldToTangent(tangentWS, normalWS);
					input.texCoord1 = packedInput.interp03.xyzw;
					input.texCoord2 = packedInput.interp04.xyzw;

					// input.positionSS is SV_Position
					PositionInputs posInput = GetPositionInput_Stereo(input.positionSS.xy, _ScreenSize.zw, input.positionSS.z, input.positionSS.w, input.positionRWS.xyz, uint2(input.positionSS.xy) / GetTileSize(), unity_StereoEyeIndex);

					float3 normalizedWorldViewDir = GetWorldSpaceNormalizeViewDir ( input.positionRWS );

					SurfaceData surfaceData;
					BuiltinData builtinData;
					GlobalSurfaceDescription surfaceDescription = ( GlobalSurfaceDescription ) 0;
					float2 uv02588 = packedInput.ase_texcoord5.xy * float2( 1,1 ) + float2( 0,0 );
					float4 tex2DNode7708 = tex2D( _Global_Color_Map, ( _Global_Color_Map_Offset + ( _Global_Color_Map_Scale * uv02588 ) ) );
					float clampResult7747 = clamp( ( tex2DNode7708.a + ( 1.0 - _Global_Color_Opacity_Power ) ) , 0.0 , 1.0 );
					float2 appendResult7710 = (float2(1.0 , ( _Global_Color_Map_Far_Power * clampResult7747 )));
					float3 ase_worldPos = GetAbsolutePositionWS( positionRWS );
					float3 break7753 = ase_worldPos;
					float2 appendResult7739 = (float2(break7753.x , break7753.z));
					half2 Top_Bottom1999 = appendResult7739;
					float temp_output_5125_0 = ( 1.0 / _Texture_13_Tiling );
					float2 appendResult5027 = (float2(temp_output_5125_0 , temp_output_5125_0));
					float2 temp_output_5112_0 = ( ( Top_Bottom1999 * appendResult5027 ) / _Texture_13_Far_Multiplier );
					float4 texArray5971 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, temp_output_5112_0, _Texture_13_H_AO_Index );
					float ifLocalVar7681 = 0;
					UNITY_BRANCH 
					if( _Texture_13_H_AO_Index > -1.0 )
					ifLocalVar7681 = texArray5971.y;
					half Texture_13_H5992 = ifLocalVar7681;
					float temp_output_6168_0 = ( _Texture_13_Heightmap_Depth * pow( Texture_13_H5992 , _Texture_13_Height_Contrast ) );
					float4 tex2DNode4371 = tex2D( _Texture_Splat_4, uv02588 );
					half Splat4_R2543 = tex2DNode4371.r;
					float HeightMask6231 = saturate(pow(((temp_output_6168_0*Splat4_R2543)*4)+(Splat4_R2543*2),_Texture_13_Heightblend_Far));
					float temp_output_5006_0 = ( 1.0 / _Texture_14_Tiling );
					float2 appendResult5033 = (float2(temp_output_5006_0 , temp_output_5006_0));
					float2 temp_output_5172_0 = ( ( Top_Bottom1999 * appendResult5033 ) / _Texture_14_Far_Multiplier );
					float4 texArray6011 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, temp_output_5172_0, _Texture_14_H_AO_Index );
					float ifLocalVar7679 = 0;
					UNITY_BRANCH 
					if( _Texture_14_H_AO_Index > -1.0 )
					ifLocalVar7679 = texArray6011.y;
					half Texture_14_H6032 = ifLocalVar7679;
					float temp_output_6174_0 = ( _Texture_14_Heightmap_Depth * pow( Texture_14_H6032 , _Texture_14_Height_Contrast ) );
					half Splat4_G2544 = tex2DNode4371.g;
					float HeightMask6234 = saturate(pow(((temp_output_6174_0*Splat4_G2544)*4)+(Splat4_G2544*2),_Texture_14_Heightblend_Far));
					float temp_output_5210_0 = ( 1.0 / _Texture_15_Tiling );
					float2 appendResult5212 = (float2(temp_output_5210_0 , temp_output_5210_0));
					float2 temp_output_5190_0 = ( ( Top_Bottom1999 * appendResult5212 ) / _Texture_15_Far_Multiplier );
					float4 texArray6051 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, temp_output_5190_0, _Texture_15_H_AO_Index );
					float ifLocalVar7677 = 0;
					UNITY_BRANCH 
					if( _Texture_15_H_AO_Index > -1.0 )
					ifLocalVar7677 = texArray6051.y;
					half Texture_15_H6072 = ifLocalVar7677;
					float temp_output_6180_0 = ( _Texture_15_Heightmap_Depth * pow( Texture_15_H6072 , _Texture_15_Height_Contrast ) );
					half Splat4_B2545 = tex2DNode4371.b;
					float HeightMask6237 = saturate(pow(((temp_output_6180_0*Splat4_B2545)*4)+(Splat4_B2545*2),_Texture_15_Heightblend_Far));
					float temp_output_5075_0 = ( 1.0 / _Texture_16_Tiling );
					float2 appendResult5078 = (float2(temp_output_5075_0 , temp_output_5075_0));
					float2 temp_output_5153_0 = ( ( Top_Bottom1999 * appendResult5078 ) / _Texture_16_Far_Multiplier );
					float4 texArray6091 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, temp_output_5153_0, _Texture_16_H_AO_Index );
					float ifLocalVar7675 = 0;
					UNITY_BRANCH 
					if( _Texture_16_H_AO_Index > -1.0 )
					ifLocalVar7675 = texArray6091.y;
					half Texture_16_H6112 = ifLocalVar7675;
					float temp_output_6186_0 = ( _Texture_16_Heightmap_Depth * pow( Texture_16_H6112 , _Texture_16_Height_Contrast ) );
					half Splat4_A2546 = tex2DNode4371.a;
					float HeightMask6240 = saturate(pow(((temp_output_6186_0*Splat4_A2546)*4)+(Splat4_A2546*2),_Texture_16_Heightblend_Far));
					float4 appendResult6533 = (float4(HeightMask6231 , HeightMask6234 , HeightMask6237 , HeightMask6240));
					float temp_output_4703_0 = ( 1.0 / _Texture_9_Tiling );
					float2 appendResult4736 = (float2(temp_output_4703_0 , temp_output_4703_0));
					float2 temp_output_4721_0 = ( ( Top_Bottom1999 * appendResult4736 ) / _Texture_9_Far_Multiplier );
					float4 texArray5811 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, temp_output_4721_0, _Texture_9_H_AO_Index_AO_H_Index );
					float ifLocalVar7689 = 0;
					UNITY_BRANCH 
					if( _Texture_9_H_AO_Index_AO_H_Index > -1.0 )
					ifLocalVar7689 = texArray5811.y;
					half Texture_9_H5832 = ifLocalVar7689;
					float temp_output_6144_0 = ( _Texture_9_Heightmap_Depth * pow( Texture_9_H5832 , _Texture_9_Height_Contrast ) );
					float4 tex2DNode4370 = tex2D( _Texture_Splat_3, uv02588 );
					half Splat3_R2537 = tex2DNode4370.r;
					float HeightMask6219 = saturate(pow(((temp_output_6144_0*Splat3_R2537)*4)+(Splat3_R2537*2),_Texture_9_Heightblend_Far));
					float temp_output_4734_0 = ( 1.0 / _Texture_10_Tiling );
					float2 appendResult4738 = (float2(temp_output_4734_0 , temp_output_4734_0));
					float2 temp_output_4879_0 = ( ( Top_Bottom1999 * appendResult4738 ) / _Texture_10_Far_Multiplier );
					float4 texArray5851 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, temp_output_4879_0, _Texture_10_H_AO_Index );
					float ifLocalVar7687 = 0;
					UNITY_BRANCH 
					if( _Texture_10_H_AO_Index > -1.0 )
					ifLocalVar7687 = texArray5851.y;
					half Texture_10_H5872 = ifLocalVar7687;
					float temp_output_6150_0 = ( _Texture_10_Heightmap_Depth * pow( Texture_10_H5872 , _Texture_10_Height_Contrast ) );
					half Splat3_G2538 = tex2DNode4370.g;
					float HeightMask6222 = saturate(pow(((temp_output_6150_0*Splat3_G2538)*4)+(Splat3_G2538*2),_Texture_10_Heightblend_Far));
					float temp_output_4739_0 = ( 1.0 / _Texture_11_Tiling );
					float2 appendResult4741 = (float2(temp_output_4739_0 , temp_output_4739_0));
					float2 temp_output_4904_0 = ( ( Top_Bottom1999 * appendResult4741 ) / _Texture_11_Far_Multiplier );
					float4 texArray5891 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, temp_output_4904_0, _Texture_11_H_AO_Index );
					float ifLocalVar7685 = 0;
					UNITY_BRANCH 
					if( _Texture_11_H_AO_Index > -1.0 )
					ifLocalVar7685 = texArray5891.y;
					half Texture_11_H5912 = ifLocalVar7685;
					float temp_output_6156_0 = ( _Texture_11_Heightmap_Depth * pow( Texture_11_H5912 , _Texture_11_Height_Contrast ) );
					half Splat3_B2539 = tex2DNode4370.b;
					float HeightMask6225 = saturate(pow(((temp_output_6156_0*Splat3_B2539)*4)+(Splat3_B2539*2),_Texture_11_Heightblend_Far));
					float temp_output_4745_0 = ( 1.0 / _Texture_12_Tiling );
					float2 appendResult4751 = (float2(temp_output_4745_0 , temp_output_4745_0));
					float2 temp_output_4932_0 = ( ( Top_Bottom1999 * appendResult4751 ) / _Texture_12_Far_Multiplier );
					float4 texArray5931 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, temp_output_4932_0, _Texture_12_H_AO_Index );
					float ifLocalVar7683 = 0;
					UNITY_BRANCH 
					if( _Texture_12_H_AO_Index > -1.0 )
					ifLocalVar7683 = texArray5931.y;
					half Texture_12_H5952 = ifLocalVar7683;
					float temp_output_6162_0 = ( _Texture_12_Heightmap_Depth * pow( Texture_12_H5952 , _Texture_12_Height_Contrast ) );
					half Splat3_A2540 = tex2DNode4370.a;
					float HeightMask6228 = saturate(pow(((temp_output_6162_0*Splat3_A2540)*4)+(Splat3_A2540*2),_Texture_12_Heightblend_Far));
					float4 appendResult6529 = (float4(HeightMask6219 , HeightMask6222 , HeightMask6225 , HeightMask6228));
					float temp_output_4397_0 = ( 1.0 / _Texture_5_Tiling );
					float2 appendResult4399 = (float2(temp_output_4397_0 , temp_output_4397_0));
					float2 temp_output_4440_0 = ( ( Top_Bottom1999 * appendResult4399 ) / _Texture_5_Far_Multiplier );
					float4 texArray5655 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, temp_output_4440_0, _Texture_5_H_AO_Index );
					float ifLocalVar7668 = 0;
					UNITY_BRANCH 
					if( _Texture_5_H_AO_Index > -1.0 )
					ifLocalVar7668 = texArray5655.y;
					half Texture_5_H5671 = ifLocalVar7668;
					float temp_output_6120_0 = ( _Texture_5_Heightmap_Depth * pow( Texture_5_H5671 , _Texture_5_Height_Contrast ) );
					float4 tex2DNode4369 = tex2D( _Texture_Splat_2, uv02588 );
					half Splat2_R2106 = tex2DNode4369.r;
					float HeightMask6205 = saturate(pow(((temp_output_6120_0*Splat2_R2106)*4)+(Splat2_R2106*2),_Texture_5_Heightblend_Far));
					float temp_output_4469_0 = ( 1.0 / _Texture_6_Tiling );
					float2 appendResult4471 = (float2(temp_output_4469_0 , temp_output_4469_0));
					float2 temp_output_4507_0 = ( ( Top_Bottom1999 * appendResult4471 ) / _Texture_6_Far_Multiplier );
					float4 texArray5695 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, temp_output_4507_0, _Texture_6_H_AO_Index );
					float ifLocalVar7670 = 0;
					UNITY_BRANCH 
					if( _Texture_6_H_AO_Index > -1.0 )
					ifLocalVar7670 = texArray5695.y;
					half Texture_6_H5711 = ifLocalVar7670;
					float temp_output_6126_0 = ( _Texture_6_Heightmap_Depth * pow( Texture_6_H5711 , _Texture_6_Height_Contrast ) );
					half Splat2_G2107 = tex2DNode4369.g;
					float HeightMask6208 = saturate(pow(((temp_output_6126_0*Splat2_G2107)*4)+(Splat2_G2107*2),_Texture_6_Heightblend_Far));
					float temp_output_4543_0 = ( 1.0 / _Texture_7_Tiling );
					float2 appendResult4545 = (float2(temp_output_4543_0 , temp_output_4543_0));
					float2 temp_output_4581_0 = ( ( Top_Bottom1999 * appendResult4545 ) / _Texture_7_Far_Multiplier );
					float4 texArray5735 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, temp_output_4581_0, _Texture_7_H_AO_Index );
					float ifLocalVar7672 = 0;
					UNITY_BRANCH 
					if( _Texture_7_H_AO_Index > -1.0 )
					ifLocalVar7672 = texArray5735.y;
					half Texture_7_H5751 = ifLocalVar7672;
					float temp_output_6132_0 = ( _Texture_7_Heightmap_Depth * pow( Texture_7_H5751 , _Texture_7_Height_Contrast ) );
					half Splat2_B2108 = tex2DNode4369.b;
					float HeightMask6211 = saturate(pow(((temp_output_6132_0*Splat2_B2108)*4)+(Splat2_B2108*2),_Texture_7_Heightblend_Far));
					float temp_output_4617_0 = ( 1.0 / _Texture_8_Tiling );
					float2 appendResult4619 = (float2(temp_output_4617_0 , temp_output_4617_0));
					float2 temp_output_4655_0 = ( ( Top_Bottom1999 * appendResult4619 ) / _Texture_8_Far_Multiplier );
					float4 texArray5775 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, temp_output_4655_0, _Texture_8_H_AO_Index );
					float ifLocalVar7674 = 0;
					UNITY_BRANCH 
					if( _Texture_8_H_AO_Index > -1.0 )
					ifLocalVar7674 = texArray5775.y;
					half Texture_8_H5791 = ifLocalVar7674;
					float temp_output_6138_0 = ( _Texture_8_Heightmap_Depth * pow( Texture_8_H5791 , _Texture_8_Height_Contrast ) );
					half Splat2_A2109 = tex2DNode4369.a;
					float HeightMask6214 = saturate(pow(((temp_output_6138_0*Splat2_A2109)*4)+(Splat2_A2109*2),_Texture_8_Heightblend_Far));
					float4 appendResult6524 = (float4(HeightMask6205 , HeightMask6208 , HeightMask6211 , HeightMask6214));
					float temp_output_3830_0 = ( 1.0 / _Texture_1_Tiling );
					float2 appendResult3284 = (float2(temp_output_3830_0 , temp_output_3830_0));
					float2 temp_output_3298_0 = ( ( Top_Bottom1999 * appendResult3284 ) / _Texture_1_Far_Multiplier );
					float4 texArray7704 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, temp_output_3298_0, _Texture_1_H_AO_Index );
					float ifLocalVar7658 = 0;
					UNITY_BRANCH 
					if( _Texture_1_H_AO_Index > -1.0 )
					ifLocalVar7658 = texArray7704.g;
					half Texture_1_H5480 = ifLocalVar7658;
					float temp_output_5544_0 = ( pow( Texture_1_H5480 , _Texture_1_Height_Contrast ) * _Texture_1_Heightmap_Depth );
					float4 tex2DNode4368 = tex2D( _Texture_Splat_1, uv02588 );
					half Splat1_R1438 = tex2DNode4368.r;
					float HeightMask6196 = saturate(pow(((temp_output_5544_0*Splat1_R1438)*4)+(Splat1_R1438*2),_Texture_1_Heightblend_Far));
					float temp_output_3831_0 = ( 1.0 / _Texture_2_Tiling );
					float2 appendResult3349 = (float2(temp_output_3831_0 , temp_output_3831_0));
					float2 temp_output_3345_0 = ( ( Top_Bottom1999 * appendResult3349 ) / _Texture_2_Far_Multiplier );
					float4 texArray5533 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, temp_output_3345_0, _Texture_2_H_AO_Index );
					float ifLocalVar7662 = 0;
					UNITY_BRANCH 
					if( _Texture_2_H_AO_Index > -1.0 )
					ifLocalVar7662 = texArray5533.y;
					half Texture_2_H5497 = ifLocalVar7662;
					float temp_output_5545_0 = ( _Texture_2_Heightmap_Depth * pow( Texture_2_H5497 , _Texture_2_Height_Contrast ) );
					half Splat1_G1441 = tex2DNode4368.g;
					float HeightMask6515 = saturate(pow(((temp_output_5545_0*Splat1_G1441)*4)+(Splat1_G1441*2),_Texture_2_Heightblend_Far));
					float temp_output_3832_0 = ( 1.0 / _Texture_3_Tiling );
					float2 appendResult3415 = (float2(temp_output_3832_0 , temp_output_3832_0));
					float2 temp_output_3412_0 = ( ( Top_Bottom1999 * appendResult3415 ) / _Texture_3_Far_Multiplier );
					float4 texArray5586 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, temp_output_3412_0, _Texture_3_H_AO_Index );
					float ifLocalVar7664 = 0;
					UNITY_BRANCH 
					if( _Texture_3_H_AO_Index > -1.0 )
					ifLocalVar7664 = texArray5586.y;
					half Texture_3_H5581 = ifLocalVar7664;
					float temp_output_5590_0 = ( _Texture_3_Heightmap_Depth * pow( Texture_3_H5581 , _Texture_3_Height_Contrast ) );
					half Splat1_B1442 = tex2DNode4368.b;
					float HeightMask6516 = saturate(pow(((temp_output_5590_0*Splat1_B1442)*4)+(Splat1_B1442*2),_Texture_3_Heightblend_Far));
					float temp_output_3833_0 = ( 1.0 / _Texture_4_Tiling );
					float2 appendResult3482 = (float2(temp_output_3833_0 , temp_output_3833_0));
					float2 temp_output_3479_0 = ( ( Top_Bottom1999 * appendResult3482 ) / _Texture_4_Far_Multiplier );
					float4 texArray5615 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, temp_output_3479_0, _Texture_4_H_AO_Index );
					float ifLocalVar7666 = 0;
					UNITY_BRANCH 
					if( _Texture_4_H_AO_Index > -1.0 )
					ifLocalVar7666 = texArray5615.y;
					half Texture_4_H5631 = ifLocalVar7666;
					float temp_output_6118_0 = ( _Texture_4_Heightmap_Depth * pow( Texture_4_H5631 , _Texture_4_Height_Contrast ) );
					half Splat1_A1491 = tex2DNode4368.a;
					float HeightMask6203 = saturate(pow(((temp_output_6118_0*Splat1_A1491)*4)+(Splat1_A1491*2),_Texture_4_Heightblend_Far));
					float4 appendResult6517 = (float4(HeightMask6196 , HeightMask6515 , HeightMask6516 , HeightMask6203));
					float4 texArray3292 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, temp_output_3298_0, _Texture_1_Albedo_Index );
					float4 ifLocalVar7657 = 0;
					UNITY_BRANCH 
					if( _Texture_1_Albedo_Index > -1.0 )
					ifLocalVar7657 = ( texArray3292 * _Texture_1_Color );
					half4 Texture_1_Final950 = ifLocalVar7657;
					float4 texArray3339 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, temp_output_3345_0, _Texture_2_Albedo_Index );
					float4 ifLocalVar7661 = 0;
					UNITY_BRANCH 
					if( _Texture_2_Albedo_Index > -1.0 )
					ifLocalVar7661 = ( texArray3339 * _Texture_2_Color );
					half4 Texture_2_Final3385 = ifLocalVar7661;
					float4 texArray3406 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, temp_output_3412_0, _Texture_3_Albedo_Index );
					float4 ifLocalVar7663 = 0;
					UNITY_BRANCH 
					if( _Texture_3_Albedo_Index > -1.0 )
					ifLocalVar7663 = ( texArray3406 * _Texture_3_Color );
					half4 Texture_3_Final3451 = ifLocalVar7663;
					float4 texArray3473 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, temp_output_3479_0, _Texture_4_Albedo_Index );
					float4 ifLocalVar7665 = 0;
					UNITY_BRANCH 
					if( _Texture_4_Albedo_Index > -1.0 )
					ifLocalVar7665 = ( texArray3473 * _Texture_4_Color );
					half4 Texture_4_Final3518 = ifLocalVar7665;
					float4 layeredBlendVar6512 = appendResult6517;
					float4 layeredBlend6512 = ( lerp( lerp( lerp( lerp( float4( 0,0,0,0 ) , Texture_1_Final950 , layeredBlendVar6512.x ) , Texture_2_Final3385 , layeredBlendVar6512.y ) , Texture_3_Final3451 , layeredBlendVar6512.z ) , Texture_4_Final3518 , layeredBlendVar6512.w ) );
					float4 texArray4445 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, temp_output_4440_0, _Texture_5_Albedo_Index );
					float4 ifLocalVar7667 = 0;
					UNITY_BRANCH 
					if( _Texture_5_Albedo_Index > -1.0 )
					ifLocalVar7667 = ( texArray4445 * _Texture_5_Color );
					half4 Texture_5_Final4396 = ifLocalVar7667;
					float4 texArray4512 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, temp_output_4507_0, _Texture_6_Albedo_Index );
					float4 ifLocalVar7669 = 0;
					UNITY_BRANCH 
					if( _Texture_6_Albedo_Index > -1.0 )
					ifLocalVar7669 = ( texArray4512 * _Texture_6_Color );
					half4 Texture_6_Final4536 = ifLocalVar7669;
					float4 texArray4586 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, temp_output_4581_0, _Texture_7_Albedo_Index );
					float4 ifLocalVar7671 = 0;
					UNITY_BRANCH 
					if( _Texture_7_Albedo_Index > -1.0 )
					ifLocalVar7671 = ( texArray4586 * _Texture_7_Color );
					half4 Texture_7_Final4614 = ifLocalVar7671;
					float4 texArray4660 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, temp_output_4655_0, _Texture_8_Albedo_Index );
					float4 ifLocalVar7673 = 0;
					UNITY_BRANCH 
					if( _Texture_8_Albedo_Index > -1.0 )
					ifLocalVar7673 = ( texArray4660 * _Texture_8_Color );
					half4 Texture_8_Final4689 = ifLocalVar7673;
					float4 layeredBlendVar6520 = appendResult6524;
					float4 layeredBlend6520 = ( lerp( lerp( lerp( lerp( layeredBlend6512 , Texture_5_Final4396 , layeredBlendVar6520.x ) , Texture_6_Final4536 , layeredBlendVar6520.y ) , Texture_7_Final4614 , layeredBlendVar6520.z ) , Texture_8_Final4689 , layeredBlendVar6520.w ) );
					float4 texArray4889 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, temp_output_4721_0, _Texture_9_Albedo_Index );
					float4 ifLocalVar7690 = 0;
					UNITY_BRANCH 
					if( _Texture_9_Albedo_Index > -1.0 )
					ifLocalVar7690 = ( texArray4889 * _Texture_9_Color );
					half4 Texture_9_Final4987 = ifLocalVar7690;
					float4 texArray4913 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, temp_output_4879_0, _Texture_10_Albedo_Index );
					float4 ifLocalVar7688 = 0;
					UNITY_BRANCH 
					if( _Texture_10_Albedo_Index > -1.0 )
					ifLocalVar7688 = ( texArray4913 * _Texture_10_Color );
					half4 Texture_10_Final4994 = ifLocalVar7688;
					float4 texArray4923 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, temp_output_4904_0, _Texture_11_Albedo_Index );
					float4 ifLocalVar7686 = 0;
					UNITY_BRANCH 
					if( _Texture_11_Albedo_Index > -1.0 )
					ifLocalVar7686 = ( texArray4923 * _Texture_11_Color );
					half4 Texture_11_Final4996 = ifLocalVar7686;
					float4 texArray4952 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, temp_output_4932_0, _Texture_12_Albedo_Index );
					float4 ifLocalVar7684 = 0;
					UNITY_BRANCH 
					if( _Texture_12_Albedo_Index > -1.0 )
					ifLocalVar7684 = ( texArray4952 * _Texture_12_Color );
					half4 Texture_12_Final4997 = ifLocalVar7684;
					float4 layeredBlendVar6528 = appendResult6529;
					float4 layeredBlend6528 = ( lerp( lerp( lerp( lerp( layeredBlend6520 , Texture_9_Final4987 , layeredBlendVar6528.x ) , Texture_10_Final4994 , layeredBlendVar6528.y ) , Texture_11_Final4996 , layeredBlendVar6528.z ) , Texture_12_Final4997 , layeredBlendVar6528.w ) );
					float4 texArray5034 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, temp_output_5112_0, _Texture_13_Albedo_Index );
					float4 ifLocalVar7682 = 0;
					UNITY_BRANCH 
					if( _Texture_13_Albedo_Index > -1.0 )
					ifLocalVar7682 = ( texArray5034 * _Texture_13_Color );
					half4 Texture_13_Final5058 = ifLocalVar7682;
					float4 texArray5171 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, temp_output_5172_0, _Texture_14_Albedo_Index );
					float4 ifLocalVar7680 = 0;
					UNITY_BRANCH 
					if( _Texture_14_Albedo_Index > -1.0 )
					ifLocalVar7680 = ( texArray5171 * _Texture_14_Color );
					half4 Texture_14_Final5163 = ifLocalVar7680;
					float4 texArray5272 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, temp_output_5190_0, _Texture_15_Albedo_Index );
					float4 ifLocalVar7678 = 0;
					UNITY_BRANCH 
					if( _Texture_15_Albedo_Index > -1.0 )
					ifLocalVar7678 = ( texArray5272 * _Texture_15_Color );
					half4 Texture_15_Final5270 = ifLocalVar7678;
					float4 texArray5143 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, temp_output_5153_0, _Texture_16_Albedo_Index );
					float4 ifLocalVar7676 = 0;
					UNITY_BRANCH 
					if( _Texture_16_Albedo_Index > -1.0 )
					ifLocalVar7676 = ( texArray5143 * _Texture_16_Color );
					half4 Texture_16_Final5094 = ifLocalVar7676;
					float4 layeredBlendVar6532 = appendResult6533;
					float4 layeredBlend6532 = ( lerp( lerp( lerp( lerp( layeredBlend6528 , Texture_13_Final5058 , layeredBlendVar6532.x ) , Texture_14_Final5163 , layeredBlendVar6532.y ) , Texture_15_Final5270 , layeredBlendVar6532.z ) , Texture_16_Final5094 , layeredBlendVar6532.w ) );
					float4 break3856 = layeredBlend6532;
					float3 appendResult3857 = (float3(break3856.x , break3856.y , break3856.z));
					float3 appendResult7709 = (float3(tex2DNode7708.r , tex2DNode7708.g , tex2DNode7708.b));
					float2 weightedBlendVar7711 = appendResult7710;
					float3 weightedAvg7711 = ( ( weightedBlendVar7711.x*appendResult3857 + weightedBlendVar7711.y*appendResult7709 )/( weightedBlendVar7711.x + weightedBlendVar7711.y ) );
					float2 temp_cast_0 = (( ( ase_worldPos.y / _Geological_Tiling_Far ) + _Geological_Map_Offset_Far )).xx;
					float4 tex2DNode6969 = tex2D( _Texture_Geological_Map, temp_cast_0 );
					float3 appendResult6971 = (float3(tex2DNode6969.r , tex2DNode6969.g , tex2DNode6969.b));
					float3 blendOpSrc4362 = weightedAvg7711;
					float3 blendOpDest4362 = ( ( ( appendResult6971 + float3( -0.3,-0.3,-0.3 ) ) * _Geological_Map_Far_Power ) * ( ( _Texture_16_Geological_Power * Splat4_A2546 ) + ( ( _Texture_15_Geological_Power * Splat4_B2545 ) + ( ( _Texture_14_Geological_Power * Splat4_G2544 ) + ( ( _Texture_13_Geological_Power * Splat4_R2543 ) + ( ( _Texture_12_Geological_Power * Splat3_A2540 ) + ( ( _Texture_11_Geological_Power * Splat3_B2539 ) + ( ( _Texture_10_Geological_Power * Splat3_G2538 ) + ( ( _Texture_9_Geological_Power * Splat3_R2537 ) + ( ( _Texture_8_Geological_Power * Splat2_A2109 ) + ( ( _Texture_7_Geological_Power * Splat2_B2108 ) + ( ( _Texture_6_Geological_Power * Splat2_G2107 ) + ( ( _Texture_5_Geological_Power * Splat2_R2106 ) + ( ( _Texture_1_Geological_Power * Splat1_R1438 ) + ( ( _Texture_2_Geological_Power * Splat1_G1441 ) + ( ( _Texture_4_Geological_Power * Splat1_A1491 ) + ( _Texture_3_Geological_Power * Splat1_B1442 ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) );
					float4 break1409 = ( _Texture_Snow_Average * _Snow_Color );
					float3 appendResult1410 = (float3(break1409.x , break1409.y , break1409.z));
					float4 layeredBlendVar6518 = tex2DNode4368;
					float layeredBlend6518 = ( lerp( lerp( lerp( lerp( 0.0 , temp_output_5544_0 , layeredBlendVar6518.x ) , temp_output_5545_0 , layeredBlendVar6518.y ) , temp_output_5590_0 , layeredBlendVar6518.z ) , temp_output_6118_0 , layeredBlendVar6518.w ) );
					float4 layeredBlendVar6525 = tex2DNode4369;
					float layeredBlend6525 = ( lerp( lerp( lerp( lerp( layeredBlend6518 , temp_output_6120_0 , layeredBlendVar6525.x ) , temp_output_6126_0 , layeredBlendVar6525.y ) , temp_output_6132_0 , layeredBlendVar6525.z ) , temp_output_6138_0 , layeredBlendVar6525.w ) );
					float4 layeredBlendVar6527 = tex2DNode4370;
					float layeredBlend6527 = ( lerp( lerp( lerp( lerp( layeredBlend6525 , temp_output_6144_0 , layeredBlendVar6527.x ) , temp_output_6150_0 , layeredBlendVar6527.y ) , temp_output_6156_0 , layeredBlendVar6527.z ) , temp_output_6162_0 , layeredBlendVar6527.w ) );
					float4 layeredBlendVar6530 = tex2DNode4371;
					float layeredBlend6530 = ( lerp( lerp( lerp( lerp( layeredBlend6527 , temp_output_6168_0 , layeredBlendVar6530.x ) , temp_output_6174_0 , layeredBlendVar6530.y ) , temp_output_6180_0 , layeredBlendVar6530.z ) , temp_output_6186_0 , layeredBlendVar6530.w ) );
					float4 texArray6270 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, Top_Bottom1999, (float)_Texture_Snow_H_AO_Index );
					float temp_output_6545_0 = ( layeredBlend6530 + ( pow( texArray6270.y , _Snow_Height_Contrast ) * _Snow_Heightmap_Depth ) );
					float clampResult6546 = clamp( temp_output_6545_0 , 0.0 , temp_output_6545_0 );
					float clampResult7176 = clamp( clampResult6546 , 0.0 , 1.0 );
					float simplePerlin2D7750 = snoise( ( Top_Bottom1999 * _Snow_Noise_Tiling ) );
					float lerpResult7728 = lerp( 1.0 , simplePerlin2D7750 , ( _Snow_Noise_Power * 0.1 ));
					float temp_output_7621_0 = ( _Snow_Maximum_Angle_Hardness * 0.5 );
					float clampResult1354 = clamp( normalWS.y , 0.0 , 0.9999 );
					float temp_output_1349_0 = ( _Snow_Maximum_Angle / 90.0 );
					float clampResult1347 = clamp( ( clampResult1354 - ( 1.0 - temp_output_1349_0 ) ) , 0.0 , 2.0 );
					half SnowSlope1352 = ( clampResult1347 * ( 1.0 / temp_output_1349_0 ) );
					float clampResult6569 = clamp( ( 1.0 - ( temp_output_7621_0 * 0.1 ) ) , 0.01 , 1.0 );
					float clampResult4146 = clamp( pow( ( ( _Snow_Amount * ( 0.1 - ( temp_output_7621_0 * 0.01 ) ) ) * SnowSlope1352 ) , clampResult6569 ) , 0.0 , 1.0 );
					float temp_output_3751_0 = ( ( 1.0 - _Snow_Min_Height ) + ase_worldPos.y );
					float clampResult4220 = clamp( ( temp_output_3751_0 + 1.0 ) , 0.0 , 1.0 );
					float clampResult4260 = clamp( ( ( 1.0 - ( ( temp_output_3751_0 + _Snow_Min_Height_Blending ) / temp_output_3751_0 ) ) + -0.5 ) , 0.0 , 1.0 );
					float clampResult4263 = clamp( ( clampResult4220 + clampResult4260 ) , 0.0 , 1.0 );
					float lerpResult3759 = lerp( 0.0 , ( ( _Snow_Amount * lerpResult7728 ) * clampResult4146 ) , clampResult4263);
					float clampResult4298 = clamp( lerpResult3759 , 0.0 , 2.0 );
					float HeightMask6539 = saturate(pow(((( 1.0 - clampResult7176 )*( clampResult4298 * ( 1.0 - ( ( _Texture_16_Snow_Reduction * Splat4_A2546 ) + ( ( _Texture_15_Snow_Reduction * Splat4_B2545 ) + ( ( ( _Texture_13_Snow_Reduction * Splat4_R2543 ) + ( ( _Texture_12_Snow_Reduction * Splat3_A2540 ) + ( ( _Texture_11_Snow_Reduction * Splat3_B2539 ) + ( ( ( _Texture_9_Snow_Reduction * Splat3_R2537 ) + ( ( _Texture_8_Snow_Reduction * Splat2_A2109 ) + ( ( _Texture_7_Snow_Reduction * Splat2_B2108 ) + ( ( ( _Texture_5_Snow_Reduction * Splat2_R2106 ) + ( ( _Texture_1_Snow_Reduction * Splat1_R1438 ) + ( ( _Texture_2_Snow_Reduction * Splat1_G1441 ) + ( ( _Texture_3_Snow_Reduction * Splat1_B1442 ) + ( _Texture_4_Snow_Reduction * Splat1_A1491 ) ) ) ) ) + ( _Texture_6_Snow_Reduction * Splat2_G2107 ) ) ) ) ) + ( _Texture_10_Snow_Reduction * Splat3_G2538 ) ) ) ) ) + ( _Texture_14_Snow_Reduction * Splat4_G2544 ) ) ) ) ) ))*4)+(( clampResult4298 * ( 1.0 - ( ( _Texture_16_Snow_Reduction * Splat4_A2546 ) + ( ( _Texture_15_Snow_Reduction * Splat4_B2545 ) + ( ( ( _Texture_13_Snow_Reduction * Splat4_R2543 ) + ( ( _Texture_12_Snow_Reduction * Splat3_A2540 ) + ( ( _Texture_11_Snow_Reduction * Splat3_B2539 ) + ( ( ( _Texture_9_Snow_Reduction * Splat3_R2537 ) + ( ( _Texture_8_Snow_Reduction * Splat2_A2109 ) + ( ( _Texture_7_Snow_Reduction * Splat2_B2108 ) + ( ( ( _Texture_5_Snow_Reduction * Splat2_R2106 ) + ( ( _Texture_1_Snow_Reduction * Splat1_R1438 ) + ( ( _Texture_2_Snow_Reduction * Splat1_G1441 ) + ( ( _Texture_3_Snow_Reduction * Splat1_B1442 ) + ( _Texture_4_Snow_Reduction * Splat1_A1491 ) ) ) ) ) + ( _Texture_6_Snow_Reduction * Splat2_G2107 ) ) ) ) ) + ( _Texture_10_Snow_Reduction * Splat3_G2538 ) ) ) ) ) + ( _Texture_14_Snow_Reduction * Splat4_G2544 ) ) ) ) ) )*2),_Snow_Heightblend_Far));
					float3 lerpResult1356 = lerp( ( saturate( ( blendOpSrc4362 + blendOpDest4362 ) )) , appendResult1410 , HeightMask6539);
					
					float4 texArray4374 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Normal, sampler_Texture_Array_Normal, ( Top_Bottom1999 / _Perlin_Normal_Tiling_Far ), (float)_Texture_Perlin_Normal_Index );
					float2 appendResult11_g668 = (float2(texArray4374.w , texArray4374.y));
					float2 temp_output_4_0_g668 = ( ( ( appendResult11_g668 * float2( 2,2 ) ) + float2( -1,-1 ) ) * _Perlin_Normal_Power );
					float2 break8_g668 = temp_output_4_0_g668;
					float dotResult5_g668 = dot( temp_output_4_0_g668 , temp_output_4_0_g668 );
					float temp_output_9_0_g668 = sqrt( ( 1.0 - saturate( dotResult5_g668 ) ) );
					float3 appendResult20_g668 = (float3(break8_g668.x , break8_g668.y , temp_output_9_0_g668));
					float3 temp_output_7038_0 = appendResult20_g668;
					float clampResult3775 = clamp( ( ( _Texture_16_Perlin_Power * Splat4_A2546 ) + ( ( _Texture_15_Perlin_Power * Splat4_B2545 ) + ( ( _Texture_14_Perlin_Power * Splat4_G2544 ) + ( ( _Texture_13_Perlin_Power * Splat4_R2543 ) + ( ( _Texture_12_Perlin_Power * Splat3_A2540 ) + ( ( _Texture_11_Perlin_Power * Splat3_B2539 ) + ( ( _Texture_10_Perlin_Power * Splat3_G2538 ) + ( ( _Texture_9_Perlin_Power * Splat3_R2537 ) + ( ( _Texture_8_Perlin_Power * Splat2_A2109 ) + ( ( _Texture_7_Perlin_Power * Splat2_B2108 ) + ( ( _Texture_6_Perlin_Power * Splat2_G2107 ) + ( ( _Texture_5_Perlin_Power * Splat2_R2106 ) + ( ( _Texture_1_Perlin_Power * Splat1_R1438 ) + ( ( _Texture_2_Perlin_Power * Splat1_G1441 ) + ( ( _Texture_4_Perlin_Power * Splat1_A1491 ) + ( _Texture_3_Perlin_Power * Splat1_B1442 ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) , 0.0 , 1.0 );
					float3 lerpResult3776 = lerp( float3( 0,0,1 ) , temp_output_7038_0 , clampResult3775);
					float3 lerpResult3906 = lerp( float3( 0,0,1 ) , temp_output_7038_0 , ( _Snow_Perlin_Power * 0.5 ));
					float3 lerpResult6503 = lerp( lerpResult3776 , lerpResult3906 , HeightMask6539);
					float3 normalizeResult3901 = normalize( UnpackNormalmapRGorAG( tex2D( _Global_Normal_Map, uv02588 ), _Global_Normalmap_Power ) );
					float3 temp_output_4100_0 = BlendNormal( lerpResult6503 , normalizeResult3901 );
					
					float3 clampResult6245 = clamp( appendResult1410 , float3( 0,0,0 ) , float3( 0.5,0.5,0.5 ) );
					float3 lerpResult4040 = lerp( ( ( appendResult3857 * float3( 0.3,0.3,0.3 ) ) * _Terrain_Specular ) , ( clampResult6245 * _Snow_Specular ) , HeightMask6539);
					
					float lerpResult3951 = lerp( ( break3856.w * _Terrain_Smoothness ) , break1409.w , HeightMask6539);
					
					float clampResult7695 = clamp( ( ( 1.0 + temp_output_4100_0.y ) * 0.5 ) , ( 1.0 - _Ambient_Occlusion_Power ) , 1.0 );
					#ifdef _USE_AO_TEXTURE_ON
					float staticSwitch7703 = 1.0;
					#else
					float staticSwitch7703 = clampResult7695;
					#endif
					
					surfaceDescription.Albedo = lerpResult1356;
					surfaceDescription.Normal = temp_output_4100_0;
					surfaceDescription.Emission = 0;
					surfaceDescription.Specular = lerpResult4040;
					surfaceDescription.Metallic = 0;
					surfaceDescription.Smoothness = lerpResult3951;
					surfaceDescription.Occlusion = staticSwitch7703;
					surfaceDescription.Alpha = 1;
					surfaceDescription.AlphaClipThreshold = 0;

	#ifdef _MATERIAL_FEATURE_CLEAR_COAT
					surfaceDescription.CoatMask = 0;
	#endif

	#if defined(_MATERIAL_FEATURE_SUBSURFACE_SCATTERING) || defined(_MATERIAL_FEATURE_TRANSMISSION)
					surfaceDescription.DiffusionProfile = asfloat (uint(1074012128);
	#endif

	#ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
					surfaceDescription.SubsurfaceMask = 1;
	#endif

	#ifdef _MATERIAL_FEATURE_TRANSMISSION
					surfaceDescription.Thickness = 0;
	#endif

	#ifdef _MATERIAL_FEATURE_ANISOTROPY
					surfaceDescription.Anisotropy = 0;
	#endif

	#ifdef _MATERIAL_FEATURE_IRIDESCENCE
					surfaceDescription.IridescenceThickness = 0;
					surfaceDescription.IridescenceMask = 1;
	#endif

	#ifdef _MATERIAL_FEATURE_TRANSPARENCY
					surfaceDescription.IndexOfRefraction = 1;
					surfaceDescription.TransmittanceColor = float3( 1, 1, 1 );
					surfaceDescription.TransmittanceAbsorptionDistance = 1000000;
					surfaceDescription.TransmittanceMask = 0;
	#endif
					GetSurfaceAndBuiltinData(surfaceDescription, input, normalizedWorldViewDir, posInput, surfaceData, builtinData);

					BSDFData bsdfData = ConvertSurfaceDataToBSDFData(input.positionSS.xy, surfaceData);

					PreLightData preLightData = GetPreLightData(normalizedWorldViewDir, posInput, bsdfData);

					outColor = float4(0.0, 0.0, 0.0, 0.0);

					{
				#ifdef _SURFACE_TYPE_TRANSPARENT
						uint featureFlags = LIGHT_FEATURE_MASK_FLAGS_TRANSPARENT;
				#else
						uint featureFlags = LIGHT_FEATURE_MASK_FLAGS_OPAQUE;
				#endif
						float3 diffuseLighting;
						float3 specularLighting;

						LightLoop(normalizedWorldViewDir, posInput, preLightData, bsdfData, builtinData, featureFlags, diffuseLighting, specularLighting);

				#ifdef OUTPUT_SPLIT_LIGHTING
						if (_EnableSubsurfaceScattering != 0 && ShouldOutputSplitLighting(bsdfData))
						{
							outColor = float4(specularLighting, 1.0);
							outDiffuseLighting = float4(TagLightingForSSS(diffuseLighting), 1.0);
						}
						else
						{
							outColor = float4(diffuseLighting + specularLighting, 1.0);
							outDiffuseLighting = 0;
						}
						ENCODE_INTO_SSSBUFFER(surfaceData, posInput.positionSS, outSSSBuffer);
				#else
						outColor = ApplyBlendMode(diffuseLighting, specularLighting, builtinData.opacity);
						outColor = EvaluateAtmosphericScattering(posInput, normalizedWorldViewDir, outColor);
				#endif
					#ifdef _WRITE_TRANSPARENT_MOTION_VECTOR
						//VaryingsPassToPS inputPass = UnpackVaryingsPassToPS (packedInput.vpass);
						//bool forceNoMotion = any (unity_MotionVectorsParams.yw == 0.0);
						//if (forceNoMotion)
						//{
						//	outMotionVec = float4(2.0, 0.0, 0.0, 0.0);
						//}
						//else
						//{
						//	float2 motionVec = CalculateMotionVector (inputPass.positionCS, inputPass.previousPositionCS);
						//	EncodeMotionVector (motionVec * 0.5, outMotionVec);
						//	outMotionVec.zw = 1.0;
						//}
					#endif
					}

				#ifdef _DEPTHOFFSET_ON
					outputDepth = posInput.deviceDepth;
				#endif
				}

            ENDHLSL
        }
		  UsePass "Hidden/Nature/Terrain/Utilities/PICKING"
		  UsePass "Hidden/Nature/Terrain/Utilities/SELECTION"
		
    }
    FallBack "Hidden/InternalErrorShader"
	
	
}