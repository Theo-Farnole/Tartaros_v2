Shader "CTS/HDRP/CTS Terrain Shader Lite"
{
	/*CustomNodeUI:HDPBR*/
    Properties
    {
		_Geological_Tiling_Far("Geological_Tiling_Far", Range( 0 , 1000)) = 87
		_Geological_Tiling_Close("Geological_Tiling_Close", Range( 0 , 1000)) = 87
		_Geological_Map_Offset_Far("Geological_Map_Offset _Far", Range( 0 , 1)) = 1
		_Geological_Map_Offset_Close("Geological_Map_Offset _Close", Range( 0 , 1)) = 1
		_Geological_Map_Close_Power("Geological_Map_Close_Power", Range( 0 , 1)) = 0
		_Geological_Map_Far_Power("Geological_Map_Far_Power", Range( 0 , 1)) = 1
		_UV_Mix_Power("UV_Mix_Power", Range( 0.01 , 10)) = 4
		_UV_Mix_Start_Distance("UV_Mix_Start_Distance", Range( 0 , 100000)) = 400
		_Perlin_Normal_Tiling_Close("Perlin_Normal_Tiling_Close", Range( 0.01 , 1000)) = 40
		_Perlin_Normal_Tiling_Far("Perlin_Normal_Tiling_Far", Range( 0.01 , 1000)) = 40
		_Perlin_Normal_Power("Perlin_Normal_Power", Range( 0 , 10)) = 1
		_Perlin_Normal_Power_Close("Perlin_Normal_Power_Close", Range( 0 , 10)) = 0.5
		_Terrain_Smoothness("Terrain_Smoothness", Range( 0 , 2)) = 1
		_Terrain_Specular("Terrain_Specular", Range( 0 , 3)) = 1
		_Texture_1_Tiling("Texture_1_Tiling", Range( 0.0001 , 100)) = 15
		_Texture_2_Tiling("Texture_2_Tiling", Range( 0.0001 , 100)) = 15
		_Texture_3_Tiling("Texture_3_Tiling", Range( 0.0001 , 100)) = 15
		_Texture_4_Tiling("Texture_4_Tiling", Range( 0.0001 , 100)) = 15
		_Texture_5_Tiling("Texture_5_Tiling", Range( 0.0001 , 100)) = 15
		_Texture_6_Tiling("Texture_6_Tiling", Range( 0.0001 , 100)) = 15
		_Texture_7_Tiling("Texture_7_Tiling", Range( 0.0001 , 100)) = 15
		_Texture_8_Tiling("Texture_8_Tiling", Range( 0.0001 , 100)) = 15
		_Texture_9_Tiling("Texture_9_Tiling", Range( 0.0001 , 100)) = 15
		_Texture_10_Tiling("Texture_10_Tiling", Range( 0.0001 , 100)) = 15
		_Texture_11_Tiling("Texture_11_Tiling", Range( 0.0001 , 100)) = 15
		_Texture_12_Tiling("Texture_12_Tiling", Range( 0.0001 , 100)) = 15
		_Texture_13_Tiling("Texture_13_Tiling", Range( 0.0001 , 100)) = 15
		_Texture_14_Tiling("Texture_14_Tiling", Range( 0.0001 , 100)) = 15
		_Texture_15_Tiling("Texture_15_Tiling", Range( 0.0001 , 100)) = 15
		_Texture_16_Tiling("Texture_16_Tiling", Range( 0.0001 , 100)) = 15
		_Texture_1_Far_Multiplier("Texture_1_Far_Multiplier", Range( 0 , 10)) = 3
		_Texture_2_Far_Multiplier("Texture_2_Far_Multiplier", Range( 0 , 10)) = 3
		_Texture_3_Far_Multiplier("Texture_3_Far_Multiplier", Range( 0 , 10)) = 3
		_Texture_4_Far_Multiplier("Texture_4_Far_Multiplier", Range( 0 , 10)) = 3
		_Texture_5_Far_Multiplier("Texture_5_Far_Multiplier", Range( 0 , 10)) = 3
		_Texture_6_Far_Multiplier("Texture_6_Far_Multiplier", Range( 0 , 10)) = 3
		_Texture_7_Far_Multiplier("Texture_7_Far_Multiplier", Range( 0 , 10)) = 3
		_Texture_8_Far_Multiplier("Texture_8_Far_Multiplier", Range( 0 , 10)) = 3
		_Texture_9_Far_Multiplier("Texture_9_Far_Multiplier", Range( 0 , 10)) = 3
		_Texture_10_Far_Multiplier("Texture_10_Far_Multiplier", Range( 0 , 10)) = 3
		_Texture_11_Far_Multiplier("Texture_11_Far_Multiplier", Range( 0 , 10)) = 3
		_Texture_12_Far_Multiplier("Texture_12_Far_Multiplier", Range( 0 , 10)) = 3
		_Texture_13_Far_Multiplier("Texture_13_Far_Multiplier", Range( 0 , 10)) = 3
		_Texture_14_Far_Multiplier("Texture_14_Far_Multiplier", Range( 0 , 10)) = 3
		_Texture_15_Far_Multiplier("Texture_15_Far_Multiplier", Range( 0 , 10)) = 3
		_Texture_16_Far_Multiplier("Texture_16_Far_Multiplier", Range( 0 , 10)) = 3
		_Texture_1_Perlin_Power("Texture_1_Perlin_Power", Range( 0 , 1)) = 0
		_Texture_2_Perlin_Power("Texture_2_Perlin_Power", Range( 0 , 1)) = 0
		_Texture_3_Perlin_Power("Texture_3_Perlin_Power", Range( 0 , 1)) = 0
		_Texture_4_Perlin_Power("Texture_4_Perlin_Power", Range( 0 , 1)) = 0
		_Texture_5_Perlin_Power("Texture_5_Perlin_Power", Range( 0 , 1)) = 0
		_Texture_6_Perlin_Power("Texture_6_Perlin_Power", Range( 0 , 1)) = 0
		_Texture_7_Perlin_Power("Texture_7_Perlin_Power", Range( 0 , 1)) = 0
		_Texture_8_Perlin_Power("Texture_8_Perlin_Power", Range( 0 , 1)) = 0
		_Texture_9_Perlin_Power("Texture_9_Perlin_Power", Range( 0 , 1)) = 0
		_Texture_10_Perlin_Power("Texture_10_Perlin_Power", Range( 0 , 1)) = 0
		_Texture_11_Perlin_Power("Texture_11_Perlin_Power", Range( 0 , 1)) = 0
		_Texture_12_Perlin_Power("Texture_12_Perlin_Power", Range( 0 , 1)) = 0
		_Texture_13_Perlin_Power("Texture_13_Perlin_Power", Range( 0 , 1)) = 0
		_Texture_14_Perlin_Power("Texture_14_Perlin_Power", Range( 0 , 1)) = 0
		_Texture_15_Perlin_Power("Texture_15_Perlin_Power", Range( 0 , 1)) = 0
		_Texture_16_Perlin_Power("Texture_16_Perlin_Power", Range( 0 , 1)) = 0
		_Texture_1_Geological_Power("Texture_1_Geological_Power", Range( 0 , 5)) = 1
		_Texture_2_Geological_Power("Texture_2_Geological_Power", Range( 0 , 5)) = 1
		_Texture_3_Geological_Power("Texture_3_Geological_Power", Range( 0 , 5)) = 1
		_Texture_4_Geological_Power("Texture_4_Geological_Power", Range( 0 , 5)) = 1
		_Texture_5_Geological_Power("Texture_5_Geological_Power", Range( 0 , 5)) = 1
		_Texture_Array_Normal("Texture_Array_Normal", 2DArray ) = "" {}
		_Texture_6_Geological_Power("Texture_6_Geological_Power", Range( 0 , 5)) = 1
		_Texture_7_Geological_Power("Texture_7_Geological_Power", Range( 0 , 5)) = 1
		_Texture_8_Geological_Power("Texture_8_Geological_Power", Range( 0 , 5)) = 1
		_Texture_9_Geological_Power("Texture_9_Geological_Power", Range( 0 , 5)) = 1
		_Texture_10_Geological_Power("Texture_10_Geological_Power", Range( 0 , 5)) = 1
		_Texture_11_Geological_Power("Texture_11_Geological_Power", Range( 0 , 5)) = 1
		_Texture_12_Geological_Power("Texture_12_Geological_Power", Range( 0 , 5)) = 1
		_Texture_13_Geological_Power("Texture_13_Geological_Power", Range( 0 , 5)) = 1
		_Texture_14_Geological_Power("Texture_14_Geological_Power", Range( 0 , 5)) = 1
		_Texture_15_Geological_Power("Texture_15_Geological_Power", Range( 0 , 5)) = 1
		_Texture_16_Geological_Power("Texture_16_Geological_Power", Range( 0 , 5)) = 1
		_Texture_Array_Albedo("Texture_Array_Albedo", 2DArray ) = "" {}
		_Texture_Perlin_Normal_Index("Texture_Perlin_Normal_Index", Int) = -1
		_Texture_1_Normal_Power("Texture_1_Normal_Power", Range( 0 , 5)) = 1
		_Texture_2_Normal_Power("Texture_2_Normal_Power", Range( 0 , 5)) = 1
		_Texture_3_Normal_Power("Texture_3_Normal_Power", Range( 0 , 5)) = 1
		_Texture_4_Normal_Power("Texture_4_Normal_Power", Range( 0 , 5)) = 1
		_Texture_5_Normal_Power("Texture_5_Normal_Power", Range( 0 , 5)) = 1
		_Texture_6_Normal_Power("Texture_6_Normal_Power", Range( 0 , 5)) = 1
		_Texture_7_Normal_Power("Texture_7_Normal_Power", Range( 0 , 5)) = 1
		_Texture_8_Normal_Power("Texture_8_Normal_Power", Range( 0 , 5)) = 1
		_Texture_9_Normal_Power("Texture_9_Normal_Power", Range( 0 , 5)) = 1
		_Texture_10_Normal_Power("Texture_10_Normal_Power", Range( 0 , 5)) = 1
		_Texture_11_Normal_Power("Texture_11_Normal_Power", Range( 0 , 5)) = 1
		_Texture_12_Normal_Power("Texture_12_Normal_Power", Range( 0 , 5)) = 1
		_Texture_13_Normal_Power("Texture_13_Normal_Power", Range( 0 , 5)) = 1
		_Texture_14_Normal_Power("Texture_14_Normal_Power", Range( 0 , 5)) = 1
		_Texture_15_Normal_Power("Texture_15_Normal_Power", Range( 0 , 5)) = 1
		_Texture_16_Normal_Power("Texture_16_Normal_Power", Range( 0 , 5)) = 1
		_Texture_Splat_1("Texture_Splat_1", 2D) = "black" {}
		_Texture_Splat_2("Texture_Splat_2", 2D) = "black" {}
		_Texture_Splat_3("Texture_Splat_3", 2D) = "black" {}
		_Texture_Splat_4("Texture_Splat_4", 2D) = "black" {}
		_Ambient_Occlusion_Power("Ambient_Occlusion_Power", Range( 0 , 1)) = 1
		_Texture_Geological_Map("Texture_Geological_Map", 2D) = "white" {}
		_Texture_4_Color("Texture_4_Color", Vector) = (1,1,1,1)
		_Texture_16_Color("Texture_16_Color", Vector) = (1,1,1,1)
		_Texture_8_Color("Texture_8_Color", Vector) = (1,1,1,1)
		_Texture_7_Color("Texture_7_Color", Vector) = (1,1,1,1)
		_Texture_6_Color("Texture_6_Color", Vector) = (1,1,1,1)
		_Texture_5_Color("Texture_5_Color", Vector) = (1,1,1,1)
		_Texture_2_Color("Texture_2_Color", Vector) = (1,1,1,1)
		_Texture_3_Color("Texture_3_Color", Vector) = (1,1,1,1)
		_Texture_13_Color("Texture_13_Color", Vector) = (1,1,1,1)
		_Texture_15_Color("Texture_15_Color", Vector) = (1,1,1,1)
		_Texture_14_Color("Texture_14_Color", Vector) = (1,1,1,1)
		_Texture_9_Color("Texture_9_Color", Vector) = (1,1,1,1)
		_Texture_12_Color("Texture_12_Color", Vector) = (1,1,1,1)
		_Texture_11_Color("Texture_11_Color", Vector) = (1,1,1,1)
		_Texture_10_Color("Texture_10_Color", Vector) = (1,1,1,1)
		_Texture_1_Color("Texture_1_Color", Vector) = (1,1,1,1)
		_Texture_1_Albedo_Index("Texture_1_Albedo_Index", Range( -1 , 100)) = -1
		_Texture_1_Normal_Index("Texture_1_Normal_Index", Range( -1 , 100)) = -1
		_Texture_2_Albedo_Index("Texture_2_Albedo_Index", Range( -1 , 100)) = -1
		_Texture_3_Albedo_Index("Texture_3_Albedo_Index", Range( -1 , 100)) = -1
		_Texture_3_Normal_Index("Texture_3_Normal_Index", Range( -1 , 100)) = -1
		_Texture_4_Albedo_Index("Texture_4_Albedo_Index", Range( -1 , 100)) = -1
		_Texture_4_Normal_Index("Texture_4_Normal_Index", Range( -1 , 100)) = -1
		_Texture_5_Albedo_Index("Texture_5_Albedo_Index", Range( -1 , 100)) = -1
		_Texture_5_Normal_Index("Texture_5_Normal_Index", Range( -1 , 100)) = -1
		_Texture_6_Normal_Index("Texture_6_Normal_Index", Range( -1 , 100)) = -1
		_Texture_6_Albedo_Index("Texture_6_Albedo_Index", Range( -1 , 100)) = -1
		_Texture_7_Normal_Index("Texture_7_Normal_Index", Range( -1 , 100)) = -1
		_Texture_8_Albedo_Index("Texture_8_Albedo_Index", Range( -1 , 100)) = -1
		_Texture_2_Normal_Index("Texture_2_Normal_Index", Range( -1 , 100)) = -1
		_Texture_8_Normal_Index("Texture_8_Normal_Index", Range( -1 , 100)) = -1
		_Texture_16_Normal_Index("Texture_16_Normal_Index", Range( -1 , 100)) = -1
		_Texture_15_Normal_Index("Texture_15_Normal_Index", Range( -1 , 100)) = -1
		_Texture_15_Albedo_Index("Texture_15_Albedo_Index", Range( -1 , 100)) = -1
		_Texture_7_Albedo_Index("Texture_7_Albedo_Index", Range( -1 , 100)) = -1
		_Texture_14_Normal_Index("Texture_14_Normal_Index", Range( -1 , 100)) = -1
		_Texture_13_Normal_Index("Texture_13_Normal_Index", Range( -1 , 100)) = -1
		_Texture_14_Albedo_Index("Texture_14_Albedo_Index", Range( -1 , 100)) = -1
		_Texture_13_Albedo_Index("Texture_13_Albedo_Index", Range( -1 , 100)) = -1
		_Texture_12_Normal_Index("Texture_12_Normal_Index", Range( -1 , 100)) = -1
		_Texture_12_Albedo_Index("Texture_12_Albedo_Index", Range( -1 , 100)) = -1
		_Texture_11_Normal_Index("Texture_11_Normal_Index", Range( -1 , 100)) = -1
		_Texture_11_Albedo_Index("Texture_11_Albedo_Index", Range( -1 , 100)) = -1
		_Texture_10_Normal_Index("Texture_10_Normal_Index", Range( -1 , 100)) = -1
		_Texture_10_Albedo_Index("Texture_10_Albedo_Index", Range( -1 , 100)) = -1
		_Texture_9_Normal_Index("Texture_9_Normal_Index", Range( -1 , 100)) = -1
		_Texture_9_Albedo_Index("Texture_9_Albedo_Index", Range( -1 , 100)) = -1
		_Texture_16_Albedo_Index("Texture_16_Albedo_Index", Range( -1 , 100)) = -1
    }

    SubShader
    {
		
        Tags { "RenderPipeline"="HDRenderPipeline" "RenderType"="Opaque" "Queue"="Geometry" }
        
		Cull Back
		Blend One Zero
		ZTest LEqual
		ZWrite On
		ZClip [_ZClip]

		HLSLINCLUDE
		#pragma target 4.5
		#pragma only_renderers d3d11 ps4 xboxone vulkan metal switch
		#pragma multi_compile_instancing
		#pragma instancing_options renderinglayer
		#pragma multi_compile _ LOD_FADE_CROSSFADE

		struct GlobalSurfaceDescription
		{
			//Standard
			float3 Albedo;
			float3 Normal;
			float3 Specular;
			float Metallic;
			float3 Emission;
			float Smoothness;
			float Occlusion;
			float Alpha;
			float AlphaClipThreshold;
			float CoatMask;
			//SSS
			float DiffusionProfile;
			float SubsurfaceMask;
			//Transmission
			float Thickness;
			// Anisotropic
			float3 TangentWS;
			float Anisotropy; 
			//Iridescence
			float IridescenceThickness;
			float IridescenceMask;
			// Transparency
			float IndexOfRefraction;
			float3 TransmittanceColor;
			float TransmittanceAbsorptionDistance;
			float TransmittanceMask;
		};

		struct AlphaSurfaceDescription
		{
			float Alpha;
			float AlphaClipThreshold;
		};

		ENDHLSL
		
        Pass
        {
			
            Name "GBuffer"
            Tags { "LightMode"="GBuffer" }    
			Stencil
			{
				Ref 2
				WriteMask 7
				Comp Always
				Pass Replace
				Fail Keep
				ZFail Keep
			}

     
            HLSLPROGRAM
        	//#define UNITY_MATERIAL_LIT
			#pragma vertex Vert
			#pragma fragment Frag
			
			#define ASE_SRP_VERSION 50702
			#define _MATERIAL_FEATURE_SPECULAR_COLOR 1
			#define _NORMALMAP 1
			#pragma instancing_options assumeuniformscaling nomatrices nolightprobe nolightmap
			#include "TerrainVertexCTSHD.hlsl"

		
        
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/NormalSurfaceGradient.hlsl"        
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/FragInputs.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"
        
            #define SHADERPASS SHADERPASS_GBUFFER
            #pragma multi_compile _ LIGHTMAP_ON
            #pragma multi_compile _ DIRLIGHTMAP_COMBINED
            #pragma multi_compile _ DYNAMICLIGHTMAP_ON
            #pragma multi_compile _ SHADOWS_SHADOWMASK
			#pragma multi_compile DECALS_OFF DECALS_3RT DECALS_4RT
			#pragma multi_compile _ LIGHT_LAYERS
            #define ATTRIBUTES_NEED_NORMAL
            #define ATTRIBUTES_NEED_TANGENT
            #define ATTRIBUTES_NEED_TEXCOORD1
            #define ATTRIBUTES_NEED_TEXCOORD2
            #define VARYINGS_NEED_POSITION_WS
            #define VARYINGS_NEED_TANGENT_TO_WORLD
            #define VARYINGS_NEED_TEXCOORD1
            #define VARYINGS_NEED_TEXCOORD2
        
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Material.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/Lit.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/BuiltinUtilities.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/MaterialUtilities.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Decal/DecalUtilities.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/LitDecalData.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphFunctions.hlsl"

            struct AttributesMesh 
			{
                float4 positionOS : POSITION;
                float3 normalOS : NORMAL;
                float4 tangentOS : TANGENT;
                float4 uv1 : TEXCOORD1;
                float4 uv2 : TEXCOORD2;
				float4 ase_texcoord : TEXCOORD0;
				#if UNITY_ANY_INSTANCING_ENABLED
				uint instanceID : INSTANCEID_SEMANTIC;
				#endif
            };

            struct PackedVaryingsMeshToPS 
			{
                float4 positionCS : SV_Position;
                float3 interp00 : TEXCOORD0;
                float3 interp01 : TEXCOORD1;
                float4 interp02 : TEXCOORD2;
                float4 interp03 : TEXCOORD3;
				float4 interp04 : TEXCOORD4;
				float4 ase_texcoord5 : TEXCOORD5;
				#if UNITY_ANY_INSTANCING_ENABLED
				uint instanceID : INSTANCEID_SEMANTIC;
				#endif
            };
        
			sampler2D _Texture_Splat_4;
			sampler2D _Texture_Splat_3;
			sampler2D _Texture_Splat_2;
			sampler2D _Texture_Splat_1;
			half _Texture_1_Albedo_Index;
			TEXTURE2D_ARRAY( _Texture_Array_Albedo );
			uniform SAMPLER( sampler_Texture_Array_Albedo );
			float _Texture_1_Tiling;
			half _Texture_1_Far_Multiplier;
			half _UV_Mix_Start_Distance;
			half _UV_Mix_Power;
			half4 _Texture_1_Color;
			float _Texture_2_Albedo_Index;
			half _Texture_2_Tiling;
			half _Texture_2_Far_Multiplier;
			half4 _Texture_2_Color;
			float _Texture_3_Albedo_Index;
			half _Texture_3_Tiling;
			half _Texture_3_Far_Multiplier;
			half4 _Texture_3_Color;
			float _Texture_4_Albedo_Index;
			half _Texture_4_Tiling;
			half _Texture_4_Far_Multiplier;
			half4 _Texture_4_Color;
			float _Texture_5_Albedo_Index;
			half _Texture_5_Tiling;
			half _Texture_5_Far_Multiplier;
			half4 _Texture_5_Color;
			float _Texture_6_Albedo_Index;
			half _Texture_6_Tiling;
			half _Texture_6_Far_Multiplier;
			half4 _Texture_6_Color;
			float _Texture_7_Albedo_Index;
			half _Texture_7_Tiling;
			half _Texture_7_Far_Multiplier;
			half4 _Texture_7_Color;
			float _Texture_8_Albedo_Index;
			half _Texture_8_Tiling;
			half _Texture_8_Far_Multiplier;
			half4 _Texture_8_Color;
			half _Texture_9_Albedo_Index;
			half _Texture_9_Tiling;
			half _Texture_9_Far_Multiplier;
			half4 _Texture_9_Color;
			half _Texture_10_Albedo_Index;
			half _Texture_10_Tiling;
			half _Texture_10_Far_Multiplier;
			half4 _Texture_10_Color;
			half _Texture_11_Albedo_Index;
			half _Texture_11_Tiling;
			half _Texture_11_Far_Multiplier;
			half4 _Texture_11_Color;
			half _Texture_12_Albedo_Index;
			half _Texture_12_Tiling;
			half _Texture_12_Far_Multiplier;
			half4 _Texture_12_Color;
			half _Texture_13_Albedo_Index;
			half _Texture_13_Tiling;
			half _Texture_13_Far_Multiplier;
			half4 _Texture_13_Color;
			half _Texture_14_Albedo_Index;
			half _Texture_14_Tiling;
			half _Texture_14_Far_Multiplier;
			half4 _Texture_14_Color;
			half _Texture_15_Albedo_Index;
			half _Texture_15_Tiling;
			half _Texture_15_Far_Multiplier;
			half4 _Texture_15_Color;
			half _Texture_16_Albedo_Index;
			half _Texture_16_Tiling;
			half _Texture_16_Far_Multiplier;
			half4 _Texture_16_Color;
			half _Geological_Map_Close_Power;
			sampler2D _Texture_Geological_Map;
			half _Geological_Map_Offset_Close;
			half _Geological_Tiling_Close;
			half _Geological_Map_Far_Power;
			half _Geological_Tiling_Far;
			half _Geological_Map_Offset_Far;
			half _Texture_16_Geological_Power;
			half _Texture_15_Geological_Power;
			half _Texture_14_Geological_Power;
			half _Texture_13_Geological_Power;
			half _Texture_12_Geological_Power;
			half _Texture_11_Geological_Power;
			half _Texture_10_Geological_Power;
			half _Texture_9_Geological_Power;
			half _Texture_8_Geological_Power;
			half _Texture_7_Geological_Power;
			half _Texture_6_Geological_Power;
			half _Texture_5_Geological_Power;
			half _Texture_1_Geological_Power;
			half _Texture_2_Geological_Power;
			half _Texture_4_Geological_Power;
			half _Texture_3_Geological_Power;
			TEXTURE2D_ARRAY( _Texture_Array_Normal );
			uniform SAMPLER( sampler_Texture_Array_Normal );
			half _Perlin_Normal_Tiling_Close;
			int _Texture_Perlin_Normal_Index;
			half _Perlin_Normal_Power_Close;
			half _Perlin_Normal_Tiling_Far;
			half _Perlin_Normal_Power;
			float _Texture_16_Perlin_Power;
			float _Texture_15_Perlin_Power;
			float _Texture_14_Perlin_Power;
			float _Texture_13_Perlin_Power;
			float _Texture_12_Perlin_Power;
			float _Texture_11_Perlin_Power;
			float _Texture_10_Perlin_Power;
			float _Texture_9_Perlin_Power;
			float _Texture_8_Perlin_Power;
			float _Texture_7_Perlin_Power;
			float _Texture_6_Perlin_Power;
			float _Texture_5_Perlin_Power;
			float _Texture_1_Perlin_Power;
			float _Texture_2_Perlin_Power;
			float _Texture_4_Perlin_Power;
			float _Texture_3_Perlin_Power;
			half _Texture_1_Normal_Index;
			half _Texture_1_Normal_Power;
			float _Texture_2_Normal_Index;
			half _Texture_2_Normal_Power;
			float _Texture_3_Normal_Index;
			half _Texture_3_Normal_Power;
			float _Texture_4_Normal_Index;
			half _Texture_4_Normal_Power;
			float _Texture_5_Normal_Index;
			half _Texture_5_Normal_Power;
			float _Texture_6_Normal_Index;
			half _Texture_6_Normal_Power;
			float _Texture_7_Normal_Index;
			half _Texture_7_Normal_Power;
			float _Texture_8_Normal_Index;
			half _Texture_8_Normal_Power;
			half _Texture_9_Normal_Index;
			half _Texture_9_Normal_Power;
			half _Texture_10_Normal_Index;
			half _Texture_10_Normal_Power;
			half _Texture_11_Normal_Index;
			half _Texture_11_Normal_Power;
			half _Texture_12_Normal_Index;
			half _Texture_12_Normal_Power;
			half _Texture_13_Normal_Index;
			half _Texture_13_Normal_Power;
			half _Texture_14_Normal_Index;
			half _Texture_14_Normal_Power;
			half _Texture_15_Normal_Index;
			half _Texture_15_Normal_Power;
			half _Texture_16_Normal_Index;
			half _Texture_16_Normal_Power;
			half _Terrain_Specular;
			half _Terrain_Smoothness;
			half _Ambient_Occlusion_Power;
			
			
			void BuildSurfaceData ( FragInputs fragInputs, GlobalSurfaceDescription surfaceDescription, float3 V, PositionInputs posInput, out SurfaceData surfaceData )
			{
				ZERO_INITIALIZE ( SurfaceData, surfaceData );

				float3 normalTS = float3( 0.0f, 0.0f, 1.0f );
				normalTS = surfaceDescription.Normal;
				float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
				GetNormalWS ( fragInputs, normalTS, surfaceData.normalWS ,doubleSidedConstants);

				surfaceData.ambientOcclusion = 1.0f;

				surfaceData.baseColor = surfaceDescription.Albedo;
				surfaceData.perceptualSmoothness = surfaceDescription.Smoothness;
				surfaceData.ambientOcclusion = surfaceDescription.Occlusion;

				surfaceData.materialFeatures = MATERIALFEATUREFLAGS_LIT_STANDARD;

#ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
				surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SPECULAR_COLOR;
				surfaceData.specularColor = surfaceDescription.Specular;
#else
				surfaceData.metallic = surfaceDescription.Metallic;
#endif

#if defined(_MATERIAL_FEATURE_SUBSURFACE_SCATTERING) || defined(_MATERIAL_FEATURE_TRANSMISSION)
				surfaceData.diffusionProfileHash = asuint (surfaceDescription.DiffusionProfile);
#endif

#ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
				surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SUBSURFACE_SCATTERING;
				surfaceData.subsurfaceMask = surfaceDescription.SubsurfaceMask;
#else
				surfaceData.subsurfaceMask = 1.0f;
#endif

#ifdef _MATERIAL_FEATURE_TRANSMISSION
				surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
				surfaceData.thickness = surfaceDescription.Thickness;
#endif

				surfaceData.tangentWS = normalize ( fragInputs.worldToTangent[ 0 ].xyz );
				surfaceData.tangentWS = Orthonormalize ( surfaceData.tangentWS, surfaceData.normalWS );

#ifdef _MATERIAL_FEATURE_ANISOTROPY
				surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_ANISOTROPY;
				surfaceData.anisotropy = surfaceDescription.Anisotropy;

#else
				surfaceData.anisotropy = 0;
#endif

#ifdef _MATERIAL_FEATURE_CLEAR_COAT
				surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_CLEAR_COAT;
				surfaceData.coatMask = surfaceDescription.CoatMask;
#else
				surfaceData.coatMask = 0.0f;
#endif

#ifdef _MATERIAL_FEATURE_IRIDESCENCE
				surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_IRIDESCENCE;
				surfaceData.iridescenceThickness = surfaceDescription.IridescenceThickness;
				surfaceData.iridescenceMask = surfaceDescription.IridescenceMask;
#else
				surfaceData.iridescenceThickness = 0.0;
				surfaceData.iridescenceMask = 1.0;
#endif

				//ASE CUSTOM TAG
#ifdef _MATERIAL_FEATURE_TRANSPARENCY
				surfaceData.ior = surfaceDescription.IndexOfRefraction;
				surfaceData.transmittanceColor = surfaceDescription.TransmittanceColor;
				surfaceData.atDistance = surfaceDescription.TransmittanceAbsorptionDistance;
				surfaceData.transmittanceMask = surfaceDescription.TransmittanceMask;
#else
				surfaceData.ior = 1.0;
				surfaceData.transmittanceColor = float3( 1.0, 1.0, 1.0 );
				surfaceData.atDistance = 1000000.0;
				surfaceData.transmittanceMask = 0.0;
#endif

				surfaceData.specularOcclusion = 1.0;

#if defined(_BENTNORMALMAP) && defined(_ENABLESPECULAROCCLUSION)
				surfaceData.specularOcclusion = GetSpecularOcclusionFromBentAO ( V, bentNormalWS, surfaceData );
#elif defined(_MASKMAP)
				surfaceData.specularOcclusion = GetSpecularOcclusionFromAmbientOcclusion ( NdotV, surfaceData.ambientOcclusion, PerceptualSmoothnessToRoughness ( surfaceData.perceptualSmoothness ) );
#endif
#if HAVE_DECALS
				if (_EnableDecals)
				{
					DecalSurfaceData decalSurfaceData = GetDecalSurfaceData (posInput, surfaceDescription.Alpha);
					ApplyDecalToSurfaceData (decalSurfaceData, surfaceData);
				}
#endif
			}

            void GetSurfaceAndBuiltinData( GlobalSurfaceDescription surfaceDescription , FragInputs fragInputs, float3 V, inout PositionInputs posInput, out SurfaceData surfaceData, out BuiltinData builtinData)
            {
        
#if _ALPHATEST_ON
				DoAlphaTest ( surfaceDescription.Alpha, surfaceDescription.AlphaClipThreshold );
#endif
				BuildSurfaceData( fragInputs, surfaceDescription, V, posInput, surfaceData );
        
                // Builtin Data
                // For back lighting we use the oposite vertex normal 
				 InitBuiltinData(surfaceDescription.Alpha, surfaceData.normalWS, -fragInputs.worldToTangent[2], posInput.positionWS, fragInputs.texCoord1, fragInputs.texCoord2, builtinData);
        
				builtinData.emissiveColor =             surfaceDescription.Emission;
                builtinData.distortion =                float2(0.0, 0.0);           // surfaceDescription.Distortion -- if distortion pass
                builtinData.distortionBlur =            0.0;                        // surfaceDescription.DistortionBlur -- if distortion pass
                builtinData.depthOffset =               0.0;                        // ApplyPerPixelDisplacement(input, V, layerTexCoord, blendMasks); #ifdef _DEPTHOFFSET_ON : ApplyDepthOffsetPositionInput(V, depthOffset, GetWorldToHClipMatrix(), posInput);
        
                PostInitBuiltinData(V, posInput, surfaceData, builtinData);            
            }
        
			PackedVaryingsMeshToPS Vert ( AttributesMesh inputMesh  )
			{
				PackedVaryingsMeshToPS outputPackedVaryingsMeshToPS;

				UNITY_SETUP_INSTANCE_ID ( inputMesh );
				UNITY_TRANSFER_INSTANCE_ID ( inputMesh, outputPackedVaryingsMeshToPS );
				TerrainInstancingUV(inputMesh.positionOS, inputMesh.normalOS, inputMesh.tangentOS, inputMesh.ase_texcoord.xy);
				#if UNITY_ANY_INSTANCING_ENABLED
				outputPackedVaryingsMeshToPS.instanceID = inputMesh.instanceID;
				#endif

				outputPackedVaryingsMeshToPS.ase_texcoord5.xy = inputMesh.ase_texcoord.xy;
				
				//setting value to unused interpolator channels and avoid initialization warnings
				outputPackedVaryingsMeshToPS.ase_texcoord5.zw = 0;
				float3 vertexValue =  float3( 0, 0, 0 ) ;
				#ifdef ASE_ABSOLUTE_VERTEX_POS
				inputMesh.positionOS.xyz = vertexValue;
				#else
				inputMesh.positionOS.xyz += vertexValue;
				#endif

				inputMesh.normalOS =  inputMesh.normalOS ;

				float3 positionRWS = TransformObjectToWorld ( inputMesh.positionOS.xyz );
				float3 normalWS = TransformObjectToWorldNormal ( inputMesh.normalOS );
				float4 tangentWS = float4( TransformObjectToWorldDir ( inputMesh.tangentOS.xyz ), inputMesh.tangentOS.w );
				float4 positionCS = TransformWorldToHClip ( positionRWS );

				outputPackedVaryingsMeshToPS.positionCS = positionCS;
				outputPackedVaryingsMeshToPS.interp00.xyz = positionRWS;
				outputPackedVaryingsMeshToPS.interp01.xyz = normalWS;
				outputPackedVaryingsMeshToPS.interp02.xyzw = tangentWS;
				outputPackedVaryingsMeshToPS.interp03 = inputMesh.uv1;
				outputPackedVaryingsMeshToPS.interp04 = inputMesh.uv2;
			
				return outputPackedVaryingsMeshToPS;
			}

			void Frag ( PackedVaryingsMeshToPS packedInput, 
						OUTPUT_GBUFFER ( outGBuffer )
						#ifdef _DEPTHOFFSET_ON
						, out float outputDepth : SV_Depth
						#endif
						 
						)
			{
				FragInputs input;
				ZERO_INITIALIZE ( FragInputs, input );
				input.worldToTangent = k_identity3x3;
				
				float3 positionRWS = packedInput.interp00.xyz;
				float3 normalWS = packedInput.interp01.xyz;
				float4 tangentWS = packedInput.interp02.xyzw;
			
				input.positionSS = packedInput.positionCS;
				input.positionRWS = positionRWS;
				input.worldToTangent = BuildWorldToTangent ( tangentWS, normalWS );
				input.texCoord1 = packedInput.interp03;
				input.texCoord2 = packedInput.interp04;

				// input.positionSS is SV_Position
				PositionInputs posInput = GetPositionInput ( input.positionSS.xy, _ScreenSize.zw, input.positionSS.z, input.positionSS.w, input.positionRWS );

				float3 normalizedWorldViewDir = GetWorldSpaceNormalizeViewDir ( input.positionRWS );

				SurfaceData surfaceData;
				BuiltinData builtinData;

				GlobalSurfaceDescription surfaceDescription = ( GlobalSurfaceDescription ) 0;
				float2 uv02588 = packedInput.ase_texcoord5.xy * float2( 1,1 ) + float2( 0,0 );
				float4 tex2DNode4371 = tex2D( _Texture_Splat_4, uv02588 );
				float4 tex2DNode4370 = tex2D( _Texture_Splat_3, uv02588 );
				float4 tex2DNode4369 = tex2D( _Texture_Splat_2, uv02588 );
				float4 tex2DNode4368 = tex2D( _Texture_Splat_1, uv02588 );
				float3 ase_worldPos = GetAbsolutePositionWS( positionRWS );
				float3 break6348 = ase_worldPos;
				float2 appendResult6281 = (float2(break6348.x , break6348.z));
				half2 Top_Bottom1999 = appendResult6281;
				float temp_output_3830_0 = ( 1.0 / _Texture_1_Tiling );
				float2 appendResult3284 = (float2(temp_output_3830_0 , temp_output_3830_0));
				float2 temp_output_3275_0 = ( Top_Bottom1999 * appendResult3284 );
				float4 texArray3287 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, temp_output_3275_0, _Texture_1_Albedo_Index );
				float4 texArray3293 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, ( temp_output_3275_0 / _Texture_1_Far_Multiplier ), _Texture_1_Albedo_Index );
				float3 break6201 = abs( ( ase_worldPos - _WorldSpaceCameraPos ) );
				float clampResult297 = clamp( pow( ( max( max( break6201.x , break6201.y ) , break6201.z ) / _UV_Mix_Start_Distance ) , _UV_Mix_Power ) , 0.0 , 1.0 );
				half UVmixDistance636 = clampResult297;
				float4 lerpResult5739 = lerp( texArray3287 , texArray3293 , UVmixDistance636);
				float4 ifLocalVar6174 = 0;
				UNITY_BRANCH 
				if( _Texture_1_Albedo_Index > -1.0 )
				ifLocalVar6174 = ( lerpResult5739 * _Texture_1_Color );
				half4 Texture_1_Final950 = ifLocalVar6174;
				float temp_output_3831_0 = ( 1.0 / _Texture_2_Tiling );
				float2 appendResult3349 = (float2(temp_output_3831_0 , temp_output_3831_0));
				float2 temp_output_3343_0 = ( Top_Bottom1999 * appendResult3349 );
				float4 texArray3338 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, temp_output_3343_0, _Texture_2_Albedo_Index );
				float4 texArray3339 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, ( temp_output_3343_0 / _Texture_2_Far_Multiplier ), _Texture_2_Albedo_Index );
				float4 lerpResult5749 = lerp( texArray3338 , texArray3339 , UVmixDistance636);
				float4 ifLocalVar6128 = 0;
				UNITY_BRANCH 
				if( _Texture_2_Albedo_Index > -1.0 )
				ifLocalVar6128 = ( lerpResult5749 * _Texture_2_Color );
				half4 Texture_2_Final3385 = ifLocalVar6128;
				float temp_output_3832_0 = ( 1.0 / _Texture_3_Tiling );
				float2 appendResult3415 = (float2(temp_output_3832_0 , temp_output_3832_0));
				float2 temp_output_3410_0 = ( Top_Bottom1999 * appendResult3415 );
				float4 texArray3405 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, temp_output_3410_0, _Texture_3_Albedo_Index );
				float4 texArray3406 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, ( temp_output_3410_0 / _Texture_3_Far_Multiplier ), _Texture_3_Albedo_Index );
				float4 lerpResult5759 = lerp( texArray3405 , texArray3406 , UVmixDistance636);
				float4 ifLocalVar6130 = 0;
				UNITY_BRANCH 
				if( _Texture_3_Albedo_Index > -1.0 )
				ifLocalVar6130 = ( lerpResult5759 * _Texture_3_Color );
				half4 Texture_3_Final3451 = ifLocalVar6130;
				float2 temp_output_3477_0 = ( Top_Bottom1999 * ( 1.0 / _Texture_4_Tiling ) );
				float4 texArray3472 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, temp_output_3477_0, _Texture_4_Albedo_Index );
				float4 texArray3473 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, ( temp_output_3477_0 / _Texture_4_Far_Multiplier ), _Texture_4_Albedo_Index );
				float4 lerpResult5761 = lerp( texArray3472 , texArray3473 , UVmixDistance636);
				float4 ifLocalVar6132 = 0;
				UNITY_BRANCH 
				if( _Texture_4_Albedo_Index > -1.0 )
				ifLocalVar6132 = ( lerpResult5761 * _Texture_4_Color );
				half4 Texture_4_Final3518 = ifLocalVar6132;
				float4 layeredBlendVar5643 = tex2DNode4368;
				float4 layeredBlend5643 = ( lerp( lerp( lerp( lerp( float4( 0,0,0,0 ) , Texture_1_Final950 , layeredBlendVar5643.x ) , Texture_2_Final3385 , layeredBlendVar5643.y ) , Texture_3_Final3451 , layeredBlendVar5643.z ) , Texture_4_Final3518 , layeredBlendVar5643.w ) );
				float temp_output_4397_0 = ( 1.0 / _Texture_5_Tiling );
				float2 appendResult4399 = (float2(temp_output_4397_0 , temp_output_4397_0));
				float2 temp_output_4416_0 = ( Top_Bottom1999 * appendResult4399 );
				float4 texArray4450 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, temp_output_4416_0, _Texture_5_Albedo_Index );
				float4 texArray4445 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, ( temp_output_4416_0 / _Texture_5_Far_Multiplier ), _Texture_5_Albedo_Index );
				float4 lerpResult5789 = lerp( texArray4450 , texArray4445 , UVmixDistance636);
				float4 ifLocalVar6134 = 0;
				UNITY_BRANCH 
				if( _Texture_5_Albedo_Index > -1.0 )
				ifLocalVar6134 = ( lerpResult5789 * _Texture_5_Color );
				half4 Texture_5_Final4396 = ifLocalVar6134;
				float temp_output_4469_0 = ( 1.0 / _Texture_6_Tiling );
				float2 appendResult4471 = (float2(temp_output_4469_0 , temp_output_4469_0));
				float2 temp_output_4485_0 = ( Top_Bottom1999 * appendResult4471 );
				float4 texArray4517 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, temp_output_4485_0, _Texture_6_Albedo_Index );
				float4 texArray4512 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, ( temp_output_4485_0 / _Texture_6_Far_Multiplier ), _Texture_6_Albedo_Index );
				float4 lerpResult5794 = lerp( texArray4517 , texArray4512 , UVmixDistance636);
				float4 ifLocalVar6136 = 0;
				UNITY_BRANCH 
				if( _Texture_6_Albedo_Index > -1.0 )
				ifLocalVar6136 = ( lerpResult5794 * _Texture_6_Color );
				half4 Texture_6_Final4536 = ifLocalVar6136;
				float temp_output_4543_0 = ( 1.0 / _Texture_7_Tiling );
				float2 appendResult4545 = (float2(temp_output_4543_0 , temp_output_4543_0));
				float2 temp_output_4559_0 = ( Top_Bottom1999 * appendResult4545 );
				float4 texArray4591 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, temp_output_4559_0, _Texture_7_Albedo_Index );
				float4 texArray4586 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, ( temp_output_4559_0 / _Texture_7_Far_Multiplier ), _Texture_7_Albedo_Index );
				float4 lerpResult5798 = lerp( texArray4591 , texArray4586 , UVmixDistance636);
				float4 ifLocalVar6139 = 0;
				UNITY_BRANCH 
				if( _Texture_7_Albedo_Index > -1.0 )
				ifLocalVar6139 = ( lerpResult5798 * _Texture_7_Color );
				half4 Texture_7_Final4614 = ifLocalVar6139;
				float temp_output_4617_0 = ( 1.0 / _Texture_8_Tiling );
				float2 appendResult4619 = (float2(temp_output_4617_0 , temp_output_4617_0));
				float2 temp_output_4633_0 = ( Top_Bottom1999 * appendResult4619 );
				float4 texArray4665 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, temp_output_4633_0, _Texture_8_Albedo_Index );
				float4 texArray4660 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, ( temp_output_4633_0 / _Texture_8_Far_Multiplier ), _Texture_8_Albedo_Index );
				float4 lerpResult5802 = lerp( texArray4665 , texArray4660 , UVmixDistance636);
				float4 ifLocalVar6141 = 0;
				UNITY_BRANCH 
				if( _Texture_8_Albedo_Index > -1.0 )
				ifLocalVar6141 = ( lerpResult5802 * _Texture_8_Color );
				half4 Texture_8_Final4689 = ifLocalVar6141;
				float4 layeredBlendVar5644 = tex2DNode4369;
				float4 layeredBlend5644 = ( lerp( lerp( lerp( lerp( layeredBlend5643 , Texture_5_Final4396 , layeredBlendVar5644.x ) , Texture_6_Final4536 , layeredBlendVar5644.y ) , Texture_7_Final4614 , layeredBlendVar5644.z ) , Texture_8_Final4689 , layeredBlendVar5644.w ) );
				float temp_output_4703_0 = ( 1.0 / _Texture_9_Tiling );
				float2 appendResult4736 = (float2(temp_output_4703_0 , temp_output_4703_0));
				float2 temp_output_4712_0 = ( Top_Bottom1999 * appendResult4736 );
				float4 texArray4723 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, temp_output_4712_0, _Texture_9_Albedo_Index );
				float4 texArray4889 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, ( temp_output_4712_0 / _Texture_9_Far_Multiplier ), _Texture_9_Albedo_Index );
				float4 lerpResult5845 = lerp( texArray4723 , texArray4889 , UVmixDistance636);
				float4 ifLocalVar6143 = 0;
				UNITY_BRANCH 
				if( _Texture_9_Albedo_Index > -1.0 )
				ifLocalVar6143 = ( lerpResult5845 * _Texture_9_Color );
				half4 Texture_9_Final4987 = ifLocalVar6143;
				float temp_output_4734_0 = ( 1.0 / _Texture_10_Tiling );
				float2 appendResult4738 = (float2(temp_output_4734_0 , temp_output_4734_0));
				float2 temp_output_4793_0 = ( Top_Bottom1999 * appendResult4738 );
				float4 texArray4899 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, temp_output_4793_0, _Texture_10_Albedo_Index );
				float4 texArray4913 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, ( temp_output_4793_0 / _Texture_10_Far_Multiplier ), _Texture_10_Albedo_Index );
				float4 lerpResult5841 = lerp( texArray4899 , texArray4913 , UVmixDistance636);
				float4 ifLocalVar6145 = 0;
				UNITY_BRANCH 
				if( _Texture_10_Albedo_Index > -1.0 )
				ifLocalVar6145 = ( lerpResult5841 * _Texture_10_Color );
				half4 Texture_10_Final4994 = ifLocalVar6145;
				float temp_output_4739_0 = ( 1.0 / _Texture_11_Tiling );
				float2 appendResult4741 = (float2(temp_output_4739_0 , temp_output_4739_0));
				float2 temp_output_4817_0 = ( Top_Bottom1999 * appendResult4741 );
				float4 texArray4928 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, temp_output_4817_0, _Texture_11_Albedo_Index );
				float4 texArray4923 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, ( temp_output_4817_0 / _Texture_11_Far_Multiplier ), _Texture_11_Albedo_Index );
				float4 lerpResult5837 = lerp( texArray4928 , texArray4923 , UVmixDistance636);
				float4 ifLocalVar6147 = 0;
				UNITY_BRANCH 
				if( _Texture_11_Albedo_Index > -1.0 )
				ifLocalVar6147 = ( lerpResult5837 * _Texture_11_Color );
				half4 Texture_11_Final4996 = ifLocalVar6147;
				float temp_output_4745_0 = ( 1.0 / _Texture_12_Tiling );
				float2 appendResult4751 = (float2(temp_output_4745_0 , temp_output_4745_0));
				float2 temp_output_4849_0 = ( Top_Bottom1999 * appendResult4751 );
				float4 texArray4954 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, temp_output_4849_0, _Texture_12_Albedo_Index );
				float4 texArray4952 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, ( temp_output_4849_0 / _Texture_12_Far_Multiplier ), _Texture_12_Albedo_Index );
				float4 lerpResult5833 = lerp( texArray4954 , texArray4952 , UVmixDistance636);
				float4 ifLocalVar6169 = 0;
				UNITY_BRANCH 
				if( _Texture_12_Albedo_Index > -1.0 )
				ifLocalVar6169 = ( lerpResult5833 * _Texture_12_Color );
				half4 Texture_12_Final4997 = ifLocalVar6169;
				float4 layeredBlendVar5645 = tex2DNode4370;
				float4 layeredBlend5645 = ( lerp( lerp( lerp( lerp( layeredBlend5644 , Texture_9_Final4987 , layeredBlendVar5645.x ) , Texture_10_Final4994 , layeredBlendVar5645.y ) , Texture_11_Final4996 , layeredBlendVar5645.z ) , Texture_12_Final4997 , layeredBlendVar5645.w ) );
				float temp_output_5125_0 = ( 1.0 / _Texture_13_Tiling );
				float2 appendResult5027 = (float2(temp_output_5125_0 , temp_output_5125_0));
				float2 temp_output_5037_0 = ( Top_Bottom1999 * appendResult5027 );
				float4 texArray5043 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, temp_output_5037_0, _Texture_13_Albedo_Index );
				float4 texArray5034 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, ( temp_output_5037_0 / _Texture_13_Far_Multiplier ), _Texture_13_Albedo_Index );
				float4 lerpResult5829 = lerp( texArray5043 , texArray5034 , UVmixDistance636);
				float4 ifLocalVar6151 = 0;
				UNITY_BRANCH 
				if( _Texture_13_Albedo_Index > -1.0 )
				ifLocalVar6151 = ( lerpResult5829 * _Texture_13_Color );
				half4 Texture_13_Final5058 = ifLocalVar6151;
				float temp_output_5006_0 = ( 1.0 / _Texture_14_Tiling );
				float2 appendResult5033 = (float2(temp_output_5006_0 , temp_output_5006_0));
				float2 temp_output_5022_0 = ( Top_Bottom1999 * appendResult5033 );
				float4 texArray5202 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, temp_output_5022_0, _Texture_14_Albedo_Index );
				float4 texArray5171 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, ( temp_output_5022_0 / _Texture_14_Far_Multiplier ), _Texture_14_Albedo_Index );
				float4 lerpResult5825 = lerp( texArray5202 , texArray5171 , UVmixDistance636);
				float4 ifLocalVar6153 = 0;
				UNITY_BRANCH 
				if( _Texture_14_Albedo_Index > -1.0 )
				ifLocalVar6153 = ( lerpResult5825 * _Texture_14_Color );
				half4 Texture_14_Final5163 = ifLocalVar6153;
				float temp_output_5210_0 = ( 1.0 / _Texture_15_Tiling );
				float2 appendResult5212 = (float2(temp_output_5210_0 , temp_output_5210_0));
				float2 temp_output_5226_0 = ( Top_Bottom1999 * appendResult5212 );
				float4 texArray5259 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, temp_output_5226_0, _Texture_15_Albedo_Index );
				float4 texArray5272 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, ( temp_output_5226_0 / _Texture_15_Far_Multiplier ), _Texture_15_Albedo_Index );
				float4 lerpResult5821 = lerp( texArray5259 , texArray5272 , UVmixDistance636);
				float4 ifLocalVar6155 = 0;
				UNITY_BRANCH 
				if( _Texture_15_Albedo_Index > -1.0 )
				ifLocalVar6155 = ( lerpResult5821 * _Texture_15_Color );
				half4 Texture_15_Final5270 = ifLocalVar6155;
				float temp_output_5075_0 = ( 1.0 / _Texture_16_Tiling );
				float2 appendResult5078 = (float2(temp_output_5075_0 , temp_output_5075_0));
				float2 temp_output_5083_0 = ( Top_Bottom1999 * appendResult5078 );
				float4 texArray5139 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, temp_output_5083_0, _Texture_16_Albedo_Index );
				float4 texArray5143 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, ( temp_output_5083_0 / _Texture_16_Far_Multiplier ), _Texture_16_Albedo_Index );
				float4 lerpResult5817 = lerp( texArray5139 , texArray5143 , UVmixDistance636);
				float4 ifLocalVar6183 = 0;
				UNITY_BRANCH 
				if( _Texture_16_Albedo_Index > -1.0 )
				ifLocalVar6183 = ( lerpResult5817 * _Texture_16_Color );
				half4 Texture_16_Final5094 = ifLocalVar6183;
				float4 layeredBlendVar5646 = tex2DNode4371;
				float4 layeredBlend5646 = ( lerp( lerp( lerp( lerp( layeredBlend5645 , Texture_13_Final5058 , layeredBlendVar5646.x ) , Texture_14_Final5163 , layeredBlendVar5646.y ) , Texture_15_Final5270 , layeredBlendVar5646.z ) , Texture_16_Final5094 , layeredBlendVar5646.w ) );
				float3 appendResult6259 = (float3(layeredBlend5646.xyz));
				float2 temp_cast_1 = (( _Geological_Map_Offset_Close + ( ase_worldPos.y / _Geological_Tiling_Close ) )).xx;
				float3 appendResult6257 = (float3(tex2D( _Texture_Geological_Map, temp_cast_1 ).rgb));
				float2 temp_cast_3 = (( ( ase_worldPos.y / _Geological_Tiling_Far ) + _Geological_Map_Offset_Far )).xx;
				float3 appendResult6256 = (float3(tex2D( _Texture_Geological_Map, temp_cast_3 ).rgb));
				float3 lerpResult1315 = lerp( ( _Geological_Map_Close_Power * ( appendResult6257 + float3( -0.3,-0.3,-0.3 ) ) ) , ( _Geological_Map_Far_Power * ( appendResult6256 + float3( -0.3,-0.3,-0.3 ) ) ) , UVmixDistance636);
				half Splat4_A2546 = tex2DNode4371.a;
				half Splat4_B2545 = tex2DNode4371.b;
				half Splat4_G2544 = tex2DNode4371.g;
				half Splat4_R2543 = tex2DNode4371.r;
				half Splat3_A2540 = tex2DNode4370.a;
				half Splat3_B2539 = tex2DNode4370.b;
				half Splat3_G2538 = tex2DNode4370.g;
				half Splat3_R2537 = tex2DNode4370.r;
				half Splat2_A2109 = tex2DNode4369.a;
				half Splat2_B2108 = tex2DNode4369.b;
				half Splat2_G2107 = tex2DNode4369.g;
				half Splat2_R2106 = tex2DNode4369.r;
				half Splat1_R1438 = tex2DNode4368.r;
				half Splat1_G1441 = tex2DNode4368.g;
				half Splat1_A1491 = tex2DNode4368.a;
				half Splat1_B1442 = tex2DNode4368.b;
				float3 blendOpSrc4362 = appendResult6259;
				float3 blendOpDest4362 = ( lerpResult1315 * ( ( _Texture_16_Geological_Power * Splat4_A2546 ) + ( ( _Texture_15_Geological_Power * Splat4_B2545 ) + ( ( _Texture_14_Geological_Power * Splat4_G2544 ) + ( ( _Texture_13_Geological_Power * Splat4_R2543 ) + ( ( _Texture_12_Geological_Power * Splat3_A2540 ) + ( ( _Texture_11_Geological_Power * Splat3_B2539 ) + ( ( _Texture_10_Geological_Power * Splat3_G2538 ) + ( ( _Texture_9_Geological_Power * Splat3_R2537 ) + ( ( _Texture_8_Geological_Power * Splat2_A2109 ) + ( ( _Texture_7_Geological_Power * Splat2_B2108 ) + ( ( _Texture_6_Geological_Power * Splat2_G2107 ) + ( ( _Texture_5_Geological_Power * Splat2_R2106 ) + ( ( _Texture_1_Geological_Power * Splat1_R1438 ) + ( ( _Texture_2_Geological_Power * Splat1_G1441 ) + ( ( _Texture_4_Geological_Power * Splat1_A1491 ) + ( _Texture_3_Geological_Power * Splat1_B1442 ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) );
				float3 clampResult5715 = clamp( ( saturate( ( blendOpSrc4362 + blendOpDest4362 ) )) , float3( 0,0,0 ) , float3( 1,1,1 ) );
				
				float4 texArray5480 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Normal, sampler_Texture_Array_Normal, ( Top_Bottom1999 / _Perlin_Normal_Tiling_Close ), (float)_Texture_Perlin_Normal_Index );
				float2 appendResult11_g1070 = (float2(texArray5480.w , texArray5480.y));
				float2 temp_output_4_0_g1070 = ( ( ( appendResult11_g1070 * float2( 2,2 ) ) + float2( -1,-1 ) ) * _Perlin_Normal_Power_Close );
				float2 break8_g1070 = temp_output_4_0_g1070;
				float dotResult5_g1070 = dot( temp_output_4_0_g1070 , temp_output_4_0_g1070 );
				float temp_output_9_0_g1070 = sqrt( ( 1.0 - saturate( dotResult5_g1070 ) ) );
				float3 appendResult20_g1070 = (float3(break8_g1070.x , break8_g1070.y , temp_output_9_0_g1070));
				float4 texArray4374 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Normal, sampler_Texture_Array_Normal, ( Top_Bottom1999 / _Perlin_Normal_Tiling_Far ), (float)_Texture_Perlin_Normal_Index );
				float2 appendResult11_g1069 = (float2(texArray4374.w , texArray4374.y));
				float2 temp_output_4_0_g1069 = ( ( ( appendResult11_g1069 * float2( 2,2 ) ) + float2( -1,-1 ) ) * _Perlin_Normal_Power );
				float2 break8_g1069 = temp_output_4_0_g1069;
				float dotResult5_g1069 = dot( temp_output_4_0_g1069 , temp_output_4_0_g1069 );
				float temp_output_9_0_g1069 = sqrt( ( 1.0 - saturate( dotResult5_g1069 ) ) );
				float3 appendResult20_g1069 = (float3(break8_g1069.x , break8_g1069.y , temp_output_9_0_g1069));
				float3 lerpResult5460 = lerp( appendResult20_g1070 , appendResult20_g1069 , UVmixDistance636);
				float clampResult3775 = clamp( ( ( _Texture_16_Perlin_Power * Splat4_A2546 ) + ( ( _Texture_15_Perlin_Power * Splat4_B2545 ) + ( ( _Texture_14_Perlin_Power * Splat4_G2544 ) + ( ( _Texture_13_Perlin_Power * Splat4_R2543 ) + ( ( _Texture_12_Perlin_Power * Splat3_A2540 ) + ( ( _Texture_11_Perlin_Power * Splat3_B2539 ) + ( ( _Texture_10_Perlin_Power * Splat3_G2538 ) + ( ( _Texture_9_Perlin_Power * Splat3_R2537 ) + ( ( _Texture_8_Perlin_Power * Splat2_A2109 ) + ( ( _Texture_7_Perlin_Power * Splat2_B2108 ) + ( ( _Texture_6_Perlin_Power * Splat2_G2107 ) + ( ( _Texture_5_Perlin_Power * Splat2_R2106 ) + ( ( _Texture_1_Perlin_Power * Splat1_R1438 ) + ( ( _Texture_2_Perlin_Power * Splat1_G1441 ) + ( ( _Texture_4_Perlin_Power * Splat1_A1491 ) + ( _Texture_3_Perlin_Power * Splat1_B1442 ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) , 0.0 , 1.0 );
				float3 lerpResult3776 = lerp( float3( 0,0,1 ) , lerpResult5460 , clampResult3775);
				float4 texArray3299 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Normal, sampler_Texture_Array_Normal, temp_output_3275_0, _Texture_1_Normal_Index );
				float2 appendResult11_g1049 = (float2(texArray3299.w , texArray3299.y));
				float2 temp_output_4_0_g1049 = ( ( ( appendResult11_g1049 * float2( 2,2 ) ) + float2( -1,-1 ) ) * _Texture_1_Normal_Power );
				float2 break8_g1049 = temp_output_4_0_g1049;
				float dotResult5_g1049 = dot( temp_output_4_0_g1049 , temp_output_4_0_g1049 );
				float temp_output_9_0_g1049 = sqrt( ( 1.0 - saturate( dotResult5_g1049 ) ) );
				float3 appendResult20_g1049 = (float3(break8_g1049.x , break8_g1049.y , temp_output_9_0_g1049));
				half3 EmptyNRM6172 = half3(0,0,1);
				float3 ifLocalVar6127 = 0;
				UNITY_BRANCH 
				if( _Texture_1_Normal_Index <= -1.0 )
				ifLocalVar6127 = EmptyNRM6172;
				else
				ifLocalVar6127 = appendResult20_g1049;
				half3 Normal_1569 = ifLocalVar6127;
				float4 texArray3350 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Normal, sampler_Texture_Array_Normal, temp_output_3343_0, _Texture_2_Normal_Index );
				float2 appendResult11_g1048 = (float2(texArray3350.w , texArray3350.y));
				float2 temp_output_4_0_g1048 = ( ( ( appendResult11_g1048 * float2( 2,2 ) ) + float2( -1,-1 ) ) * _Texture_2_Normal_Power );
				float2 break8_g1048 = temp_output_4_0_g1048;
				float dotResult5_g1048 = dot( temp_output_4_0_g1048 , temp_output_4_0_g1048 );
				float temp_output_9_0_g1048 = sqrt( ( 1.0 - saturate( dotResult5_g1048 ) ) );
				float3 appendResult20_g1048 = (float3(break8_g1048.x , break8_g1048.y , temp_output_9_0_g1048));
				float3 ifLocalVar6129 = 0;
				UNITY_BRANCH 
				if( _Texture_2_Normal_Index <= -1.0 )
				ifLocalVar6129 = EmptyNRM6172;
				else
				ifLocalVar6129 = appendResult20_g1048;
				half3 Normal_23361 = ifLocalVar6129;
				float4 texArray3416 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Normal, sampler_Texture_Array_Normal, temp_output_3410_0, _Texture_3_Normal_Index );
				float2 appendResult11_g1050 = (float2(texArray3416.w , texArray3416.y));
				float2 temp_output_4_0_g1050 = ( ( ( appendResult11_g1050 * float2( 2,2 ) ) + float2( -1,-1 ) ) * _Texture_3_Normal_Power );
				float2 break8_g1050 = temp_output_4_0_g1050;
				float dotResult5_g1050 = dot( temp_output_4_0_g1050 , temp_output_4_0_g1050 );
				float temp_output_9_0_g1050 = sqrt( ( 1.0 - saturate( dotResult5_g1050 ) ) );
				float3 appendResult20_g1050 = (float3(break8_g1050.x , break8_g1050.y , temp_output_9_0_g1050));
				float3 ifLocalVar6131 = 0;
				UNITY_BRANCH 
				if( _Texture_3_Normal_Index > -1.0 )
				ifLocalVar6131 = appendResult20_g1050;
				half3 Normal_33452 = ifLocalVar6131;
				float4 texArray3483 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Normal, sampler_Texture_Array_Normal, temp_output_3477_0, _Texture_4_Normal_Index );
				float2 appendResult11_g1051 = (float2(texArray3483.w , texArray3483.y));
				float2 temp_output_4_0_g1051 = ( ( ( appendResult11_g1051 * float2( 2,2 ) ) + float2( -1,-1 ) ) * _Texture_4_Normal_Power );
				float2 break8_g1051 = temp_output_4_0_g1051;
				float dotResult5_g1051 = dot( temp_output_4_0_g1051 , temp_output_4_0_g1051 );
				float temp_output_9_0_g1051 = sqrt( ( 1.0 - saturate( dotResult5_g1051 ) ) );
				float3 appendResult20_g1051 = (float3(break8_g1051.x , break8_g1051.y , temp_output_9_0_g1051));
				float3 ifLocalVar6133 = 0;
				UNITY_BRANCH 
				if( _Texture_4_Normal_Index <= -1.0 )
				ifLocalVar6133 = EmptyNRM6172;
				else
				ifLocalVar6133 = appendResult20_g1051;
				half3 Normal_43519 = ifLocalVar6133;
				float4 layeredBlendVar5639 = tex2DNode4368;
				float3 layeredBlend5639 = ( lerp( lerp( lerp( lerp( float3( 0,0,0 ) , Normal_1569 , layeredBlendVar5639.x ) , Normal_23361 , layeredBlendVar5639.y ) , Normal_33452 , layeredBlendVar5639.z ) , Normal_43519 , layeredBlendVar5639.w ) );
				float4 texArray4424 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Normal, sampler_Texture_Array_Normal, temp_output_4416_0, _Texture_5_Normal_Index );
				float2 appendResult11_g1058 = (float2(texArray4424.w , texArray4424.y));
				float2 temp_output_4_0_g1058 = ( ( ( appendResult11_g1058 * float2( 2,2 ) ) + float2( -1,-1 ) ) * _Texture_5_Normal_Power );
				float2 break8_g1058 = temp_output_4_0_g1058;
				float dotResult5_g1058 = dot( temp_output_4_0_g1058 , temp_output_4_0_g1058 );
				float temp_output_9_0_g1058 = sqrt( ( 1.0 - saturate( dotResult5_g1058 ) ) );
				float3 appendResult20_g1058 = (float3(break8_g1058.x , break8_g1058.y , temp_output_9_0_g1058));
				float3 ifLocalVar6135 = 0;
				UNITY_BRANCH 
				if( _Texture_5_Normal_Index <= -1.0 )
				ifLocalVar6135 = EmptyNRM6172;
				else
				ifLocalVar6135 = appendResult20_g1058;
				half3 Normal_54456 = ifLocalVar6135;
				float4 texArray4493 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Normal, sampler_Texture_Array_Normal, temp_output_4485_0, _Texture_6_Normal_Index );
				float2 appendResult11_g1059 = (float2(texArray4493.w , texArray4493.y));
				float2 temp_output_4_0_g1059 = ( ( ( appendResult11_g1059 * float2( 2,2 ) ) + float2( -1,-1 ) ) * _Texture_6_Normal_Power );
				float2 break8_g1059 = temp_output_4_0_g1059;
				float dotResult5_g1059 = dot( temp_output_4_0_g1059 , temp_output_4_0_g1059 );
				float temp_output_9_0_g1059 = sqrt( ( 1.0 - saturate( dotResult5_g1059 ) ) );
				float3 appendResult20_g1059 = (float3(break8_g1059.x , break8_g1059.y , temp_output_9_0_g1059));
				float3 ifLocalVar6138 = 0;
				UNITY_BRANCH 
				if( _Texture_6_Normal_Index <= -1.0 )
				ifLocalVar6138 = EmptyNRM6172;
				else
				ifLocalVar6138 = appendResult20_g1059;
				half3 Normal_64537 = ifLocalVar6138;
				float4 texArray4567 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Normal, sampler_Texture_Array_Normal, temp_output_4559_0, _Texture_7_Normal_Index );
				float2 appendResult11_g1056 = (float2(texArray4567.w , texArray4567.y));
				float2 temp_output_4_0_g1056 = ( ( ( appendResult11_g1056 * float2( 2,2 ) ) + float2( -1,-1 ) ) * _Texture_7_Normal_Power );
				float2 break8_g1056 = temp_output_4_0_g1056;
				float dotResult5_g1056 = dot( temp_output_4_0_g1056 , temp_output_4_0_g1056 );
				float temp_output_9_0_g1056 = sqrt( ( 1.0 - saturate( dotResult5_g1056 ) ) );
				float3 appendResult20_g1056 = (float3(break8_g1056.x , break8_g1056.y , temp_output_9_0_g1056));
				float3 ifLocalVar6140 = 0;
				UNITY_BRANCH 
				if( _Texture_7_Normal_Index <= -1.0 )
				ifLocalVar6140 = EmptyNRM6172;
				else
				ifLocalVar6140 = appendResult20_g1056;
				half3 Normal_74615 = ifLocalVar6140;
				float4 texArray4641 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Normal, sampler_Texture_Array_Normal, temp_output_4633_0, _Texture_8_Normal_Index );
				float2 appendResult11_g1057 = (float2(texArray4641.w , texArray4641.y));
				float2 temp_output_4_0_g1057 = ( ( ( appendResult11_g1057 * float2( 2,2 ) ) + float2( -1,-1 ) ) * _Texture_8_Normal_Power );
				float2 break8_g1057 = temp_output_4_0_g1057;
				float dotResult5_g1057 = dot( temp_output_4_0_g1057 , temp_output_4_0_g1057 );
				float temp_output_9_0_g1057 = sqrt( ( 1.0 - saturate( dotResult5_g1057 ) ) );
				float3 appendResult20_g1057 = (float3(break8_g1057.x , break8_g1057.y , temp_output_9_0_g1057));
				float3 ifLocalVar6142 = 0;
				UNITY_BRANCH 
				if( _Texture_8_Normal_Index <= -1.0 )
				ifLocalVar6142 = EmptyNRM6172;
				else
				ifLocalVar6142 = appendResult20_g1057;
				half3 Normal_84690 = ifLocalVar6142;
				float4 layeredBlendVar5640 = tex2DNode4369;
				float3 layeredBlend5640 = ( lerp( lerp( lerp( lerp( layeredBlend5639 , Normal_54456 , layeredBlendVar5640.x ) , Normal_64537 , layeredBlendVar5640.y ) , Normal_74615 , layeredBlendVar5640.z ) , Normal_84690 , layeredBlendVar5640.w ) );
				float4 texArray4788 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Normal, sampler_Texture_Array_Normal, temp_output_4712_0, _Texture_9_Normal_Index );
				float2 appendResult11_g1062 = (float2(texArray4788.w , texArray4788.y));
				float2 temp_output_4_0_g1062 = ( ( ( appendResult11_g1062 * float2( 2,2 ) ) + float2( -1,-1 ) ) * _Texture_9_Normal_Power );
				float2 break8_g1062 = temp_output_4_0_g1062;
				float dotResult5_g1062 = dot( temp_output_4_0_g1062 , temp_output_4_0_g1062 );
				float temp_output_9_0_g1062 = sqrt( ( 1.0 - saturate( dotResult5_g1062 ) ) );
				float3 appendResult20_g1062 = (float3(break8_g1062.x , break8_g1062.y , temp_output_9_0_g1062));
				float3 ifLocalVar6144 = 0;
				UNITY_BRANCH 
				if( _Texture_9_Normal_Index <= -1.0 )
				ifLocalVar6144 = EmptyNRM6172;
				else
				ifLocalVar6144 = appendResult20_g1062;
				half3 Normal_94897 = ifLocalVar6144;
				float4 texArray4822 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Normal, sampler_Texture_Array_Normal, temp_output_4793_0, _Texture_10_Normal_Index );
				float2 appendResult11_g1061 = (float2(texArray4822.w , texArray4822.y));
				float2 temp_output_4_0_g1061 = ( ( ( appendResult11_g1061 * float2( 2,2 ) ) + float2( -1,-1 ) ) * _Texture_10_Normal_Power );
				float2 break8_g1061 = temp_output_4_0_g1061;
				float dotResult5_g1061 = dot( temp_output_4_0_g1061 , temp_output_4_0_g1061 );
				float temp_output_9_0_g1061 = sqrt( ( 1.0 - saturate( dotResult5_g1061 ) ) );
				float3 appendResult20_g1061 = (float3(break8_g1061.x , break8_g1061.y , temp_output_9_0_g1061));
				float3 ifLocalVar6146 = 0;
				UNITY_BRANCH 
				if( _Texture_10_Normal_Index <= -1.0 )
				ifLocalVar6146 = EmptyNRM6172;
				else
				ifLocalVar6146 = appendResult20_g1061;
				half3 Normal_104918 = ifLocalVar6146;
				float4 texArray4856 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Normal, sampler_Texture_Array_Normal, temp_output_4817_0, _Texture_11_Normal_Index );
				float2 appendResult11_g1063 = (float2(texArray4856.w , texArray4856.y));
				float2 temp_output_4_0_g1063 = ( ( ( appendResult11_g1063 * float2( 2,2 ) ) + float2( -1,-1 ) ) * _Texture_11_Normal_Power );
				float2 break8_g1063 = temp_output_4_0_g1063;
				float dotResult5_g1063 = dot( temp_output_4_0_g1063 , temp_output_4_0_g1063 );
				float temp_output_9_0_g1063 = sqrt( ( 1.0 - saturate( dotResult5_g1063 ) ) );
				float3 appendResult20_g1063 = (float3(break8_g1063.x , break8_g1063.y , temp_output_9_0_g1063));
				float3 ifLocalVar6148 = 0;
				UNITY_BRANCH 
				if( _Texture_11_Normal_Index <= -1.0 )
				ifLocalVar6148 = EmptyNRM6172;
				else
				ifLocalVar6148 = appendResult20_g1063;
				half3 Normal_114948 = ifLocalVar6148;
				float4 texArray4870 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Normal, sampler_Texture_Array_Normal, temp_output_4849_0, _Texture_12_Normal_Index );
				float2 appendResult11_g1060 = (float2(texArray4870.w , texArray4870.y));
				float2 temp_output_4_0_g1060 = ( ( ( appendResult11_g1060 * float2( 2,2 ) ) + float2( -1,-1 ) ) * _Texture_12_Normal_Power );
				float2 break8_g1060 = temp_output_4_0_g1060;
				float dotResult5_g1060 = dot( temp_output_4_0_g1060 , temp_output_4_0_g1060 );
				float temp_output_9_0_g1060 = sqrt( ( 1.0 - saturate( dotResult5_g1060 ) ) );
				float3 appendResult20_g1060 = (float3(break8_g1060.x , break8_g1060.y , temp_output_9_0_g1060));
				float3 ifLocalVar6150 = 0;
				UNITY_BRANCH 
				if( _Texture_12_Normal_Index <= -1.0 )
				ifLocalVar6150 = EmptyNRM6172;
				else
				ifLocalVar6150 = appendResult20_g1060;
				half3 Normal_124962 = ifLocalVar6150;
				float4 layeredBlendVar5641 = tex2DNode4370;
				float3 layeredBlend5641 = ( lerp( lerp( lerp( lerp( layeredBlend5640 , Normal_94897 , layeredBlendVar5641.x ) , Normal_104918 , layeredBlendVar5641.y ) , Normal_114948 , layeredBlendVar5641.z ) , Normal_124962 , layeredBlendVar5641.w ) );
				float4 texArray5120 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Normal, sampler_Texture_Array_Normal, temp_output_5037_0, _Texture_13_Normal_Index );
				float2 appendResult11_g1067 = (float2(texArray5120.w , texArray5120.y));
				float2 temp_output_4_0_g1067 = ( ( ( appendResult11_g1067 * float2( 2,2 ) ) + float2( -1,-1 ) ) * _Texture_13_Normal_Power );
				float2 break8_g1067 = temp_output_4_0_g1067;
				float dotResult5_g1067 = dot( temp_output_4_0_g1067 , temp_output_4_0_g1067 );
				float temp_output_9_0_g1067 = sqrt( ( 1.0 - saturate( dotResult5_g1067 ) ) );
				float3 appendResult20_g1067 = (float3(break8_g1067.x , break8_g1067.y , temp_output_9_0_g1067));
				float3 ifLocalVar6152 = 0;
				UNITY_BRANCH 
				if( _Texture_13_Normal_Index <= -1.0 )
				ifLocalVar6152 = EmptyNRM6172;
				else
				ifLocalVar6152 = appendResult20_g1067;
				half3 Normal_135059 = ifLocalVar6152;
				float4 texArray5178 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Normal, sampler_Texture_Array_Normal, temp_output_5022_0, _Texture_14_Normal_Index );
				float2 appendResult11_g1068 = (float2(texArray5178.w , texArray5178.y));
				float2 temp_output_4_0_g1068 = ( ( ( appendResult11_g1068 * float2( 2,2 ) ) + float2( -1,-1 ) ) * _Texture_14_Normal_Power );
				float2 break8_g1068 = temp_output_4_0_g1068;
				float dotResult5_g1068 = dot( temp_output_4_0_g1068 , temp_output_4_0_g1068 );
				float temp_output_9_0_g1068 = sqrt( ( 1.0 - saturate( dotResult5_g1068 ) ) );
				float3 appendResult20_g1068 = (float3(break8_g1068.x , break8_g1068.y , temp_output_9_0_g1068));
				float3 ifLocalVar6154 = 0;
				UNITY_BRANCH 
				if( _Texture_14_Normal_Index <= -1.0 )
				ifLocalVar6154 = EmptyNRM6172;
				else
				ifLocalVar6154 = appendResult20_g1068;
				half3 Normal_145196 = ifLocalVar6154;
				float4 texArray5246 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Normal, sampler_Texture_Array_Normal, temp_output_5226_0, _Texture_15_Normal_Index );
				float2 appendResult11_g1066 = (float2(texArray5246.w , texArray5246.y));
				float2 temp_output_4_0_g1066 = ( ( ( appendResult11_g1066 * float2( 2,2 ) ) + float2( -1,-1 ) ) * _Texture_15_Normal_Power );
				float2 break8_g1066 = temp_output_4_0_g1066;
				float dotResult5_g1066 = dot( temp_output_4_0_g1066 , temp_output_4_0_g1066 );
				float temp_output_9_0_g1066 = sqrt( ( 1.0 - saturate( dotResult5_g1066 ) ) );
				float3 appendResult20_g1066 = (float3(break8_g1066.x , break8_g1066.y , temp_output_9_0_g1066));
				float3 ifLocalVar6156 = 0;
				UNITY_BRANCH 
				if( _Texture_15_Normal_Index <= -1.0 )
				ifLocalVar6156 = EmptyNRM6172;
				else
				ifLocalVar6156 = appendResult20_g1066;
				half3 Normal_155280 = ifLocalVar6156;
				float4 texArray5099 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Normal, sampler_Texture_Array_Normal, temp_output_5083_0, _Texture_16_Normal_Index );
				float2 appendResult11_g1065 = (float2(texArray5099.w , texArray5099.y));
				float2 temp_output_4_0_g1065 = ( ( ( appendResult11_g1065 * float2( 2,2 ) ) + float2( -1,-1 ) ) * _Texture_16_Normal_Power );
				float2 break8_g1065 = temp_output_4_0_g1065;
				float dotResult5_g1065 = dot( temp_output_4_0_g1065 , temp_output_4_0_g1065 );
				float temp_output_9_0_g1065 = sqrt( ( 1.0 - saturate( dotResult5_g1065 ) ) );
				float3 appendResult20_g1065 = (float3(break8_g1065.x , break8_g1065.y , temp_output_9_0_g1065));
				float3 ifLocalVar6158 = 0;
				UNITY_BRANCH 
				if( _Texture_16_Normal_Index <= -1.0 )
				ifLocalVar6158 = EmptyNRM6172;
				else
				ifLocalVar6158 = appendResult20_g1065;
				half3 Normal_164696 = ifLocalVar6158;
				float4 layeredBlendVar5642 = tex2DNode4371;
				float3 layeredBlend5642 = ( lerp( lerp( lerp( lerp( layeredBlend5641 , Normal_135059 , layeredBlendVar5642.x ) , Normal_145196 , layeredBlendVar5642.y ) , Normal_155280 , layeredBlendVar5642.z ) , Normal_164696 , layeredBlendVar5642.w ) );
				float3 normalizeResult3901 = normalize( layeredBlend5642 );
				
				surfaceDescription.Albedo = clampResult5715;
				surfaceDescription.Normal = BlendNormal( lerpResult3776 , normalizeResult3901 );
				surfaceDescription.Emission = 0;
				surfaceDescription.Specular = ( ( appendResult6259 * float3( 0.3,0.3,0.3 ) ) * _Terrain_Specular );
				surfaceDescription.Metallic = 0;
				surfaceDescription.Smoothness = ( layeredBlend5646.w * _Terrain_Smoothness );
				surfaceDescription.Occlusion = _Ambient_Occlusion_Power;
				surfaceDescription.Alpha = 1;
				surfaceDescription.AlphaClipThreshold = 0;

#ifdef _MATERIAL_FEATURE_CLEAR_COAT
				surfaceDescription.CoatMask = 0;
#endif

#if defined(_MATERIAL_FEATURE_SUBSURFACE_SCATTERING) || defined(_MATERIAL_FEATURE_TRANSMISSION)
				surfaceDescription.DiffusionProfile = asfloat (uint(1074012128);
#endif

#ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
				surfaceDescription.SubsurfaceMask = 1;
#endif

#ifdef _MATERIAL_FEATURE_TRANSMISSION
				surfaceDescription.Thickness = 0;
#endif

#ifdef _MATERIAL_FEATURE_ANISOTROPY
				surfaceDescription.Anisotropy = 0;
#endif

#ifdef _MATERIAL_FEATURE_IRIDESCENCE
				surfaceDescription.IridescenceThickness = 0;
				surfaceDescription.IridescenceMask = 1;
#endif

#ifdef _MATERIAL_FEATURE_TRANSPARENCY
				surfaceDescription.IndexOfRefraction = 1;
				surfaceDescription.TransmittanceColor = float3( 1, 1, 1 );
				surfaceDescription.TransmittanceAbsorptionDistance = 1000000;
				surfaceDescription.TransmittanceMask = 0;
#endif
				GetSurfaceAndBuiltinData ( surfaceDescription, input, normalizedWorldViewDir, posInput, surfaceData, builtinData );
				ENCODE_INTO_GBUFFER ( surfaceData, builtinData, posInput.positionSS, outGBuffer );
#ifdef _DEPTHOFFSET_ON
				outputDepth = posInput.deviceDepth;
#endif
			}

            ENDHLSL
        }
        
		
		
        Pass
        {
			
            Name "META"
            Tags { "LightMode"="Meta" }
            Cull Off
            HLSLPROGRAM
			//#define UNITY_MATERIAL_LIT
			#pragma vertex Vert
			#pragma fragment Frag

			#define ASE_SRP_VERSION 50702
			#define _MATERIAL_FEATURE_SPECULAR_COLOR 1
			#define _NORMALMAP 1
			#pragma instancing_options assumeuniformscaling nomatrices nolightprobe nolightmap
			#include "TerrainVertexCTSHD.hlsl"

        
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/NormalSurfaceGradient.hlsl"
        
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/FragInputs.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"
        
			#define SHADERPASS SHADERPASS_LIGHT_TRANSPORT
            #define ATTRIBUTES_NEED_NORMAL
            #define ATTRIBUTES_NEED_TANGENT
            #define ATTRIBUTES_NEED_TEXCOORD0
            #define ATTRIBUTES_NEED_TEXCOORD1
            #define ATTRIBUTES_NEED_TEXCOORD2
			#define ATTRIBUTES_NEED_COLOR
        
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Material.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/Lit.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/BuiltinUtilities.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/MaterialUtilities.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Decal/DecalUtilities.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/LitDecalData.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphFunctions.hlsl"

            struct AttributesMesh 
			{
                float4 positionOS : POSITION;
                float3 normalOS : NORMAL;
                float4 tangentOS : TANGENT;
                float2 uv0 : TEXCOORD0;
                float2 uv1 : TEXCOORD1;
                float2 uv2 : TEXCOORD2;
                float4 color : COLOR;
				
            };

            struct PackedVaryingsMeshToPS
			{
                float4 positionCS : SV_Position;
				float4 ase_texcoord : TEXCOORD0;
				float4 ase_texcoord1 : TEXCOORD1;
            };
            
			sampler2D _Texture_Splat_4;
			sampler2D _Texture_Splat_3;
			sampler2D _Texture_Splat_2;
			sampler2D _Texture_Splat_1;
			half _Texture_1_Albedo_Index;
			TEXTURE2D_ARRAY( _Texture_Array_Albedo );
			uniform SAMPLER( sampler_Texture_Array_Albedo );
			float _Texture_1_Tiling;
			half _Texture_1_Far_Multiplier;
			half _UV_Mix_Start_Distance;
			half _UV_Mix_Power;
			half4 _Texture_1_Color;
			float _Texture_2_Albedo_Index;
			half _Texture_2_Tiling;
			half _Texture_2_Far_Multiplier;
			half4 _Texture_2_Color;
			float _Texture_3_Albedo_Index;
			half _Texture_3_Tiling;
			half _Texture_3_Far_Multiplier;
			half4 _Texture_3_Color;
			float _Texture_4_Albedo_Index;
			half _Texture_4_Tiling;
			half _Texture_4_Far_Multiplier;
			half4 _Texture_4_Color;
			float _Texture_5_Albedo_Index;
			half _Texture_5_Tiling;
			half _Texture_5_Far_Multiplier;
			half4 _Texture_5_Color;
			float _Texture_6_Albedo_Index;
			half _Texture_6_Tiling;
			half _Texture_6_Far_Multiplier;
			half4 _Texture_6_Color;
			float _Texture_7_Albedo_Index;
			half _Texture_7_Tiling;
			half _Texture_7_Far_Multiplier;
			half4 _Texture_7_Color;
			float _Texture_8_Albedo_Index;
			half _Texture_8_Tiling;
			half _Texture_8_Far_Multiplier;
			half4 _Texture_8_Color;
			half _Texture_9_Albedo_Index;
			half _Texture_9_Tiling;
			half _Texture_9_Far_Multiplier;
			half4 _Texture_9_Color;
			half _Texture_10_Albedo_Index;
			half _Texture_10_Tiling;
			half _Texture_10_Far_Multiplier;
			half4 _Texture_10_Color;
			half _Texture_11_Albedo_Index;
			half _Texture_11_Tiling;
			half _Texture_11_Far_Multiplier;
			half4 _Texture_11_Color;
			half _Texture_12_Albedo_Index;
			half _Texture_12_Tiling;
			half _Texture_12_Far_Multiplier;
			half4 _Texture_12_Color;
			half _Texture_13_Albedo_Index;
			half _Texture_13_Tiling;
			half _Texture_13_Far_Multiplier;
			half4 _Texture_13_Color;
			half _Texture_14_Albedo_Index;
			half _Texture_14_Tiling;
			half _Texture_14_Far_Multiplier;
			half4 _Texture_14_Color;
			half _Texture_15_Albedo_Index;
			half _Texture_15_Tiling;
			half _Texture_15_Far_Multiplier;
			half4 _Texture_15_Color;
			half _Texture_16_Albedo_Index;
			half _Texture_16_Tiling;
			half _Texture_16_Far_Multiplier;
			half4 _Texture_16_Color;
			half _Geological_Map_Close_Power;
			sampler2D _Texture_Geological_Map;
			half _Geological_Map_Offset_Close;
			half _Geological_Tiling_Close;
			half _Geological_Map_Far_Power;
			half _Geological_Tiling_Far;
			half _Geological_Map_Offset_Far;
			half _Texture_16_Geological_Power;
			half _Texture_15_Geological_Power;
			half _Texture_14_Geological_Power;
			half _Texture_13_Geological_Power;
			half _Texture_12_Geological_Power;
			half _Texture_11_Geological_Power;
			half _Texture_10_Geological_Power;
			half _Texture_9_Geological_Power;
			half _Texture_8_Geological_Power;
			half _Texture_7_Geological_Power;
			half _Texture_6_Geological_Power;
			half _Texture_5_Geological_Power;
			half _Texture_1_Geological_Power;
			half _Texture_2_Geological_Power;
			half _Texture_4_Geological_Power;
			half _Texture_3_Geological_Power;
			TEXTURE2D_ARRAY( _Texture_Array_Normal );
			uniform SAMPLER( sampler_Texture_Array_Normal );
			half _Perlin_Normal_Tiling_Close;
			int _Texture_Perlin_Normal_Index;
			half _Perlin_Normal_Power_Close;
			half _Perlin_Normal_Tiling_Far;
			half _Perlin_Normal_Power;
			float _Texture_16_Perlin_Power;
			float _Texture_15_Perlin_Power;
			float _Texture_14_Perlin_Power;
			float _Texture_13_Perlin_Power;
			float _Texture_12_Perlin_Power;
			float _Texture_11_Perlin_Power;
			float _Texture_10_Perlin_Power;
			float _Texture_9_Perlin_Power;
			float _Texture_8_Perlin_Power;
			float _Texture_7_Perlin_Power;
			float _Texture_6_Perlin_Power;
			float _Texture_5_Perlin_Power;
			float _Texture_1_Perlin_Power;
			float _Texture_2_Perlin_Power;
			float _Texture_4_Perlin_Power;
			float _Texture_3_Perlin_Power;
			half _Texture_1_Normal_Index;
			half _Texture_1_Normal_Power;
			float _Texture_2_Normal_Index;
			half _Texture_2_Normal_Power;
			float _Texture_3_Normal_Index;
			half _Texture_3_Normal_Power;
			float _Texture_4_Normal_Index;
			half _Texture_4_Normal_Power;
			float _Texture_5_Normal_Index;
			half _Texture_5_Normal_Power;
			float _Texture_6_Normal_Index;
			half _Texture_6_Normal_Power;
			float _Texture_7_Normal_Index;
			half _Texture_7_Normal_Power;
			float _Texture_8_Normal_Index;
			half _Texture_8_Normal_Power;
			half _Texture_9_Normal_Index;
			half _Texture_9_Normal_Power;
			half _Texture_10_Normal_Index;
			half _Texture_10_Normal_Power;
			half _Texture_11_Normal_Index;
			half _Texture_11_Normal_Power;
			half _Texture_12_Normal_Index;
			half _Texture_12_Normal_Power;
			half _Texture_13_Normal_Index;
			half _Texture_13_Normal_Power;
			half _Texture_14_Normal_Index;
			half _Texture_14_Normal_Power;
			half _Texture_15_Normal_Index;
			half _Texture_15_Normal_Power;
			half _Texture_16_Normal_Index;
			half _Texture_16_Normal_Power;
			half _Terrain_Specular;
			half _Terrain_Smoothness;
			half _Ambient_Occlusion_Power;
			
			
			void BuildSurfaceData ( FragInputs fragInputs, GlobalSurfaceDescription surfaceDescription, float3 V, PositionInputs posInput, out SurfaceData surfaceData )
			{
				ZERO_INITIALIZE ( SurfaceData, surfaceData );

				float3 normalTS = float3( 0.0f, 0.0f, 1.0f );
				normalTS = surfaceDescription.Normal;
				float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
				GetNormalWS ( fragInputs, normalTS, surfaceData.normalWS ,doubleSidedConstants);

				surfaceData.ambientOcclusion = 1.0f;

				surfaceData.baseColor = surfaceDescription.Albedo;
				surfaceData.perceptualSmoothness = surfaceDescription.Smoothness;
				surfaceData.ambientOcclusion = surfaceDescription.Occlusion;

				surfaceData.materialFeatures = MATERIALFEATUREFLAGS_LIT_STANDARD;

#ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
				surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SPECULAR_COLOR;
				surfaceData.specularColor = surfaceDescription.Specular;
#else
				surfaceData.metallic = surfaceDescription.Metallic;
#endif

#if defined(_MATERIAL_FEATURE_SUBSURFACE_SCATTERING) || defined(_MATERIAL_FEATURE_TRANSMISSION)
				surfaceData.diffusionProfileHash = asuint(surfaceDescription.DiffusionProfile);
#endif

#ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
				surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SUBSURFACE_SCATTERING;
				surfaceData.subsurfaceMask = surfaceDescription.SubsurfaceMask;

#else
				surfaceData.subsurfaceMask = 1.0f;
#endif

#ifdef _MATERIAL_FEATURE_TRANSMISSION
				surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
				surfaceData.thickness = surfaceDescription.Thickness;
#endif

				surfaceData.tangentWS = normalize ( fragInputs.worldToTangent[ 0 ].xyz );
				surfaceData.tangentWS = Orthonormalize ( surfaceData.tangentWS, surfaceData.normalWS );

#ifdef _MATERIAL_FEATURE_ANISOTROPY
				surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_ANISOTROPY;
				surfaceData.anisotropy = surfaceDescription.Anisotropy;

#else
				surfaceData.anisotropy = 0;
#endif

#ifdef _MATERIAL_FEATURE_CLEAR_COAT
				surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_CLEAR_COAT;
				surfaceData.coatMask = surfaceDescription.CoatMask;
#else
				surfaceData.coatMask = 0.0f;
#endif

#ifdef _MATERIAL_FEATURE_IRIDESCENCE
				surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_IRIDESCENCE;
				surfaceData.iridescenceThickness = surfaceDescription.IridescenceThickness;
				surfaceData.iridescenceMask = surfaceDescription.IridescenceMask;
#else
				surfaceData.iridescenceThickness = 0.0;
				surfaceData.iridescenceMask = 1.0;
#endif

				//ASE CUSTOM TAG
#ifdef _MATERIAL_FEATURE_TRANSPARENCY
				surfaceData.ior = surfaceDescription.IndexOfRefraction;
				surfaceData.transmittanceColor = surfaceDescription.TransmittanceColor;
				surfaceData.atDistance = surfaceDescription.TransmittanceAbsorptionDistance;
				surfaceData.transmittanceMask = surfaceDescription.TransmittanceMask;
#else
				surfaceData.ior = 1.0;
				surfaceData.transmittanceColor = float3( 1.0, 1.0, 1.0 );
				surfaceData.atDistance = 1000000.0;
				surfaceData.transmittanceMask = 0.0;
#endif

				surfaceData.specularOcclusion = GetSpecularOcclusionFromAmbientOcclusion (ClampNdotV (dot (surfaceData.normalWS, V)), surfaceData.ambientOcclusion, PerceptualSmoothnessToRoughness (surfaceData.perceptualSmoothness));

#if HAVE_DECALS
				if (_EnableDecals)
				{
					DecalSurfaceData decalSurfaceData = GetDecalSurfaceData (posInput, surfaceDescription.Alpha);
					ApplyDecalToSurfaceData (decalSurfaceData, surfaceData);
				}
#endif

#if defined(_BENTNORMALMAP) && defined(_ENABLESPECULAROCCLUSION)
				surfaceData.specularOcclusion = GetSpecularOcclusionFromBentAO ( V, bentNormalWS, surfaceData );
#elif defined(_MASKMAP)
				surfaceData.specularOcclusion = GetSpecularOcclusionFromAmbientOcclusion ( NdotV, surfaceData.ambientOcclusion, PerceptualSmoothnessToRoughness ( surfaceData.perceptualSmoothness ) );
#endif
			}

            void GetSurfaceAndBuiltinData( GlobalSurfaceDescription surfaceDescription, FragInputs fragInputs, float3 V, inout PositionInputs posInput, out SurfaceData surfaceData, out BuiltinData builtinData)
            {
#if _ALPHATEST_ON
				DoAlphaTest ( surfaceDescription.Alpha, surfaceDescription.AlphaClipThreshold );
#endif
				BuildSurfaceData (fragInputs, surfaceDescription, V, posInput, surfaceData);
        
               // Builtin Data
                // For back lighting we use the oposite vertex normal 
				 InitBuiltinData(surfaceDescription.Alpha, surfaceData.normalWS, -fragInputs.worldToTangent[2], posInput.positionWS, fragInputs.texCoord1, fragInputs.texCoord2, builtinData);
        
		        builtinData.emissiveColor =             surfaceDescription.Emission;
                builtinData.distortion =                float2(0.0, 0.0);           // surfaceDescription.Distortion -- if distortion pass
                builtinData.distortionBlur =            0.0;                        // surfaceDescription.DistortionBlur -- if distortion pass
                builtinData.depthOffset =               0.0;                        // ApplyPerPixelDisplacement(input, V, layerTexCoord, blendMasks); #ifdef _DEPTHOFFSET_ON : ApplyDepthOffsetPositionInput(V, depthOffset, GetWorldToHClipMatrix(), posInput);
        
                PostInitBuiltinData(V, posInput, surfaceData, builtinData);
            }
        
           
			CBUFFER_START ( UnityMetaPass )
				bool4 unity_MetaVertexControl;
				bool4 unity_MetaFragmentControl;
			CBUFFER_END


			float unity_OneOverOutputBoost;
			float unity_MaxOutputValue;

			PackedVaryingsMeshToPS Vert ( AttributesMesh inputMesh  )
			{
				PackedVaryingsMeshToPS outputPackedVaryingsMeshToPS;

				UNITY_SETUP_INSTANCE_ID ( inputMesh );
				UNITY_TRANSFER_INSTANCE_ID ( inputMesh, outputPackedVaryingsMeshToPS );
				TerrainInstancing(inputMesh.positionOS, inputMesh.normalOS, inputMesh.tangentOS);
				float3 ase_worldPos = GetAbsolutePositionWS( TransformObjectToWorld( (inputMesh.positionOS).xyz ) );
				outputPackedVaryingsMeshToPS.ase_texcoord1.xyz = ase_worldPos;
				
				outputPackedVaryingsMeshToPS.ase_texcoord.xy = inputMesh.uv0;
				
				//setting value to unused interpolator channels and avoid initialization warnings
				outputPackedVaryingsMeshToPS.ase_texcoord.zw = 0;
				outputPackedVaryingsMeshToPS.ase_texcoord1.w = 0;
				float3 vertexValue =  float3( 0, 0, 0 ) ;
				#ifdef ASE_ABSOLUTE_VERTEX_POS
				inputMesh.positionOS.xyz = vertexValue;
				#else
				inputMesh.positionOS.xyz += vertexValue;
				#endif

				inputMesh.normalOS =  inputMesh.normalOS ;

				float2 uv;

				if ( unity_MetaVertexControl.x )
				{
					uv = inputMesh.uv1 * unity_LightmapST.xy + unity_LightmapST.zw;
				}
				else if ( unity_MetaVertexControl.y )
				{
					uv = inputMesh.uv2 * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
				}

				outputPackedVaryingsMeshToPS.positionCS = float4( uv * 2.0 - 1.0, inputMesh.positionOS.z > 0 ? 1.0e-4 : 0.0, 1.0 );

				return outputPackedVaryingsMeshToPS;
			}

			float4 Frag ( PackedVaryingsMeshToPS packedInput  ) : SV_Target
			{
				FragInputs input;
				ZERO_INITIALIZE ( FragInputs, input );
				input.worldToTangent = k_identity3x3;
				input.positionSS = packedInput.positionCS;

				PositionInputs posInput = GetPositionInput ( input.positionSS.xy, _ScreenSize.zw, input.positionSS.z, input.positionSS.w, input.positionRWS );

				float3 V = 0;

				SurfaceData surfaceData;
				BuiltinData builtinData;

				GlobalSurfaceDescription surfaceDescription = ( GlobalSurfaceDescription ) 0;
				float2 uv02588 = packedInput.ase_texcoord.xy * float2( 1,1 ) + float2( 0,0 );
				float4 tex2DNode4371 = tex2D( _Texture_Splat_4, uv02588 );
				float4 tex2DNode4370 = tex2D( _Texture_Splat_3, uv02588 );
				float4 tex2DNode4369 = tex2D( _Texture_Splat_2, uv02588 );
				float4 tex2DNode4368 = tex2D( _Texture_Splat_1, uv02588 );
				float3 ase_worldPos = packedInput.ase_texcoord1.xyz;
				float3 break6348 = ase_worldPos;
				float2 appendResult6281 = (float2(break6348.x , break6348.z));
				half2 Top_Bottom1999 = appendResult6281;
				float temp_output_3830_0 = ( 1.0 / _Texture_1_Tiling );
				float2 appendResult3284 = (float2(temp_output_3830_0 , temp_output_3830_0));
				float2 temp_output_3275_0 = ( Top_Bottom1999 * appendResult3284 );
				float4 texArray3287 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, temp_output_3275_0, _Texture_1_Albedo_Index );
				float4 texArray3293 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, ( temp_output_3275_0 / _Texture_1_Far_Multiplier ), _Texture_1_Albedo_Index );
				float3 break6201 = abs( ( ase_worldPos - _WorldSpaceCameraPos ) );
				float clampResult297 = clamp( pow( ( max( max( break6201.x , break6201.y ) , break6201.z ) / _UV_Mix_Start_Distance ) , _UV_Mix_Power ) , 0.0 , 1.0 );
				half UVmixDistance636 = clampResult297;
				float4 lerpResult5739 = lerp( texArray3287 , texArray3293 , UVmixDistance636);
				float4 ifLocalVar6174 = 0;
				UNITY_BRANCH 
				if( _Texture_1_Albedo_Index > -1.0 )
				ifLocalVar6174 = ( lerpResult5739 * _Texture_1_Color );
				half4 Texture_1_Final950 = ifLocalVar6174;
				float temp_output_3831_0 = ( 1.0 / _Texture_2_Tiling );
				float2 appendResult3349 = (float2(temp_output_3831_0 , temp_output_3831_0));
				float2 temp_output_3343_0 = ( Top_Bottom1999 * appendResult3349 );
				float4 texArray3338 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, temp_output_3343_0, _Texture_2_Albedo_Index );
				float4 texArray3339 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, ( temp_output_3343_0 / _Texture_2_Far_Multiplier ), _Texture_2_Albedo_Index );
				float4 lerpResult5749 = lerp( texArray3338 , texArray3339 , UVmixDistance636);
				float4 ifLocalVar6128 = 0;
				UNITY_BRANCH 
				if( _Texture_2_Albedo_Index > -1.0 )
				ifLocalVar6128 = ( lerpResult5749 * _Texture_2_Color );
				half4 Texture_2_Final3385 = ifLocalVar6128;
				float temp_output_3832_0 = ( 1.0 / _Texture_3_Tiling );
				float2 appendResult3415 = (float2(temp_output_3832_0 , temp_output_3832_0));
				float2 temp_output_3410_0 = ( Top_Bottom1999 * appendResult3415 );
				float4 texArray3405 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, temp_output_3410_0, _Texture_3_Albedo_Index );
				float4 texArray3406 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, ( temp_output_3410_0 / _Texture_3_Far_Multiplier ), _Texture_3_Albedo_Index );
				float4 lerpResult5759 = lerp( texArray3405 , texArray3406 , UVmixDistance636);
				float4 ifLocalVar6130 = 0;
				UNITY_BRANCH 
				if( _Texture_3_Albedo_Index > -1.0 )
				ifLocalVar6130 = ( lerpResult5759 * _Texture_3_Color );
				half4 Texture_3_Final3451 = ifLocalVar6130;
				float2 temp_output_3477_0 = ( Top_Bottom1999 * ( 1.0 / _Texture_4_Tiling ) );
				float4 texArray3472 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, temp_output_3477_0, _Texture_4_Albedo_Index );
				float4 texArray3473 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, ( temp_output_3477_0 / _Texture_4_Far_Multiplier ), _Texture_4_Albedo_Index );
				float4 lerpResult5761 = lerp( texArray3472 , texArray3473 , UVmixDistance636);
				float4 ifLocalVar6132 = 0;
				UNITY_BRANCH 
				if( _Texture_4_Albedo_Index > -1.0 )
				ifLocalVar6132 = ( lerpResult5761 * _Texture_4_Color );
				half4 Texture_4_Final3518 = ifLocalVar6132;
				float4 layeredBlendVar5643 = tex2DNode4368;
				float4 layeredBlend5643 = ( lerp( lerp( lerp( lerp( float4( 0,0,0,0 ) , Texture_1_Final950 , layeredBlendVar5643.x ) , Texture_2_Final3385 , layeredBlendVar5643.y ) , Texture_3_Final3451 , layeredBlendVar5643.z ) , Texture_4_Final3518 , layeredBlendVar5643.w ) );
				float temp_output_4397_0 = ( 1.0 / _Texture_5_Tiling );
				float2 appendResult4399 = (float2(temp_output_4397_0 , temp_output_4397_0));
				float2 temp_output_4416_0 = ( Top_Bottom1999 * appendResult4399 );
				float4 texArray4450 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, temp_output_4416_0, _Texture_5_Albedo_Index );
				float4 texArray4445 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, ( temp_output_4416_0 / _Texture_5_Far_Multiplier ), _Texture_5_Albedo_Index );
				float4 lerpResult5789 = lerp( texArray4450 , texArray4445 , UVmixDistance636);
				float4 ifLocalVar6134 = 0;
				UNITY_BRANCH 
				if( _Texture_5_Albedo_Index > -1.0 )
				ifLocalVar6134 = ( lerpResult5789 * _Texture_5_Color );
				half4 Texture_5_Final4396 = ifLocalVar6134;
				float temp_output_4469_0 = ( 1.0 / _Texture_6_Tiling );
				float2 appendResult4471 = (float2(temp_output_4469_0 , temp_output_4469_0));
				float2 temp_output_4485_0 = ( Top_Bottom1999 * appendResult4471 );
				float4 texArray4517 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, temp_output_4485_0, _Texture_6_Albedo_Index );
				float4 texArray4512 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, ( temp_output_4485_0 / _Texture_6_Far_Multiplier ), _Texture_6_Albedo_Index );
				float4 lerpResult5794 = lerp( texArray4517 , texArray4512 , UVmixDistance636);
				float4 ifLocalVar6136 = 0;
				UNITY_BRANCH 
				if( _Texture_6_Albedo_Index > -1.0 )
				ifLocalVar6136 = ( lerpResult5794 * _Texture_6_Color );
				half4 Texture_6_Final4536 = ifLocalVar6136;
				float temp_output_4543_0 = ( 1.0 / _Texture_7_Tiling );
				float2 appendResult4545 = (float2(temp_output_4543_0 , temp_output_4543_0));
				float2 temp_output_4559_0 = ( Top_Bottom1999 * appendResult4545 );
				float4 texArray4591 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, temp_output_4559_0, _Texture_7_Albedo_Index );
				float4 texArray4586 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, ( temp_output_4559_0 / _Texture_7_Far_Multiplier ), _Texture_7_Albedo_Index );
				float4 lerpResult5798 = lerp( texArray4591 , texArray4586 , UVmixDistance636);
				float4 ifLocalVar6139 = 0;
				UNITY_BRANCH 
				if( _Texture_7_Albedo_Index > -1.0 )
				ifLocalVar6139 = ( lerpResult5798 * _Texture_7_Color );
				half4 Texture_7_Final4614 = ifLocalVar6139;
				float temp_output_4617_0 = ( 1.0 / _Texture_8_Tiling );
				float2 appendResult4619 = (float2(temp_output_4617_0 , temp_output_4617_0));
				float2 temp_output_4633_0 = ( Top_Bottom1999 * appendResult4619 );
				float4 texArray4665 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, temp_output_4633_0, _Texture_8_Albedo_Index );
				float4 texArray4660 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, ( temp_output_4633_0 / _Texture_8_Far_Multiplier ), _Texture_8_Albedo_Index );
				float4 lerpResult5802 = lerp( texArray4665 , texArray4660 , UVmixDistance636);
				float4 ifLocalVar6141 = 0;
				UNITY_BRANCH 
				if( _Texture_8_Albedo_Index > -1.0 )
				ifLocalVar6141 = ( lerpResult5802 * _Texture_8_Color );
				half4 Texture_8_Final4689 = ifLocalVar6141;
				float4 layeredBlendVar5644 = tex2DNode4369;
				float4 layeredBlend5644 = ( lerp( lerp( lerp( lerp( layeredBlend5643 , Texture_5_Final4396 , layeredBlendVar5644.x ) , Texture_6_Final4536 , layeredBlendVar5644.y ) , Texture_7_Final4614 , layeredBlendVar5644.z ) , Texture_8_Final4689 , layeredBlendVar5644.w ) );
				float temp_output_4703_0 = ( 1.0 / _Texture_9_Tiling );
				float2 appendResult4736 = (float2(temp_output_4703_0 , temp_output_4703_0));
				float2 temp_output_4712_0 = ( Top_Bottom1999 * appendResult4736 );
				float4 texArray4723 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, temp_output_4712_0, _Texture_9_Albedo_Index );
				float4 texArray4889 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, ( temp_output_4712_0 / _Texture_9_Far_Multiplier ), _Texture_9_Albedo_Index );
				float4 lerpResult5845 = lerp( texArray4723 , texArray4889 , UVmixDistance636);
				float4 ifLocalVar6143 = 0;
				UNITY_BRANCH 
				if( _Texture_9_Albedo_Index > -1.0 )
				ifLocalVar6143 = ( lerpResult5845 * _Texture_9_Color );
				half4 Texture_9_Final4987 = ifLocalVar6143;
				float temp_output_4734_0 = ( 1.0 / _Texture_10_Tiling );
				float2 appendResult4738 = (float2(temp_output_4734_0 , temp_output_4734_0));
				float2 temp_output_4793_0 = ( Top_Bottom1999 * appendResult4738 );
				float4 texArray4899 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, temp_output_4793_0, _Texture_10_Albedo_Index );
				float4 texArray4913 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, ( temp_output_4793_0 / _Texture_10_Far_Multiplier ), _Texture_10_Albedo_Index );
				float4 lerpResult5841 = lerp( texArray4899 , texArray4913 , UVmixDistance636);
				float4 ifLocalVar6145 = 0;
				UNITY_BRANCH 
				if( _Texture_10_Albedo_Index > -1.0 )
				ifLocalVar6145 = ( lerpResult5841 * _Texture_10_Color );
				half4 Texture_10_Final4994 = ifLocalVar6145;
				float temp_output_4739_0 = ( 1.0 / _Texture_11_Tiling );
				float2 appendResult4741 = (float2(temp_output_4739_0 , temp_output_4739_0));
				float2 temp_output_4817_0 = ( Top_Bottom1999 * appendResult4741 );
				float4 texArray4928 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, temp_output_4817_0, _Texture_11_Albedo_Index );
				float4 texArray4923 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, ( temp_output_4817_0 / _Texture_11_Far_Multiplier ), _Texture_11_Albedo_Index );
				float4 lerpResult5837 = lerp( texArray4928 , texArray4923 , UVmixDistance636);
				float4 ifLocalVar6147 = 0;
				UNITY_BRANCH 
				if( _Texture_11_Albedo_Index > -1.0 )
				ifLocalVar6147 = ( lerpResult5837 * _Texture_11_Color );
				half4 Texture_11_Final4996 = ifLocalVar6147;
				float temp_output_4745_0 = ( 1.0 / _Texture_12_Tiling );
				float2 appendResult4751 = (float2(temp_output_4745_0 , temp_output_4745_0));
				float2 temp_output_4849_0 = ( Top_Bottom1999 * appendResult4751 );
				float4 texArray4954 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, temp_output_4849_0, _Texture_12_Albedo_Index );
				float4 texArray4952 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, ( temp_output_4849_0 / _Texture_12_Far_Multiplier ), _Texture_12_Albedo_Index );
				float4 lerpResult5833 = lerp( texArray4954 , texArray4952 , UVmixDistance636);
				float4 ifLocalVar6169 = 0;
				UNITY_BRANCH 
				if( _Texture_12_Albedo_Index > -1.0 )
				ifLocalVar6169 = ( lerpResult5833 * _Texture_12_Color );
				half4 Texture_12_Final4997 = ifLocalVar6169;
				float4 layeredBlendVar5645 = tex2DNode4370;
				float4 layeredBlend5645 = ( lerp( lerp( lerp( lerp( layeredBlend5644 , Texture_9_Final4987 , layeredBlendVar5645.x ) , Texture_10_Final4994 , layeredBlendVar5645.y ) , Texture_11_Final4996 , layeredBlendVar5645.z ) , Texture_12_Final4997 , layeredBlendVar5645.w ) );
				float temp_output_5125_0 = ( 1.0 / _Texture_13_Tiling );
				float2 appendResult5027 = (float2(temp_output_5125_0 , temp_output_5125_0));
				float2 temp_output_5037_0 = ( Top_Bottom1999 * appendResult5027 );
				float4 texArray5043 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, temp_output_5037_0, _Texture_13_Albedo_Index );
				float4 texArray5034 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, ( temp_output_5037_0 / _Texture_13_Far_Multiplier ), _Texture_13_Albedo_Index );
				float4 lerpResult5829 = lerp( texArray5043 , texArray5034 , UVmixDistance636);
				float4 ifLocalVar6151 = 0;
				UNITY_BRANCH 
				if( _Texture_13_Albedo_Index > -1.0 )
				ifLocalVar6151 = ( lerpResult5829 * _Texture_13_Color );
				half4 Texture_13_Final5058 = ifLocalVar6151;
				float temp_output_5006_0 = ( 1.0 / _Texture_14_Tiling );
				float2 appendResult5033 = (float2(temp_output_5006_0 , temp_output_5006_0));
				float2 temp_output_5022_0 = ( Top_Bottom1999 * appendResult5033 );
				float4 texArray5202 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, temp_output_5022_0, _Texture_14_Albedo_Index );
				float4 texArray5171 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, ( temp_output_5022_0 / _Texture_14_Far_Multiplier ), _Texture_14_Albedo_Index );
				float4 lerpResult5825 = lerp( texArray5202 , texArray5171 , UVmixDistance636);
				float4 ifLocalVar6153 = 0;
				UNITY_BRANCH 
				if( _Texture_14_Albedo_Index > -1.0 )
				ifLocalVar6153 = ( lerpResult5825 * _Texture_14_Color );
				half4 Texture_14_Final5163 = ifLocalVar6153;
				float temp_output_5210_0 = ( 1.0 / _Texture_15_Tiling );
				float2 appendResult5212 = (float2(temp_output_5210_0 , temp_output_5210_0));
				float2 temp_output_5226_0 = ( Top_Bottom1999 * appendResult5212 );
				float4 texArray5259 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, temp_output_5226_0, _Texture_15_Albedo_Index );
				float4 texArray5272 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, ( temp_output_5226_0 / _Texture_15_Far_Multiplier ), _Texture_15_Albedo_Index );
				float4 lerpResult5821 = lerp( texArray5259 , texArray5272 , UVmixDistance636);
				float4 ifLocalVar6155 = 0;
				UNITY_BRANCH 
				if( _Texture_15_Albedo_Index > -1.0 )
				ifLocalVar6155 = ( lerpResult5821 * _Texture_15_Color );
				half4 Texture_15_Final5270 = ifLocalVar6155;
				float temp_output_5075_0 = ( 1.0 / _Texture_16_Tiling );
				float2 appendResult5078 = (float2(temp_output_5075_0 , temp_output_5075_0));
				float2 temp_output_5083_0 = ( Top_Bottom1999 * appendResult5078 );
				float4 texArray5139 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, temp_output_5083_0, _Texture_16_Albedo_Index );
				float4 texArray5143 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, ( temp_output_5083_0 / _Texture_16_Far_Multiplier ), _Texture_16_Albedo_Index );
				float4 lerpResult5817 = lerp( texArray5139 , texArray5143 , UVmixDistance636);
				float4 ifLocalVar6183 = 0;
				UNITY_BRANCH 
				if( _Texture_16_Albedo_Index > -1.0 )
				ifLocalVar6183 = ( lerpResult5817 * _Texture_16_Color );
				half4 Texture_16_Final5094 = ifLocalVar6183;
				float4 layeredBlendVar5646 = tex2DNode4371;
				float4 layeredBlend5646 = ( lerp( lerp( lerp( lerp( layeredBlend5645 , Texture_13_Final5058 , layeredBlendVar5646.x ) , Texture_14_Final5163 , layeredBlendVar5646.y ) , Texture_15_Final5270 , layeredBlendVar5646.z ) , Texture_16_Final5094 , layeredBlendVar5646.w ) );
				float3 appendResult6259 = (float3(layeredBlend5646.xyz));
				float2 temp_cast_1 = (( _Geological_Map_Offset_Close + ( ase_worldPos.y / _Geological_Tiling_Close ) )).xx;
				float3 appendResult6257 = (float3(tex2D( _Texture_Geological_Map, temp_cast_1 ).rgb));
				float2 temp_cast_3 = (( ( ase_worldPos.y / _Geological_Tiling_Far ) + _Geological_Map_Offset_Far )).xx;
				float3 appendResult6256 = (float3(tex2D( _Texture_Geological_Map, temp_cast_3 ).rgb));
				float3 lerpResult1315 = lerp( ( _Geological_Map_Close_Power * ( appendResult6257 + float3( -0.3,-0.3,-0.3 ) ) ) , ( _Geological_Map_Far_Power * ( appendResult6256 + float3( -0.3,-0.3,-0.3 ) ) ) , UVmixDistance636);
				half Splat4_A2546 = tex2DNode4371.a;
				half Splat4_B2545 = tex2DNode4371.b;
				half Splat4_G2544 = tex2DNode4371.g;
				half Splat4_R2543 = tex2DNode4371.r;
				half Splat3_A2540 = tex2DNode4370.a;
				half Splat3_B2539 = tex2DNode4370.b;
				half Splat3_G2538 = tex2DNode4370.g;
				half Splat3_R2537 = tex2DNode4370.r;
				half Splat2_A2109 = tex2DNode4369.a;
				half Splat2_B2108 = tex2DNode4369.b;
				half Splat2_G2107 = tex2DNode4369.g;
				half Splat2_R2106 = tex2DNode4369.r;
				half Splat1_R1438 = tex2DNode4368.r;
				half Splat1_G1441 = tex2DNode4368.g;
				half Splat1_A1491 = tex2DNode4368.a;
				half Splat1_B1442 = tex2DNode4368.b;
				float3 blendOpSrc4362 = appendResult6259;
				float3 blendOpDest4362 = ( lerpResult1315 * ( ( _Texture_16_Geological_Power * Splat4_A2546 ) + ( ( _Texture_15_Geological_Power * Splat4_B2545 ) + ( ( _Texture_14_Geological_Power * Splat4_G2544 ) + ( ( _Texture_13_Geological_Power * Splat4_R2543 ) + ( ( _Texture_12_Geological_Power * Splat3_A2540 ) + ( ( _Texture_11_Geological_Power * Splat3_B2539 ) + ( ( _Texture_10_Geological_Power * Splat3_G2538 ) + ( ( _Texture_9_Geological_Power * Splat3_R2537 ) + ( ( _Texture_8_Geological_Power * Splat2_A2109 ) + ( ( _Texture_7_Geological_Power * Splat2_B2108 ) + ( ( _Texture_6_Geological_Power * Splat2_G2107 ) + ( ( _Texture_5_Geological_Power * Splat2_R2106 ) + ( ( _Texture_1_Geological_Power * Splat1_R1438 ) + ( ( _Texture_2_Geological_Power * Splat1_G1441 ) + ( ( _Texture_4_Geological_Power * Splat1_A1491 ) + ( _Texture_3_Geological_Power * Splat1_B1442 ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) );
				float3 clampResult5715 = clamp( ( saturate( ( blendOpSrc4362 + blendOpDest4362 ) )) , float3( 0,0,0 ) , float3( 1,1,1 ) );
				
				float4 texArray5480 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Normal, sampler_Texture_Array_Normal, ( Top_Bottom1999 / _Perlin_Normal_Tiling_Close ), (float)_Texture_Perlin_Normal_Index );
				float2 appendResult11_g1070 = (float2(texArray5480.w , texArray5480.y));
				float2 temp_output_4_0_g1070 = ( ( ( appendResult11_g1070 * float2( 2,2 ) ) + float2( -1,-1 ) ) * _Perlin_Normal_Power_Close );
				float2 break8_g1070 = temp_output_4_0_g1070;
				float dotResult5_g1070 = dot( temp_output_4_0_g1070 , temp_output_4_0_g1070 );
				float temp_output_9_0_g1070 = sqrt( ( 1.0 - saturate( dotResult5_g1070 ) ) );
				float3 appendResult20_g1070 = (float3(break8_g1070.x , break8_g1070.y , temp_output_9_0_g1070));
				float4 texArray4374 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Normal, sampler_Texture_Array_Normal, ( Top_Bottom1999 / _Perlin_Normal_Tiling_Far ), (float)_Texture_Perlin_Normal_Index );
				float2 appendResult11_g1069 = (float2(texArray4374.w , texArray4374.y));
				float2 temp_output_4_0_g1069 = ( ( ( appendResult11_g1069 * float2( 2,2 ) ) + float2( -1,-1 ) ) * _Perlin_Normal_Power );
				float2 break8_g1069 = temp_output_4_0_g1069;
				float dotResult5_g1069 = dot( temp_output_4_0_g1069 , temp_output_4_0_g1069 );
				float temp_output_9_0_g1069 = sqrt( ( 1.0 - saturate( dotResult5_g1069 ) ) );
				float3 appendResult20_g1069 = (float3(break8_g1069.x , break8_g1069.y , temp_output_9_0_g1069));
				float3 lerpResult5460 = lerp( appendResult20_g1070 , appendResult20_g1069 , UVmixDistance636);
				float clampResult3775 = clamp( ( ( _Texture_16_Perlin_Power * Splat4_A2546 ) + ( ( _Texture_15_Perlin_Power * Splat4_B2545 ) + ( ( _Texture_14_Perlin_Power * Splat4_G2544 ) + ( ( _Texture_13_Perlin_Power * Splat4_R2543 ) + ( ( _Texture_12_Perlin_Power * Splat3_A2540 ) + ( ( _Texture_11_Perlin_Power * Splat3_B2539 ) + ( ( _Texture_10_Perlin_Power * Splat3_G2538 ) + ( ( _Texture_9_Perlin_Power * Splat3_R2537 ) + ( ( _Texture_8_Perlin_Power * Splat2_A2109 ) + ( ( _Texture_7_Perlin_Power * Splat2_B2108 ) + ( ( _Texture_6_Perlin_Power * Splat2_G2107 ) + ( ( _Texture_5_Perlin_Power * Splat2_R2106 ) + ( ( _Texture_1_Perlin_Power * Splat1_R1438 ) + ( ( _Texture_2_Perlin_Power * Splat1_G1441 ) + ( ( _Texture_4_Perlin_Power * Splat1_A1491 ) + ( _Texture_3_Perlin_Power * Splat1_B1442 ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) , 0.0 , 1.0 );
				float3 lerpResult3776 = lerp( float3( 0,0,1 ) , lerpResult5460 , clampResult3775);
				float4 texArray3299 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Normal, sampler_Texture_Array_Normal, temp_output_3275_0, _Texture_1_Normal_Index );
				float2 appendResult11_g1049 = (float2(texArray3299.w , texArray3299.y));
				float2 temp_output_4_0_g1049 = ( ( ( appendResult11_g1049 * float2( 2,2 ) ) + float2( -1,-1 ) ) * _Texture_1_Normal_Power );
				float2 break8_g1049 = temp_output_4_0_g1049;
				float dotResult5_g1049 = dot( temp_output_4_0_g1049 , temp_output_4_0_g1049 );
				float temp_output_9_0_g1049 = sqrt( ( 1.0 - saturate( dotResult5_g1049 ) ) );
				float3 appendResult20_g1049 = (float3(break8_g1049.x , break8_g1049.y , temp_output_9_0_g1049));
				half3 EmptyNRM6172 = half3(0,0,1);
				float3 ifLocalVar6127 = 0;
				UNITY_BRANCH 
				if( _Texture_1_Normal_Index <= -1.0 )
				ifLocalVar6127 = EmptyNRM6172;
				else
				ifLocalVar6127 = appendResult20_g1049;
				half3 Normal_1569 = ifLocalVar6127;
				float4 texArray3350 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Normal, sampler_Texture_Array_Normal, temp_output_3343_0, _Texture_2_Normal_Index );
				float2 appendResult11_g1048 = (float2(texArray3350.w , texArray3350.y));
				float2 temp_output_4_0_g1048 = ( ( ( appendResult11_g1048 * float2( 2,2 ) ) + float2( -1,-1 ) ) * _Texture_2_Normal_Power );
				float2 break8_g1048 = temp_output_4_0_g1048;
				float dotResult5_g1048 = dot( temp_output_4_0_g1048 , temp_output_4_0_g1048 );
				float temp_output_9_0_g1048 = sqrt( ( 1.0 - saturate( dotResult5_g1048 ) ) );
				float3 appendResult20_g1048 = (float3(break8_g1048.x , break8_g1048.y , temp_output_9_0_g1048));
				float3 ifLocalVar6129 = 0;
				UNITY_BRANCH 
				if( _Texture_2_Normal_Index <= -1.0 )
				ifLocalVar6129 = EmptyNRM6172;
				else
				ifLocalVar6129 = appendResult20_g1048;
				half3 Normal_23361 = ifLocalVar6129;
				float4 texArray3416 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Normal, sampler_Texture_Array_Normal, temp_output_3410_0, _Texture_3_Normal_Index );
				float2 appendResult11_g1050 = (float2(texArray3416.w , texArray3416.y));
				float2 temp_output_4_0_g1050 = ( ( ( appendResult11_g1050 * float2( 2,2 ) ) + float2( -1,-1 ) ) * _Texture_3_Normal_Power );
				float2 break8_g1050 = temp_output_4_0_g1050;
				float dotResult5_g1050 = dot( temp_output_4_0_g1050 , temp_output_4_0_g1050 );
				float temp_output_9_0_g1050 = sqrt( ( 1.0 - saturate( dotResult5_g1050 ) ) );
				float3 appendResult20_g1050 = (float3(break8_g1050.x , break8_g1050.y , temp_output_9_0_g1050));
				float3 ifLocalVar6131 = 0;
				UNITY_BRANCH 
				if( _Texture_3_Normal_Index > -1.0 )
				ifLocalVar6131 = appendResult20_g1050;
				half3 Normal_33452 = ifLocalVar6131;
				float4 texArray3483 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Normal, sampler_Texture_Array_Normal, temp_output_3477_0, _Texture_4_Normal_Index );
				float2 appendResult11_g1051 = (float2(texArray3483.w , texArray3483.y));
				float2 temp_output_4_0_g1051 = ( ( ( appendResult11_g1051 * float2( 2,2 ) ) + float2( -1,-1 ) ) * _Texture_4_Normal_Power );
				float2 break8_g1051 = temp_output_4_0_g1051;
				float dotResult5_g1051 = dot( temp_output_4_0_g1051 , temp_output_4_0_g1051 );
				float temp_output_9_0_g1051 = sqrt( ( 1.0 - saturate( dotResult5_g1051 ) ) );
				float3 appendResult20_g1051 = (float3(break8_g1051.x , break8_g1051.y , temp_output_9_0_g1051));
				float3 ifLocalVar6133 = 0;
				UNITY_BRANCH 
				if( _Texture_4_Normal_Index <= -1.0 )
				ifLocalVar6133 = EmptyNRM6172;
				else
				ifLocalVar6133 = appendResult20_g1051;
				half3 Normal_43519 = ifLocalVar6133;
				float4 layeredBlendVar5639 = tex2DNode4368;
				float3 layeredBlend5639 = ( lerp( lerp( lerp( lerp( float3( 0,0,0 ) , Normal_1569 , layeredBlendVar5639.x ) , Normal_23361 , layeredBlendVar5639.y ) , Normal_33452 , layeredBlendVar5639.z ) , Normal_43519 , layeredBlendVar5639.w ) );
				float4 texArray4424 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Normal, sampler_Texture_Array_Normal, temp_output_4416_0, _Texture_5_Normal_Index );
				float2 appendResult11_g1058 = (float2(texArray4424.w , texArray4424.y));
				float2 temp_output_4_0_g1058 = ( ( ( appendResult11_g1058 * float2( 2,2 ) ) + float2( -1,-1 ) ) * _Texture_5_Normal_Power );
				float2 break8_g1058 = temp_output_4_0_g1058;
				float dotResult5_g1058 = dot( temp_output_4_0_g1058 , temp_output_4_0_g1058 );
				float temp_output_9_0_g1058 = sqrt( ( 1.0 - saturate( dotResult5_g1058 ) ) );
				float3 appendResult20_g1058 = (float3(break8_g1058.x , break8_g1058.y , temp_output_9_0_g1058));
				float3 ifLocalVar6135 = 0;
				UNITY_BRANCH 
				if( _Texture_5_Normal_Index <= -1.0 )
				ifLocalVar6135 = EmptyNRM6172;
				else
				ifLocalVar6135 = appendResult20_g1058;
				half3 Normal_54456 = ifLocalVar6135;
				float4 texArray4493 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Normal, sampler_Texture_Array_Normal, temp_output_4485_0, _Texture_6_Normal_Index );
				float2 appendResult11_g1059 = (float2(texArray4493.w , texArray4493.y));
				float2 temp_output_4_0_g1059 = ( ( ( appendResult11_g1059 * float2( 2,2 ) ) + float2( -1,-1 ) ) * _Texture_6_Normal_Power );
				float2 break8_g1059 = temp_output_4_0_g1059;
				float dotResult5_g1059 = dot( temp_output_4_0_g1059 , temp_output_4_0_g1059 );
				float temp_output_9_0_g1059 = sqrt( ( 1.0 - saturate( dotResult5_g1059 ) ) );
				float3 appendResult20_g1059 = (float3(break8_g1059.x , break8_g1059.y , temp_output_9_0_g1059));
				float3 ifLocalVar6138 = 0;
				UNITY_BRANCH 
				if( _Texture_6_Normal_Index <= -1.0 )
				ifLocalVar6138 = EmptyNRM6172;
				else
				ifLocalVar6138 = appendResult20_g1059;
				half3 Normal_64537 = ifLocalVar6138;
				float4 texArray4567 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Normal, sampler_Texture_Array_Normal, temp_output_4559_0, _Texture_7_Normal_Index );
				float2 appendResult11_g1056 = (float2(texArray4567.w , texArray4567.y));
				float2 temp_output_4_0_g1056 = ( ( ( appendResult11_g1056 * float2( 2,2 ) ) + float2( -1,-1 ) ) * _Texture_7_Normal_Power );
				float2 break8_g1056 = temp_output_4_0_g1056;
				float dotResult5_g1056 = dot( temp_output_4_0_g1056 , temp_output_4_0_g1056 );
				float temp_output_9_0_g1056 = sqrt( ( 1.0 - saturate( dotResult5_g1056 ) ) );
				float3 appendResult20_g1056 = (float3(break8_g1056.x , break8_g1056.y , temp_output_9_0_g1056));
				float3 ifLocalVar6140 = 0;
				UNITY_BRANCH 
				if( _Texture_7_Normal_Index <= -1.0 )
				ifLocalVar6140 = EmptyNRM6172;
				else
				ifLocalVar6140 = appendResult20_g1056;
				half3 Normal_74615 = ifLocalVar6140;
				float4 texArray4641 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Normal, sampler_Texture_Array_Normal, temp_output_4633_0, _Texture_8_Normal_Index );
				float2 appendResult11_g1057 = (float2(texArray4641.w , texArray4641.y));
				float2 temp_output_4_0_g1057 = ( ( ( appendResult11_g1057 * float2( 2,2 ) ) + float2( -1,-1 ) ) * _Texture_8_Normal_Power );
				float2 break8_g1057 = temp_output_4_0_g1057;
				float dotResult5_g1057 = dot( temp_output_4_0_g1057 , temp_output_4_0_g1057 );
				float temp_output_9_0_g1057 = sqrt( ( 1.0 - saturate( dotResult5_g1057 ) ) );
				float3 appendResult20_g1057 = (float3(break8_g1057.x , break8_g1057.y , temp_output_9_0_g1057));
				float3 ifLocalVar6142 = 0;
				UNITY_BRANCH 
				if( _Texture_8_Normal_Index <= -1.0 )
				ifLocalVar6142 = EmptyNRM6172;
				else
				ifLocalVar6142 = appendResult20_g1057;
				half3 Normal_84690 = ifLocalVar6142;
				float4 layeredBlendVar5640 = tex2DNode4369;
				float3 layeredBlend5640 = ( lerp( lerp( lerp( lerp( layeredBlend5639 , Normal_54456 , layeredBlendVar5640.x ) , Normal_64537 , layeredBlendVar5640.y ) , Normal_74615 , layeredBlendVar5640.z ) , Normal_84690 , layeredBlendVar5640.w ) );
				float4 texArray4788 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Normal, sampler_Texture_Array_Normal, temp_output_4712_0, _Texture_9_Normal_Index );
				float2 appendResult11_g1062 = (float2(texArray4788.w , texArray4788.y));
				float2 temp_output_4_0_g1062 = ( ( ( appendResult11_g1062 * float2( 2,2 ) ) + float2( -1,-1 ) ) * _Texture_9_Normal_Power );
				float2 break8_g1062 = temp_output_4_0_g1062;
				float dotResult5_g1062 = dot( temp_output_4_0_g1062 , temp_output_4_0_g1062 );
				float temp_output_9_0_g1062 = sqrt( ( 1.0 - saturate( dotResult5_g1062 ) ) );
				float3 appendResult20_g1062 = (float3(break8_g1062.x , break8_g1062.y , temp_output_9_0_g1062));
				float3 ifLocalVar6144 = 0;
				UNITY_BRANCH 
				if( _Texture_9_Normal_Index <= -1.0 )
				ifLocalVar6144 = EmptyNRM6172;
				else
				ifLocalVar6144 = appendResult20_g1062;
				half3 Normal_94897 = ifLocalVar6144;
				float4 texArray4822 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Normal, sampler_Texture_Array_Normal, temp_output_4793_0, _Texture_10_Normal_Index );
				float2 appendResult11_g1061 = (float2(texArray4822.w , texArray4822.y));
				float2 temp_output_4_0_g1061 = ( ( ( appendResult11_g1061 * float2( 2,2 ) ) + float2( -1,-1 ) ) * _Texture_10_Normal_Power );
				float2 break8_g1061 = temp_output_4_0_g1061;
				float dotResult5_g1061 = dot( temp_output_4_0_g1061 , temp_output_4_0_g1061 );
				float temp_output_9_0_g1061 = sqrt( ( 1.0 - saturate( dotResult5_g1061 ) ) );
				float3 appendResult20_g1061 = (float3(break8_g1061.x , break8_g1061.y , temp_output_9_0_g1061));
				float3 ifLocalVar6146 = 0;
				UNITY_BRANCH 
				if( _Texture_10_Normal_Index <= -1.0 )
				ifLocalVar6146 = EmptyNRM6172;
				else
				ifLocalVar6146 = appendResult20_g1061;
				half3 Normal_104918 = ifLocalVar6146;
				float4 texArray4856 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Normal, sampler_Texture_Array_Normal, temp_output_4817_0, _Texture_11_Normal_Index );
				float2 appendResult11_g1063 = (float2(texArray4856.w , texArray4856.y));
				float2 temp_output_4_0_g1063 = ( ( ( appendResult11_g1063 * float2( 2,2 ) ) + float2( -1,-1 ) ) * _Texture_11_Normal_Power );
				float2 break8_g1063 = temp_output_4_0_g1063;
				float dotResult5_g1063 = dot( temp_output_4_0_g1063 , temp_output_4_0_g1063 );
				float temp_output_9_0_g1063 = sqrt( ( 1.0 - saturate( dotResult5_g1063 ) ) );
				float3 appendResult20_g1063 = (float3(break8_g1063.x , break8_g1063.y , temp_output_9_0_g1063));
				float3 ifLocalVar6148 = 0;
				UNITY_BRANCH 
				if( _Texture_11_Normal_Index <= -1.0 )
				ifLocalVar6148 = EmptyNRM6172;
				else
				ifLocalVar6148 = appendResult20_g1063;
				half3 Normal_114948 = ifLocalVar6148;
				float4 texArray4870 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Normal, sampler_Texture_Array_Normal, temp_output_4849_0, _Texture_12_Normal_Index );
				float2 appendResult11_g1060 = (float2(texArray4870.w , texArray4870.y));
				float2 temp_output_4_0_g1060 = ( ( ( appendResult11_g1060 * float2( 2,2 ) ) + float2( -1,-1 ) ) * _Texture_12_Normal_Power );
				float2 break8_g1060 = temp_output_4_0_g1060;
				float dotResult5_g1060 = dot( temp_output_4_0_g1060 , temp_output_4_0_g1060 );
				float temp_output_9_0_g1060 = sqrt( ( 1.0 - saturate( dotResult5_g1060 ) ) );
				float3 appendResult20_g1060 = (float3(break8_g1060.x , break8_g1060.y , temp_output_9_0_g1060));
				float3 ifLocalVar6150 = 0;
				UNITY_BRANCH 
				if( _Texture_12_Normal_Index <= -1.0 )
				ifLocalVar6150 = EmptyNRM6172;
				else
				ifLocalVar6150 = appendResult20_g1060;
				half3 Normal_124962 = ifLocalVar6150;
				float4 layeredBlendVar5641 = tex2DNode4370;
				float3 layeredBlend5641 = ( lerp( lerp( lerp( lerp( layeredBlend5640 , Normal_94897 , layeredBlendVar5641.x ) , Normal_104918 , layeredBlendVar5641.y ) , Normal_114948 , layeredBlendVar5641.z ) , Normal_124962 , layeredBlendVar5641.w ) );
				float4 texArray5120 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Normal, sampler_Texture_Array_Normal, temp_output_5037_0, _Texture_13_Normal_Index );
				float2 appendResult11_g1067 = (float2(texArray5120.w , texArray5120.y));
				float2 temp_output_4_0_g1067 = ( ( ( appendResult11_g1067 * float2( 2,2 ) ) + float2( -1,-1 ) ) * _Texture_13_Normal_Power );
				float2 break8_g1067 = temp_output_4_0_g1067;
				float dotResult5_g1067 = dot( temp_output_4_0_g1067 , temp_output_4_0_g1067 );
				float temp_output_9_0_g1067 = sqrt( ( 1.0 - saturate( dotResult5_g1067 ) ) );
				float3 appendResult20_g1067 = (float3(break8_g1067.x , break8_g1067.y , temp_output_9_0_g1067));
				float3 ifLocalVar6152 = 0;
				UNITY_BRANCH 
				if( _Texture_13_Normal_Index <= -1.0 )
				ifLocalVar6152 = EmptyNRM6172;
				else
				ifLocalVar6152 = appendResult20_g1067;
				half3 Normal_135059 = ifLocalVar6152;
				float4 texArray5178 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Normal, sampler_Texture_Array_Normal, temp_output_5022_0, _Texture_14_Normal_Index );
				float2 appendResult11_g1068 = (float2(texArray5178.w , texArray5178.y));
				float2 temp_output_4_0_g1068 = ( ( ( appendResult11_g1068 * float2( 2,2 ) ) + float2( -1,-1 ) ) * _Texture_14_Normal_Power );
				float2 break8_g1068 = temp_output_4_0_g1068;
				float dotResult5_g1068 = dot( temp_output_4_0_g1068 , temp_output_4_0_g1068 );
				float temp_output_9_0_g1068 = sqrt( ( 1.0 - saturate( dotResult5_g1068 ) ) );
				float3 appendResult20_g1068 = (float3(break8_g1068.x , break8_g1068.y , temp_output_9_0_g1068));
				float3 ifLocalVar6154 = 0;
				UNITY_BRANCH 
				if( _Texture_14_Normal_Index <= -1.0 )
				ifLocalVar6154 = EmptyNRM6172;
				else
				ifLocalVar6154 = appendResult20_g1068;
				half3 Normal_145196 = ifLocalVar6154;
				float4 texArray5246 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Normal, sampler_Texture_Array_Normal, temp_output_5226_0, _Texture_15_Normal_Index );
				float2 appendResult11_g1066 = (float2(texArray5246.w , texArray5246.y));
				float2 temp_output_4_0_g1066 = ( ( ( appendResult11_g1066 * float2( 2,2 ) ) + float2( -1,-1 ) ) * _Texture_15_Normal_Power );
				float2 break8_g1066 = temp_output_4_0_g1066;
				float dotResult5_g1066 = dot( temp_output_4_0_g1066 , temp_output_4_0_g1066 );
				float temp_output_9_0_g1066 = sqrt( ( 1.0 - saturate( dotResult5_g1066 ) ) );
				float3 appendResult20_g1066 = (float3(break8_g1066.x , break8_g1066.y , temp_output_9_0_g1066));
				float3 ifLocalVar6156 = 0;
				UNITY_BRANCH 
				if( _Texture_15_Normal_Index <= -1.0 )
				ifLocalVar6156 = EmptyNRM6172;
				else
				ifLocalVar6156 = appendResult20_g1066;
				half3 Normal_155280 = ifLocalVar6156;
				float4 texArray5099 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Normal, sampler_Texture_Array_Normal, temp_output_5083_0, _Texture_16_Normal_Index );
				float2 appendResult11_g1065 = (float2(texArray5099.w , texArray5099.y));
				float2 temp_output_4_0_g1065 = ( ( ( appendResult11_g1065 * float2( 2,2 ) ) + float2( -1,-1 ) ) * _Texture_16_Normal_Power );
				float2 break8_g1065 = temp_output_4_0_g1065;
				float dotResult5_g1065 = dot( temp_output_4_0_g1065 , temp_output_4_0_g1065 );
				float temp_output_9_0_g1065 = sqrt( ( 1.0 - saturate( dotResult5_g1065 ) ) );
				float3 appendResult20_g1065 = (float3(break8_g1065.x , break8_g1065.y , temp_output_9_0_g1065));
				float3 ifLocalVar6158 = 0;
				UNITY_BRANCH 
				if( _Texture_16_Normal_Index <= -1.0 )
				ifLocalVar6158 = EmptyNRM6172;
				else
				ifLocalVar6158 = appendResult20_g1065;
				half3 Normal_164696 = ifLocalVar6158;
				float4 layeredBlendVar5642 = tex2DNode4371;
				float3 layeredBlend5642 = ( lerp( lerp( lerp( lerp( layeredBlend5641 , Normal_135059 , layeredBlendVar5642.x ) , Normal_145196 , layeredBlendVar5642.y ) , Normal_155280 , layeredBlendVar5642.z ) , Normal_164696 , layeredBlendVar5642.w ) );
				float3 normalizeResult3901 = normalize( layeredBlend5642 );
				
				surfaceDescription.Albedo = clampResult5715;
				surfaceDescription.Normal = BlendNormal( lerpResult3776 , normalizeResult3901 );
				surfaceDescription.Emission = 0;
				surfaceDescription.Specular = ( ( appendResult6259 * float3( 0.3,0.3,0.3 ) ) * _Terrain_Specular );
				surfaceDescription.Metallic = 0;
				surfaceDescription.Smoothness = ( layeredBlend5646.w * _Terrain_Smoothness );
				surfaceDescription.Occlusion = _Ambient_Occlusion_Power;
				surfaceDescription.Alpha = 1;
				surfaceDescription.AlphaClipThreshold = 0;

#ifdef _MATERIAL_FEATURE_CLEAR_COAT
				surfaceDescription.CoatMask = 0;
#endif

#if defined(_MATERIAL_FEATURE_SUBSURFACE_SCATTERING) || defined(_MATERIAL_FEATURE_TRANSMISSION)
				surfaceDescription.DiffusionProfile = asfloat (uint(1074012128);
#endif

#ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
				surfaceDescription.SubsurfaceMask = 1;
#endif

#ifdef _MATERIAL_FEATURE_TRANSMISSION
				surfaceDescription.Thickness = 0;
#endif

#ifdef _MATERIAL_FEATURE_ANISOTROPY
				surfaceDescription.Anisotropy = 0;
#endif

#ifdef _MATERIAL_FEATURE_IRIDESCENCE
				surfaceDescription.IridescenceThickness = 0;
				surfaceDescription.IridescenceMask = 1;
#endif

#ifdef _MATERIAL_FEATURE_TRANSPARENCY
				surfaceDescription.IndexOfRefraction = 1;
				surfaceDescription.TransmittanceColor = float3( 1, 1, 1 );
				surfaceDescription.TransmittanceAbsorptionDistance = 1000000;
				surfaceDescription.TransmittanceMask = 0;
#endif

				GetSurfaceAndBuiltinData ( surfaceDescription, input, V, posInput, surfaceData, builtinData );

				BSDFData bsdfData = ConvertSurfaceDataToBSDFData ( input.positionSS.xy, surfaceData );

				LightTransportData lightTransportData = GetLightTransportData ( surfaceData, builtinData, bsdfData );

				float4 res = float4( 0.0, 0.0, 0.0, 1.0 );
				if ( unity_MetaFragmentControl.x )
				{
					res.rgb = clamp ( pow ( abs ( lightTransportData.diffuseColor ), saturate ( unity_OneOverOutputBoost ) ), 0, unity_MaxOutputValue );
				}

				if ( unity_MetaFragmentControl.y )
				{
					res.rgb = lightTransportData.emissiveColor;
				}

				return res;
			}
       
            ENDHLSL
        }

		
	  Pass
		{
			Name "ShadowCaster"
			Tags{ "LightMode" = "ShadowCaster" }

			Cull[_CullMode]

			ZClip[_ZClip]
			ZWrite On
			ZTest LEqual

			ColorMask 0

			HLSLPROGRAM

				#pragma target 4.5
				#pragma only_renderers d3d11 ps4 xboxone vulkan metal switch

				#pragma shader_feature _TERRAIN_8_LAYERS
				#pragma shader_feature _TERRAIN_BLEND_HEIGHT
				#pragma shader_feature _NORMALMAP
				#pragma shader_feature _MASKMAP

				#pragma shader_feature _TERRAIN_INSTANCED_PERPIXEL_NORMAL
				#pragma shader_feature _DISABLE_DECALS

				#define SURFACE_GRADIENT
				#define HAVE_MESH_MODIFICATION

				#pragma multi_compile_instancing
				#pragma instancing_options assumeuniformscaling nomatrices nolightprobe nolightmap

				#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
				#include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"

				#define SHADERPASS SHADERPASS_SHADOWS
				#define USE_LEGACY_UNITY_MATRIX_VARIABLES
				#include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/FragInputs.hlsl"
				#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
				#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Material.hlsl"
				#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/Lit.hlsl"
				#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/ShaderPass/LitDepthPass.hlsl"
				#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/TerrainLit/TerrainLitData.hlsl"
				#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/TerrainLit/TerrainLit_Basemap.hlsl"

				#include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPassDepthOnly.hlsl"


				#pragma vertex Vert
				#pragma fragment Frag

			ENDHLSL
		}


		
		
        Pass
        {
			
            Name "DepthOnly"
            Tags { "LightMode"="DepthOnly" }
			Stencil
			{
				Ref 0
				WriteMask 48
				Comp Always
				Pass Replace
				Fail Keep
				ZFail Keep
			}

            
            HLSLPROGRAM
				//#define UNITY_MATERIAL_LIT
				#pragma vertex Vert
				#pragma fragment Frag
        
				#define ASE_SRP_VERSION 50702
				#define _MATERIAL_FEATURE_SPECULAR_COLOR 1
				#pragma instancing_options assumeuniformscaling nomatrices nolightprobe nolightmap
				#include "TerrainVertexCTSHD.hlsl"


        
				#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"        
				#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/NormalSurfaceGradient.hlsl"
        
				#include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/FragInputs.hlsl"
				#include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"
        
				#define SHADERPASS SHADERPASS_DEPTH_ONLY
				#pragma multi_compile _ WRITE_NORMAL_BUFFER
				#pragma multi_compile _ WRITE_MSAA_DEPTH

				#define ATTRIBUTES_NEED_NORMAL
				#define ATTRIBUTES_NEED_TANGENT
				#define ATTRIBUTES_NEED_TEXCOORD0
				#define ATTRIBUTES_NEED_TEXCOORD1
				#define ATTRIBUTES_NEED_TEXCOORD2
				#define ATTRIBUTES_NEED_TEXCOORD3
				#define ATTRIBUTES_NEED_COLOR
				#define VARYINGS_NEED_POSITION_WS
				#define VARYINGS_NEED_TANGENT_TO_WORLD
				#define VARYINGS_NEED_TEXCOORD0
				#define VARYINGS_NEED_TEXCOORD1
				#define VARYINGS_NEED_TEXCOORD2
				#define VARYINGS_NEED_TEXCOORD3
				#define VARYINGS_NEED_COLOR
        
				#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
				#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Material.hlsl"
				#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/Lit.hlsl"
				#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/BuiltinUtilities.hlsl"
				#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/MaterialUtilities.hlsl"
				#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Decal/DecalUtilities.hlsl"
				#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/LitDecalData.hlsl"
				#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphFunctions.hlsl"
				
				struct AttributesMesh 
				{
					float3 positionOS : POSITION;
					float3 normalOS : NORMAL;
					
					#if UNITY_ANY_INSTANCING_ENABLED
					uint instanceID : INSTANCEID_SEMANTIC;
					#endif
				};

				struct PackedVaryingsMeshToPS 
				{
					float4 positionCS : SV_Position;
					
					#if UNITY_ANY_INSTANCING_ENABLED
					uint instanceID : INSTANCEID_SEMANTIC;
					#endif
				};

								
				        
				void BuildSurfaceData(FragInputs fragInputs, AlphaSurfaceDescription surfaceDescription, float3 V, PositionInputs posInput, out SurfaceData surfaceData)
				{
					ZERO_INITIALIZE(SurfaceData, surfaceData);
					surfaceData.ambientOcclusion =      1.0f;
					surfaceData.subsurfaceMask =        1.0f;

					surfaceData.materialFeatures = MATERIALFEATUREFLAGS_LIT_STANDARD;
			#ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
					surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SUBSURFACE_SCATTERING;
			#endif
			#ifdef _MATERIAL_FEATURE_TRANSMISSION
					surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
			#endif
			#ifdef _MATERIAL_FEATURE_ANISOTROPY
					surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_ANISOTROPY;
			#endif
			#ifdef _MATERIAL_FEATURE_CLEAR_COAT
					surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_CLEAR_COAT;
			#endif
			#ifdef _MATERIAL_FEATURE_IRIDESCENCE
					surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_IRIDESCENCE;
			#endif
			#ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
					surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SPECULAR_COLOR;
			#endif
					float3 normalTS =                   float3(0.0f, 0.0f, 1.0f);
					float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
					GetNormalWS(fragInputs, normalTS, surfaceData.normalWS,doubleSidedConstants);
					surfaceData.tangentWS = normalize(fragInputs.worldToTangent[0].xyz);    // The tangent is not normalize in worldToTangent for mikkt. TODO: Check if it expected that we normalize with Morten. Tag: SURFACE_GRADIENT
					surfaceData.tangentWS = Orthonormalize(surfaceData.tangentWS, surfaceData.normalWS);
					surfaceData.anisotropy = 0;
					surfaceData.coatMask = 0.0f;
					surfaceData.iridescenceThickness = 0.0;
					surfaceData.iridescenceMask = 1.0;
					surfaceData.ior = 1.0;
					surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
					surfaceData.atDistance = 1000000.0;
					surfaceData.transmittanceMask = 0.0;
					surfaceData.specularOcclusion = 1.0;
			#if defined(_BENTNORMALMAP) && defined(_ENABLESPECULAROCCLUSION)
					surfaceData.specularOcclusion = GetSpecularOcclusionFromBentAO(V, bentNormalWS, surfaceData);
			#elif defined(_MASKMAP)
					surfaceData.specularOcclusion = GetSpecularOcclusionFromAmbientOcclusion(NdotV, surfaceData.ambientOcclusion, PerceptualSmoothnessToRoughness(surfaceData.perceptualSmoothness));
			#endif
				#if HAVE_DECALS
					if (_EnableDecals)
					{
						DecalSurfaceData decalSurfaceData = GetDecalSurfaceData (posInput, surfaceDescription.Alpha);
						ApplyDecalToSurfaceData (decalSurfaceData, surfaceData);
					}
				#endif
				}
        
				void GetSurfaceAndBuiltinData(AlphaSurfaceDescription surfaceDescription,FragInputs fragInputs, float3 V, inout PositionInputs posInput, out SurfaceData surfaceData, out BuiltinData builtinData)
				{
					#if _ALPHATEST_ON
						DoAlphaTest ( surfaceDescription.Alpha, surfaceDescription.AlphaClipThreshold );
					#endif
					BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData);
					 InitBuiltinData(surfaceDescription.Alpha, surfaceData.normalWS, -fragInputs.worldToTangent[2], posInput.positionWS, fragInputs.texCoord1, fragInputs.texCoord2, builtinData);

					builtinData.distortion =                float2(0.0, 0.0);           // surfaceDescription.Distortion -- if distortion pass
					builtinData.distortionBlur =            0.0;                        // surfaceDescription.DistortionBlur -- if distortion pass
					builtinData.depthOffset =               0.0;                        // ApplyPerPixelDisplacement(input, V, layerTexCoord, blendMasks); #ifdef _DEPTHOFFSET_ON : ApplyDepthOffsetPositionInput(V, depthOffset, GetWorldToHClipMatrix(), posInput);
					PostInitBuiltinData(V, posInput, surfaceData, builtinData);
				}

				PackedVaryingsMeshToPS Vert(AttributesMesh inputMesh  )
				{
					PackedVaryingsMeshToPS outputPackedVaryingsMeshToPS;
					UNITY_SETUP_INSTANCE_ID(inputMesh);
					UNITY_TRANSFER_INSTANCE_ID(inputMesh, outputPackedVaryingsMeshToPS);
					
				TerrainInstancing(inputMesh.positionOS, inputMesh.normalOS);
					
					float3 vertexValue =  float3( 0, 0, 0 ) ;
					#ifdef ASE_ABSOLUTE_VERTEX_POS
					inputMesh.positionOS.xyz = vertexValue;
					#else
					inputMesh.positionOS.xyz += vertexValue;
					#endif

					inputMesh.normalOS =  inputMesh.normalOS ;

					float3 positionRWS = TransformObjectToWorld(inputMesh.positionOS);
					outputPackedVaryingsMeshToPS.positionCS = TransformWorldToHClip(positionRWS);
					return outputPackedVaryingsMeshToPS;
				}

				void Frag(  PackedVaryingsMeshToPS packedInput
							#ifdef WRITE_NORMAL_BUFFER
							, out float4 outNormalBuffer : SV_Target0
								#ifdef WRITE_MSAA_DEPTH
								, out float1 depthColor : SV_Target1
								#endif
							#elif defined(WRITE_MSAA_DEPTH) // When only WRITE_MSAA_DEPTH is define and not WRITE_NORMAL_BUFFER it mean we are Unlit and only need depth, but we still have normal buffer binded
							, out float4 outNormalBuffer : SV_Target0
							, out float1 depthColor : SV_Target1
							#else
							, out float4 outColor : SV_Target0
							#endif

							#ifdef _DEPTHOFFSET_ON
							, out float outputDepth : SV_Depth
							#endif
							
						)
				{
							
					FragInputs input;
					ZERO_INITIALIZE(FragInputs, input);
					input.worldToTangent = k_identity3x3;
					input.positionSS = packedInput.positionCS;
				
					PositionInputs posInput = GetPositionInput(input.positionSS.xy, _ScreenSize.zw, input.positionSS.z, input.positionSS.w, input.positionRWS);

					float3 V = float3(1.0, 1.0, 1.0);

					SurfaceData surfaceData;
					BuiltinData builtinData;
					AlphaSurfaceDescription surfaceDescription = ( AlphaSurfaceDescription ) 0;
					
					surfaceDescription.Alpha = 1;
					surfaceDescription.AlphaClipThreshold = 0;

					GetSurfaceAndBuiltinData(surfaceDescription, input, V, posInput, surfaceData, builtinData);

				#ifdef _DEPTHOFFSET_ON
					outputDepth = posInput.deviceDepth;
				#endif

				#ifdef WRITE_NORMAL_BUFFER
					EncodeIntoNormalBuffer(ConvertSurfaceDataToNormalData(surfaceData), posInput.positionSS, outNormalBuffer);
					#ifdef WRITE_MSAA_DEPTH
					depthColor = packedInput.positionCS.z;
					#endif
				#elif defined(WRITE_MSAA_DEPTH)
					outNormalBuffer = float4(0.0, 0.0, 0.0, 1.0);
					depthColor = packedInput.vmesh.positionCS.z;
				#elif defined(SCENESELECTIONPASS)
					outColor = float4(_ObjectId, _PassValue, 1.0, 1.0);
				#else
					outColor = float4(0.0, 0.0, 0.0, 0.0);
				#endif
				}
        
            ENDHLSL
        }

		
        Pass
        {
            
            
			Name "Forward"
			Tags { "LightMode"="Forward" }
			Stencil
			{
				Ref 2
				WriteMask 7
				Comp Always
				Pass Replace
				Fail Keep
				ZFail Keep
			}


            HLSLPROGRAM
                //#define UNITY_MATERIAL_LIT
				#pragma vertex Vert
				#pragma fragment Frag
        
				#define ASE_SRP_VERSION 50702
				#define _MATERIAL_FEATURE_SPECULAR_COLOR 1
				#define _NORMALMAP 1
				#pragma instancing_options assumeuniformscaling nomatrices nolightprobe nolightmap
				#include "TerrainVertexCTSHD.hlsl"

        
				#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
				#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/NormalSurfaceGradient.hlsl"
        
				#include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/FragInputs.hlsl"
				#include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"
        
                #define SHADERPASS SHADERPASS_FORWARD
                #pragma multi_compile _ LIGHTMAP_ON
                #pragma multi_compile _ DIRLIGHTMAP_COMBINED
                #pragma multi_compile _ DYNAMICLIGHTMAP_ON
                #pragma multi_compile _ SHADOWS_SHADOWMASK
				#pragma multi_compile DECALS_OFF DECALS_3RT DECALS_4RT
                #pragma multi_compile USE_FPTL_LIGHTLIST USE_CLUSTERED_LIGHTLIST
				#pragma multi_compile SHADOW_LOW SHADOW_MEDIUM SHADOW_HIGH
				
				#define SHADERPASS_FORWARD_BYPASS_ALPHA_TEST

                #define ATTRIBUTES_NEED_NORMAL
                #define ATTRIBUTES_NEED_TANGENT
                #define ATTRIBUTES_NEED_TEXCOORD1
                #define ATTRIBUTES_NEED_TEXCOORD2
                #define VARYINGS_NEED_POSITION_WS
                #define VARYINGS_NEED_TANGENT_TO_WORLD
                #define VARYINGS_NEED_TEXCOORD1
                #define VARYINGS_NEED_TEXCOORD2
        
        
				#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
        
				#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Material.hlsl"
        
				#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Lighting/Lighting.hlsl"
        
				#define HAS_LIGHTLOOP
        
				#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Lighting/LightLoop/LightLoopDef.hlsl"
				#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/Lit.hlsl"
				#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Lighting/LightLoop/LightLoop.hlsl"
        
        
				#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/BuiltinUtilities.hlsl"
				#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/MaterialUtilities.hlsl"
				#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Decal/DecalUtilities.hlsl"
				#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/LitDecalData.hlsl"
				#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphFunctions.hlsl"
				
				struct AttributesMesh 
				{
					float3 positionOS : POSITION;
					float3 normalOS : NORMAL;
					float4 tangentOS : TANGENT;
					float4 uv1 : TEXCOORD1;
					float4 uv2 : TEXCOORD2;
					float4 ase_texcoord : TEXCOORD0;
					#if UNITY_ANY_INSTANCING_ENABLED
					uint instanceID : INSTANCEID_SEMANTIC;
					#endif
				};
        
				struct PackedVaryingsMeshToPS 
				{
					float4 positionCS : SV_Position;
					float3 interp00 : TEXCOORD0;
					float3 interp01 : TEXCOORD1;
					float4 interp02 : TEXCOORD2;
					float4 interp03 : TEXCOORD3;
					float4 interp04 : TEXCOORD4;
					float4 ase_texcoord5 : TEXCOORD5;
					#if UNITY_ANY_INSTANCING_ENABLED
					uint instanceID : INSTANCEID_SEMANTIC;
					#endif
				};

				sampler2D _Texture_Splat_4;
				sampler2D _Texture_Splat_3;
				sampler2D _Texture_Splat_2;
				sampler2D _Texture_Splat_1;
				half _Texture_1_Albedo_Index;
				TEXTURE2D_ARRAY( _Texture_Array_Albedo );
				uniform SAMPLER( sampler_Texture_Array_Albedo );
				float _Texture_1_Tiling;
				half _Texture_1_Far_Multiplier;
				half _UV_Mix_Start_Distance;
				half _UV_Mix_Power;
				half4 _Texture_1_Color;
				float _Texture_2_Albedo_Index;
				half _Texture_2_Tiling;
				half _Texture_2_Far_Multiplier;
				half4 _Texture_2_Color;
				float _Texture_3_Albedo_Index;
				half _Texture_3_Tiling;
				half _Texture_3_Far_Multiplier;
				half4 _Texture_3_Color;
				float _Texture_4_Albedo_Index;
				half _Texture_4_Tiling;
				half _Texture_4_Far_Multiplier;
				half4 _Texture_4_Color;
				float _Texture_5_Albedo_Index;
				half _Texture_5_Tiling;
				half _Texture_5_Far_Multiplier;
				half4 _Texture_5_Color;
				float _Texture_6_Albedo_Index;
				half _Texture_6_Tiling;
				half _Texture_6_Far_Multiplier;
				half4 _Texture_6_Color;
				float _Texture_7_Albedo_Index;
				half _Texture_7_Tiling;
				half _Texture_7_Far_Multiplier;
				half4 _Texture_7_Color;
				float _Texture_8_Albedo_Index;
				half _Texture_8_Tiling;
				half _Texture_8_Far_Multiplier;
				half4 _Texture_8_Color;
				half _Texture_9_Albedo_Index;
				half _Texture_9_Tiling;
				half _Texture_9_Far_Multiplier;
				half4 _Texture_9_Color;
				half _Texture_10_Albedo_Index;
				half _Texture_10_Tiling;
				half _Texture_10_Far_Multiplier;
				half4 _Texture_10_Color;
				half _Texture_11_Albedo_Index;
				half _Texture_11_Tiling;
				half _Texture_11_Far_Multiplier;
				half4 _Texture_11_Color;
				half _Texture_12_Albedo_Index;
				half _Texture_12_Tiling;
				half _Texture_12_Far_Multiplier;
				half4 _Texture_12_Color;
				half _Texture_13_Albedo_Index;
				half _Texture_13_Tiling;
				half _Texture_13_Far_Multiplier;
				half4 _Texture_13_Color;
				half _Texture_14_Albedo_Index;
				half _Texture_14_Tiling;
				half _Texture_14_Far_Multiplier;
				half4 _Texture_14_Color;
				half _Texture_15_Albedo_Index;
				half _Texture_15_Tiling;
				half _Texture_15_Far_Multiplier;
				half4 _Texture_15_Color;
				half _Texture_16_Albedo_Index;
				half _Texture_16_Tiling;
				half _Texture_16_Far_Multiplier;
				half4 _Texture_16_Color;
				half _Geological_Map_Close_Power;
				sampler2D _Texture_Geological_Map;
				half _Geological_Map_Offset_Close;
				half _Geological_Tiling_Close;
				half _Geological_Map_Far_Power;
				half _Geological_Tiling_Far;
				half _Geological_Map_Offset_Far;
				half _Texture_16_Geological_Power;
				half _Texture_15_Geological_Power;
				half _Texture_14_Geological_Power;
				half _Texture_13_Geological_Power;
				half _Texture_12_Geological_Power;
				half _Texture_11_Geological_Power;
				half _Texture_10_Geological_Power;
				half _Texture_9_Geological_Power;
				half _Texture_8_Geological_Power;
				half _Texture_7_Geological_Power;
				half _Texture_6_Geological_Power;
				half _Texture_5_Geological_Power;
				half _Texture_1_Geological_Power;
				half _Texture_2_Geological_Power;
				half _Texture_4_Geological_Power;
				half _Texture_3_Geological_Power;
				TEXTURE2D_ARRAY( _Texture_Array_Normal );
				uniform SAMPLER( sampler_Texture_Array_Normal );
				half _Perlin_Normal_Tiling_Close;
				int _Texture_Perlin_Normal_Index;
				half _Perlin_Normal_Power_Close;
				half _Perlin_Normal_Tiling_Far;
				half _Perlin_Normal_Power;
				float _Texture_16_Perlin_Power;
				float _Texture_15_Perlin_Power;
				float _Texture_14_Perlin_Power;
				float _Texture_13_Perlin_Power;
				float _Texture_12_Perlin_Power;
				float _Texture_11_Perlin_Power;
				float _Texture_10_Perlin_Power;
				float _Texture_9_Perlin_Power;
				float _Texture_8_Perlin_Power;
				float _Texture_7_Perlin_Power;
				float _Texture_6_Perlin_Power;
				float _Texture_5_Perlin_Power;
				float _Texture_1_Perlin_Power;
				float _Texture_2_Perlin_Power;
				float _Texture_4_Perlin_Power;
				float _Texture_3_Perlin_Power;
				half _Texture_1_Normal_Index;
				half _Texture_1_Normal_Power;
				float _Texture_2_Normal_Index;
				half _Texture_2_Normal_Power;
				float _Texture_3_Normal_Index;
				half _Texture_3_Normal_Power;
				float _Texture_4_Normal_Index;
				half _Texture_4_Normal_Power;
				float _Texture_5_Normal_Index;
				half _Texture_5_Normal_Power;
				float _Texture_6_Normal_Index;
				half _Texture_6_Normal_Power;
				float _Texture_7_Normal_Index;
				half _Texture_7_Normal_Power;
				float _Texture_8_Normal_Index;
				half _Texture_8_Normal_Power;
				half _Texture_9_Normal_Index;
				half _Texture_9_Normal_Power;
				half _Texture_10_Normal_Index;
				half _Texture_10_Normal_Power;
				half _Texture_11_Normal_Index;
				half _Texture_11_Normal_Power;
				half _Texture_12_Normal_Index;
				half _Texture_12_Normal_Power;
				half _Texture_13_Normal_Index;
				half _Texture_13_Normal_Power;
				half _Texture_14_Normal_Index;
				half _Texture_14_Normal_Power;
				half _Texture_15_Normal_Index;
				half _Texture_15_Normal_Power;
				half _Texture_16_Normal_Index;
				half _Texture_16_Normal_Power;
				half _Terrain_Specular;
				half _Terrain_Smoothness;
				half _Ambient_Occlusion_Power;
				
				                
        
				void BuildSurfaceData ( FragInputs fragInputs, GlobalSurfaceDescription surfaceDescription, float3 V, PositionInputs posInput, out SurfaceData surfaceData )
			{
				ZERO_INITIALIZE ( SurfaceData, surfaceData );

				float3 normalTS = float3( 0.0f, 0.0f, 1.0f );
				normalTS = surfaceDescription.Normal;
				float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
				GetNormalWS ( fragInputs, normalTS, surfaceData.normalWS ,doubleSidedConstants);

				surfaceData.ambientOcclusion = 1.0f;

				surfaceData.baseColor = surfaceDescription.Albedo;
				surfaceData.perceptualSmoothness = surfaceDescription.Smoothness;
				surfaceData.ambientOcclusion = surfaceDescription.Occlusion;

				surfaceData.materialFeatures = MATERIALFEATUREFLAGS_LIT_STANDARD;

#ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
				surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SPECULAR_COLOR;
				surfaceData.specularColor = surfaceDescription.Specular;
#else
				surfaceData.metallic = surfaceDescription.Metallic;
#endif

#if defined(_MATERIAL_FEATURE_SUBSURFACE_SCATTERING) || defined(_MATERIAL_FEATURE_TRANSMISSION)
				surfaceData.diffusionProfileHash = asuint (surfaceDescription.DiffusionProfile);
#endif

#ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
				surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SUBSURFACE_SCATTERING;
				surfaceData.subsurfaceMask = surfaceDescription.SubsurfaceMask;
#else
				surfaceData.subsurfaceMask = 1.0f;
#endif

#ifdef _MATERIAL_FEATURE_TRANSMISSION
				surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
				surfaceData.thickness = surfaceDescription.Thickness;
#endif

				surfaceData.tangentWS = normalize ( fragInputs.worldToTangent[ 0 ].xyz );
				surfaceData.tangentWS = Orthonormalize ( surfaceData.tangentWS, surfaceData.normalWS );

#ifdef _MATERIAL_FEATURE_ANISOTROPY
				surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_ANISOTROPY;
				surfaceData.anisotropy = surfaceDescription.Anisotropy;

#else
				surfaceData.anisotropy = 0;
#endif

#ifdef _MATERIAL_FEATURE_CLEAR_COAT
				surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_CLEAR_COAT;
				surfaceData.coatMask = surfaceDescription.CoatMask;
#else
				surfaceData.coatMask = 0.0f;
#endif

#ifdef _MATERIAL_FEATURE_IRIDESCENCE
				surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_IRIDESCENCE;
				surfaceData.iridescenceThickness = surfaceDescription.IridescenceThickness;
				surfaceData.iridescenceMask = surfaceDescription.IridescenceMask;
#else
				surfaceData.iridescenceThickness = 0.0;
				surfaceData.iridescenceMask = 1.0;
#endif

				//ASE CUSTOM TAG
#ifdef _MATERIAL_FEATURE_TRANSPARENCY
				surfaceData.ior = surfaceDescription.IndexOfRefraction;
				surfaceData.transmittanceColor = surfaceDescription.TransmittanceColor;
				surfaceData.atDistance = surfaceDescription.TransmittanceAbsorptionDistance;
				surfaceData.transmittanceMask = surfaceDescription.TransmittanceMask;
#else
				surfaceData.ior = 1.0;
				surfaceData.transmittanceColor = float3( 1.0, 1.0, 1.0 );
				surfaceData.atDistance = 1000000.0;
				surfaceData.transmittanceMask = 0.0;
#endif

				surfaceData.specularOcclusion = 1.0;

#if defined(_BENTNORMALMAP) && defined(_ENABLESPECULAROCCLUSION)
				surfaceData.specularOcclusion = GetSpecularOcclusionFromBentAO ( V, bentNormalWS, surfaceData );
#elif defined(_MASKMAP)
				surfaceData.specularOcclusion = GetSpecularOcclusionFromAmbientOcclusion ( NdotV, surfaceData.ambientOcclusion, PerceptualSmoothnessToRoughness ( surfaceData.perceptualSmoothness ) );
#endif
			#if HAVE_DECALS
				if (_EnableDecals)
				{
					DecalSurfaceData decalSurfaceData = GetDecalSurfaceData (posInput, surfaceDescription.Alpha);
					ApplyDecalToSurfaceData (decalSurfaceData, surfaceData);
				}
			#endif
			}
        
				void GetSurfaceAndBuiltinData( GlobalSurfaceDescription surfaceDescription , FragInputs fragInputs, float3 V, inout PositionInputs posInput, out SurfaceData surfaceData, out BuiltinData builtinData)
				{
				#if _ALPHATEST_ON
					DoAlphaTest ( surfaceDescription.Alpha, surfaceDescription.AlphaClipThreshold );
				#endif
		
					BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData);
					 InitBuiltinData(surfaceDescription.Alpha, surfaceData.normalWS, -fragInputs.worldToTangent[2], posInput.positionWS, fragInputs.texCoord1, fragInputs.texCoord2, builtinData);
        
					builtinData.emissiveColor =             surfaceDescription.Emission;
					builtinData.distortion =                float2(0.0, 0.0);           // surfaceDescription.Distortion -- if distortion pass
					builtinData.distortionBlur =            0.0;                        // surfaceDescription.DistortionBlur -- if distortion pass
        
					builtinData.depthOffset =               0.0;                        // ApplyPerPixelDisplacement(input, V, layerTexCoord, blendMasks); #ifdef _DEPTHOFFSET_ON : ApplyDepthOffsetPositionInput(V, depthOffset, GetWorldToHClipMatrix(), posInput);
        
					PostInitBuiltinData(V, posInput, surfaceData, builtinData);
				}
        
			
				PackedVaryingsMeshToPS Vert(AttributesMesh inputMesh  )
				{
					PackedVaryingsMeshToPS outputPackedVaryingsMeshToPS;

					UNITY_SETUP_INSTANCE_ID(inputMesh);
					UNITY_TRANSFER_INSTANCE_ID(inputMesh, outputPackedVaryingsMeshToPS);
					TerrainInstancingUV(inputMesh.positionOS, inputMesh.normalOS, inputMesh.tangentOS, inputMesh.ase_texcoord.xy);
					outputPackedVaryingsMeshToPS.ase_texcoord5.xy = inputMesh.ase_texcoord.xy;
					
					//setting value to unused interpolator channels and avoid initialization warnings
					outputPackedVaryingsMeshToPS.ase_texcoord5.zw = 0;
					float3 vertexValue =  float3( 0, 0, 0 ) ;
					#ifdef ASE_ABSOLUTE_VERTEX_POS
					inputMesh.positionOS.xyz = vertexValue;
					#else
					inputMesh.positionOS.xyz += vertexValue;
					#endif
					
					inputMesh.normalOS =  inputMesh.normalOS ;

					float3 positionRWS = TransformObjectToWorld(inputMesh.positionOS);
					float3 normalWS = TransformObjectToWorldNormal(inputMesh.normalOS);
					float4 tangentWS = float4(TransformObjectToWorldDir(inputMesh.tangentOS.xyz), inputMesh.tangentOS.w);

					outputPackedVaryingsMeshToPS.positionCS = TransformWorldToHClip(positionRWS);
					outputPackedVaryingsMeshToPS.interp00.xyz = positionRWS;
					outputPackedVaryingsMeshToPS.interp01.xyz = normalWS;
					outputPackedVaryingsMeshToPS.interp02.xyzw = tangentWS;
					outputPackedVaryingsMeshToPS.interp03.xyzw = inputMesh.uv1;
					outputPackedVaryingsMeshToPS.interp04.xyzw = inputMesh.uv2;

					return outputPackedVaryingsMeshToPS;
				}

				void Frag(	PackedVaryingsMeshToPS packedInput,
							#ifdef OUTPUT_SPLIT_LIGHTING
								out float4 outColor : SV_Target0, 
								out float4 outDiffuseLighting : SV_Target1,
								OUTPUT_SSSBUFFER (outSSSBuffer)
							#else
								out float4 outColor : SV_Target0
							#ifdef _WRITE_TRANSPARENT_MOTION_VECTOR
								, out float4 outMotionVec : SV_Target1
							#endif 
							#endif 
							#ifdef _DEPTHOFFSET_ON
								, out float outputDepth : SV_Depth
							#endif
						 
						  )
				{
					FragInputs input;
					ZERO_INITIALIZE(FragInputs, input);
        
					input.worldToTangent = k_identity3x3;
					input.positionSS = packedInput.positionCS;
					float3 positionRWS = packedInput.interp00.xyz;
					float3 normalWS = packedInput.interp01.xyz;
					float4 tangentWS = packedInput.interp02.xyzw;
						
					input.positionRWS = positionRWS;
					input.worldToTangent = BuildWorldToTangent(tangentWS, normalWS);
					input.texCoord1 = packedInput.interp03.xyzw;
					input.texCoord2 = packedInput.interp04.xyzw;

					// input.positionSS is SV_Position
					PositionInputs posInput = GetPositionInput_Stereo(input.positionSS.xy, _ScreenSize.zw, input.positionSS.z, input.positionSS.w, input.positionRWS.xyz, uint2(input.positionSS.xy) / GetTileSize(), unity_StereoEyeIndex);

					float3 normalizedWorldViewDir = GetWorldSpaceNormalizeViewDir ( input.positionRWS );

					SurfaceData surfaceData;
					BuiltinData builtinData;
					GlobalSurfaceDescription surfaceDescription = ( GlobalSurfaceDescription ) 0;
					float2 uv02588 = packedInput.ase_texcoord5.xy * float2( 1,1 ) + float2( 0,0 );
					float4 tex2DNode4371 = tex2D( _Texture_Splat_4, uv02588 );
					float4 tex2DNode4370 = tex2D( _Texture_Splat_3, uv02588 );
					float4 tex2DNode4369 = tex2D( _Texture_Splat_2, uv02588 );
					float4 tex2DNode4368 = tex2D( _Texture_Splat_1, uv02588 );
					float3 ase_worldPos = GetAbsolutePositionWS( positionRWS );
					float3 break6348 = ase_worldPos;
					float2 appendResult6281 = (float2(break6348.x , break6348.z));
					half2 Top_Bottom1999 = appendResult6281;
					float temp_output_3830_0 = ( 1.0 / _Texture_1_Tiling );
					float2 appendResult3284 = (float2(temp_output_3830_0 , temp_output_3830_0));
					float2 temp_output_3275_0 = ( Top_Bottom1999 * appendResult3284 );
					float4 texArray3287 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, temp_output_3275_0, _Texture_1_Albedo_Index );
					float4 texArray3293 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, ( temp_output_3275_0 / _Texture_1_Far_Multiplier ), _Texture_1_Albedo_Index );
					float3 break6201 = abs( ( ase_worldPos - _WorldSpaceCameraPos ) );
					float clampResult297 = clamp( pow( ( max( max( break6201.x , break6201.y ) , break6201.z ) / _UV_Mix_Start_Distance ) , _UV_Mix_Power ) , 0.0 , 1.0 );
					half UVmixDistance636 = clampResult297;
					float4 lerpResult5739 = lerp( texArray3287 , texArray3293 , UVmixDistance636);
					float4 ifLocalVar6174 = 0;
					UNITY_BRANCH 
					if( _Texture_1_Albedo_Index > -1.0 )
					ifLocalVar6174 = ( lerpResult5739 * _Texture_1_Color );
					half4 Texture_1_Final950 = ifLocalVar6174;
					float temp_output_3831_0 = ( 1.0 / _Texture_2_Tiling );
					float2 appendResult3349 = (float2(temp_output_3831_0 , temp_output_3831_0));
					float2 temp_output_3343_0 = ( Top_Bottom1999 * appendResult3349 );
					float4 texArray3338 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, temp_output_3343_0, _Texture_2_Albedo_Index );
					float4 texArray3339 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, ( temp_output_3343_0 / _Texture_2_Far_Multiplier ), _Texture_2_Albedo_Index );
					float4 lerpResult5749 = lerp( texArray3338 , texArray3339 , UVmixDistance636);
					float4 ifLocalVar6128 = 0;
					UNITY_BRANCH 
					if( _Texture_2_Albedo_Index > -1.0 )
					ifLocalVar6128 = ( lerpResult5749 * _Texture_2_Color );
					half4 Texture_2_Final3385 = ifLocalVar6128;
					float temp_output_3832_0 = ( 1.0 / _Texture_3_Tiling );
					float2 appendResult3415 = (float2(temp_output_3832_0 , temp_output_3832_0));
					float2 temp_output_3410_0 = ( Top_Bottom1999 * appendResult3415 );
					float4 texArray3405 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, temp_output_3410_0, _Texture_3_Albedo_Index );
					float4 texArray3406 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, ( temp_output_3410_0 / _Texture_3_Far_Multiplier ), _Texture_3_Albedo_Index );
					float4 lerpResult5759 = lerp( texArray3405 , texArray3406 , UVmixDistance636);
					float4 ifLocalVar6130 = 0;
					UNITY_BRANCH 
					if( _Texture_3_Albedo_Index > -1.0 )
					ifLocalVar6130 = ( lerpResult5759 * _Texture_3_Color );
					half4 Texture_3_Final3451 = ifLocalVar6130;
					float2 temp_output_3477_0 = ( Top_Bottom1999 * ( 1.0 / _Texture_4_Tiling ) );
					float4 texArray3472 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, temp_output_3477_0, _Texture_4_Albedo_Index );
					float4 texArray3473 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, ( temp_output_3477_0 / _Texture_4_Far_Multiplier ), _Texture_4_Albedo_Index );
					float4 lerpResult5761 = lerp( texArray3472 , texArray3473 , UVmixDistance636);
					float4 ifLocalVar6132 = 0;
					UNITY_BRANCH 
					if( _Texture_4_Albedo_Index > -1.0 )
					ifLocalVar6132 = ( lerpResult5761 * _Texture_4_Color );
					half4 Texture_4_Final3518 = ifLocalVar6132;
					float4 layeredBlendVar5643 = tex2DNode4368;
					float4 layeredBlend5643 = ( lerp( lerp( lerp( lerp( float4( 0,0,0,0 ) , Texture_1_Final950 , layeredBlendVar5643.x ) , Texture_2_Final3385 , layeredBlendVar5643.y ) , Texture_3_Final3451 , layeredBlendVar5643.z ) , Texture_4_Final3518 , layeredBlendVar5643.w ) );
					float temp_output_4397_0 = ( 1.0 / _Texture_5_Tiling );
					float2 appendResult4399 = (float2(temp_output_4397_0 , temp_output_4397_0));
					float2 temp_output_4416_0 = ( Top_Bottom1999 * appendResult4399 );
					float4 texArray4450 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, temp_output_4416_0, _Texture_5_Albedo_Index );
					float4 texArray4445 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, ( temp_output_4416_0 / _Texture_5_Far_Multiplier ), _Texture_5_Albedo_Index );
					float4 lerpResult5789 = lerp( texArray4450 , texArray4445 , UVmixDistance636);
					float4 ifLocalVar6134 = 0;
					UNITY_BRANCH 
					if( _Texture_5_Albedo_Index > -1.0 )
					ifLocalVar6134 = ( lerpResult5789 * _Texture_5_Color );
					half4 Texture_5_Final4396 = ifLocalVar6134;
					float temp_output_4469_0 = ( 1.0 / _Texture_6_Tiling );
					float2 appendResult4471 = (float2(temp_output_4469_0 , temp_output_4469_0));
					float2 temp_output_4485_0 = ( Top_Bottom1999 * appendResult4471 );
					float4 texArray4517 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, temp_output_4485_0, _Texture_6_Albedo_Index );
					float4 texArray4512 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, ( temp_output_4485_0 / _Texture_6_Far_Multiplier ), _Texture_6_Albedo_Index );
					float4 lerpResult5794 = lerp( texArray4517 , texArray4512 , UVmixDistance636);
					float4 ifLocalVar6136 = 0;
					UNITY_BRANCH 
					if( _Texture_6_Albedo_Index > -1.0 )
					ifLocalVar6136 = ( lerpResult5794 * _Texture_6_Color );
					half4 Texture_6_Final4536 = ifLocalVar6136;
					float temp_output_4543_0 = ( 1.0 / _Texture_7_Tiling );
					float2 appendResult4545 = (float2(temp_output_4543_0 , temp_output_4543_0));
					float2 temp_output_4559_0 = ( Top_Bottom1999 * appendResult4545 );
					float4 texArray4591 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, temp_output_4559_0, _Texture_7_Albedo_Index );
					float4 texArray4586 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, ( temp_output_4559_0 / _Texture_7_Far_Multiplier ), _Texture_7_Albedo_Index );
					float4 lerpResult5798 = lerp( texArray4591 , texArray4586 , UVmixDistance636);
					float4 ifLocalVar6139 = 0;
					UNITY_BRANCH 
					if( _Texture_7_Albedo_Index > -1.0 )
					ifLocalVar6139 = ( lerpResult5798 * _Texture_7_Color );
					half4 Texture_7_Final4614 = ifLocalVar6139;
					float temp_output_4617_0 = ( 1.0 / _Texture_8_Tiling );
					float2 appendResult4619 = (float2(temp_output_4617_0 , temp_output_4617_0));
					float2 temp_output_4633_0 = ( Top_Bottom1999 * appendResult4619 );
					float4 texArray4665 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, temp_output_4633_0, _Texture_8_Albedo_Index );
					float4 texArray4660 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, ( temp_output_4633_0 / _Texture_8_Far_Multiplier ), _Texture_8_Albedo_Index );
					float4 lerpResult5802 = lerp( texArray4665 , texArray4660 , UVmixDistance636);
					float4 ifLocalVar6141 = 0;
					UNITY_BRANCH 
					if( _Texture_8_Albedo_Index > -1.0 )
					ifLocalVar6141 = ( lerpResult5802 * _Texture_8_Color );
					half4 Texture_8_Final4689 = ifLocalVar6141;
					float4 layeredBlendVar5644 = tex2DNode4369;
					float4 layeredBlend5644 = ( lerp( lerp( lerp( lerp( layeredBlend5643 , Texture_5_Final4396 , layeredBlendVar5644.x ) , Texture_6_Final4536 , layeredBlendVar5644.y ) , Texture_7_Final4614 , layeredBlendVar5644.z ) , Texture_8_Final4689 , layeredBlendVar5644.w ) );
					float temp_output_4703_0 = ( 1.0 / _Texture_9_Tiling );
					float2 appendResult4736 = (float2(temp_output_4703_0 , temp_output_4703_0));
					float2 temp_output_4712_0 = ( Top_Bottom1999 * appendResult4736 );
					float4 texArray4723 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, temp_output_4712_0, _Texture_9_Albedo_Index );
					float4 texArray4889 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, ( temp_output_4712_0 / _Texture_9_Far_Multiplier ), _Texture_9_Albedo_Index );
					float4 lerpResult5845 = lerp( texArray4723 , texArray4889 , UVmixDistance636);
					float4 ifLocalVar6143 = 0;
					UNITY_BRANCH 
					if( _Texture_9_Albedo_Index > -1.0 )
					ifLocalVar6143 = ( lerpResult5845 * _Texture_9_Color );
					half4 Texture_9_Final4987 = ifLocalVar6143;
					float temp_output_4734_0 = ( 1.0 / _Texture_10_Tiling );
					float2 appendResult4738 = (float2(temp_output_4734_0 , temp_output_4734_0));
					float2 temp_output_4793_0 = ( Top_Bottom1999 * appendResult4738 );
					float4 texArray4899 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, temp_output_4793_0, _Texture_10_Albedo_Index );
					float4 texArray4913 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, ( temp_output_4793_0 / _Texture_10_Far_Multiplier ), _Texture_10_Albedo_Index );
					float4 lerpResult5841 = lerp( texArray4899 , texArray4913 , UVmixDistance636);
					float4 ifLocalVar6145 = 0;
					UNITY_BRANCH 
					if( _Texture_10_Albedo_Index > -1.0 )
					ifLocalVar6145 = ( lerpResult5841 * _Texture_10_Color );
					half4 Texture_10_Final4994 = ifLocalVar6145;
					float temp_output_4739_0 = ( 1.0 / _Texture_11_Tiling );
					float2 appendResult4741 = (float2(temp_output_4739_0 , temp_output_4739_0));
					float2 temp_output_4817_0 = ( Top_Bottom1999 * appendResult4741 );
					float4 texArray4928 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, temp_output_4817_0, _Texture_11_Albedo_Index );
					float4 texArray4923 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, ( temp_output_4817_0 / _Texture_11_Far_Multiplier ), _Texture_11_Albedo_Index );
					float4 lerpResult5837 = lerp( texArray4928 , texArray4923 , UVmixDistance636);
					float4 ifLocalVar6147 = 0;
					UNITY_BRANCH 
					if( _Texture_11_Albedo_Index > -1.0 )
					ifLocalVar6147 = ( lerpResult5837 * _Texture_11_Color );
					half4 Texture_11_Final4996 = ifLocalVar6147;
					float temp_output_4745_0 = ( 1.0 / _Texture_12_Tiling );
					float2 appendResult4751 = (float2(temp_output_4745_0 , temp_output_4745_0));
					float2 temp_output_4849_0 = ( Top_Bottom1999 * appendResult4751 );
					float4 texArray4954 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, temp_output_4849_0, _Texture_12_Albedo_Index );
					float4 texArray4952 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, ( temp_output_4849_0 / _Texture_12_Far_Multiplier ), _Texture_12_Albedo_Index );
					float4 lerpResult5833 = lerp( texArray4954 , texArray4952 , UVmixDistance636);
					float4 ifLocalVar6169 = 0;
					UNITY_BRANCH 
					if( _Texture_12_Albedo_Index > -1.0 )
					ifLocalVar6169 = ( lerpResult5833 * _Texture_12_Color );
					half4 Texture_12_Final4997 = ifLocalVar6169;
					float4 layeredBlendVar5645 = tex2DNode4370;
					float4 layeredBlend5645 = ( lerp( lerp( lerp( lerp( layeredBlend5644 , Texture_9_Final4987 , layeredBlendVar5645.x ) , Texture_10_Final4994 , layeredBlendVar5645.y ) , Texture_11_Final4996 , layeredBlendVar5645.z ) , Texture_12_Final4997 , layeredBlendVar5645.w ) );
					float temp_output_5125_0 = ( 1.0 / _Texture_13_Tiling );
					float2 appendResult5027 = (float2(temp_output_5125_0 , temp_output_5125_0));
					float2 temp_output_5037_0 = ( Top_Bottom1999 * appendResult5027 );
					float4 texArray5043 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, temp_output_5037_0, _Texture_13_Albedo_Index );
					float4 texArray5034 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, ( temp_output_5037_0 / _Texture_13_Far_Multiplier ), _Texture_13_Albedo_Index );
					float4 lerpResult5829 = lerp( texArray5043 , texArray5034 , UVmixDistance636);
					float4 ifLocalVar6151 = 0;
					UNITY_BRANCH 
					if( _Texture_13_Albedo_Index > -1.0 )
					ifLocalVar6151 = ( lerpResult5829 * _Texture_13_Color );
					half4 Texture_13_Final5058 = ifLocalVar6151;
					float temp_output_5006_0 = ( 1.0 / _Texture_14_Tiling );
					float2 appendResult5033 = (float2(temp_output_5006_0 , temp_output_5006_0));
					float2 temp_output_5022_0 = ( Top_Bottom1999 * appendResult5033 );
					float4 texArray5202 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, temp_output_5022_0, _Texture_14_Albedo_Index );
					float4 texArray5171 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, ( temp_output_5022_0 / _Texture_14_Far_Multiplier ), _Texture_14_Albedo_Index );
					float4 lerpResult5825 = lerp( texArray5202 , texArray5171 , UVmixDistance636);
					float4 ifLocalVar6153 = 0;
					UNITY_BRANCH 
					if( _Texture_14_Albedo_Index > -1.0 )
					ifLocalVar6153 = ( lerpResult5825 * _Texture_14_Color );
					half4 Texture_14_Final5163 = ifLocalVar6153;
					float temp_output_5210_0 = ( 1.0 / _Texture_15_Tiling );
					float2 appendResult5212 = (float2(temp_output_5210_0 , temp_output_5210_0));
					float2 temp_output_5226_0 = ( Top_Bottom1999 * appendResult5212 );
					float4 texArray5259 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, temp_output_5226_0, _Texture_15_Albedo_Index );
					float4 texArray5272 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, ( temp_output_5226_0 / _Texture_15_Far_Multiplier ), _Texture_15_Albedo_Index );
					float4 lerpResult5821 = lerp( texArray5259 , texArray5272 , UVmixDistance636);
					float4 ifLocalVar6155 = 0;
					UNITY_BRANCH 
					if( _Texture_15_Albedo_Index > -1.0 )
					ifLocalVar6155 = ( lerpResult5821 * _Texture_15_Color );
					half4 Texture_15_Final5270 = ifLocalVar6155;
					float temp_output_5075_0 = ( 1.0 / _Texture_16_Tiling );
					float2 appendResult5078 = (float2(temp_output_5075_0 , temp_output_5075_0));
					float2 temp_output_5083_0 = ( Top_Bottom1999 * appendResult5078 );
					float4 texArray5139 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, temp_output_5083_0, _Texture_16_Albedo_Index );
					float4 texArray5143 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Albedo, sampler_Texture_Array_Albedo, ( temp_output_5083_0 / _Texture_16_Far_Multiplier ), _Texture_16_Albedo_Index );
					float4 lerpResult5817 = lerp( texArray5139 , texArray5143 , UVmixDistance636);
					float4 ifLocalVar6183 = 0;
					UNITY_BRANCH 
					if( _Texture_16_Albedo_Index > -1.0 )
					ifLocalVar6183 = ( lerpResult5817 * _Texture_16_Color );
					half4 Texture_16_Final5094 = ifLocalVar6183;
					float4 layeredBlendVar5646 = tex2DNode4371;
					float4 layeredBlend5646 = ( lerp( lerp( lerp( lerp( layeredBlend5645 , Texture_13_Final5058 , layeredBlendVar5646.x ) , Texture_14_Final5163 , layeredBlendVar5646.y ) , Texture_15_Final5270 , layeredBlendVar5646.z ) , Texture_16_Final5094 , layeredBlendVar5646.w ) );
					float3 appendResult6259 = (float3(layeredBlend5646.xyz));
					float2 temp_cast_1 = (( _Geological_Map_Offset_Close + ( ase_worldPos.y / _Geological_Tiling_Close ) )).xx;
					float3 appendResult6257 = (float3(tex2D( _Texture_Geological_Map, temp_cast_1 ).rgb));
					float2 temp_cast_3 = (( ( ase_worldPos.y / _Geological_Tiling_Far ) + _Geological_Map_Offset_Far )).xx;
					float3 appendResult6256 = (float3(tex2D( _Texture_Geological_Map, temp_cast_3 ).rgb));
					float3 lerpResult1315 = lerp( ( _Geological_Map_Close_Power * ( appendResult6257 + float3( -0.3,-0.3,-0.3 ) ) ) , ( _Geological_Map_Far_Power * ( appendResult6256 + float3( -0.3,-0.3,-0.3 ) ) ) , UVmixDistance636);
					half Splat4_A2546 = tex2DNode4371.a;
					half Splat4_B2545 = tex2DNode4371.b;
					half Splat4_G2544 = tex2DNode4371.g;
					half Splat4_R2543 = tex2DNode4371.r;
					half Splat3_A2540 = tex2DNode4370.a;
					half Splat3_B2539 = tex2DNode4370.b;
					half Splat3_G2538 = tex2DNode4370.g;
					half Splat3_R2537 = tex2DNode4370.r;
					half Splat2_A2109 = tex2DNode4369.a;
					half Splat2_B2108 = tex2DNode4369.b;
					half Splat2_G2107 = tex2DNode4369.g;
					half Splat2_R2106 = tex2DNode4369.r;
					half Splat1_R1438 = tex2DNode4368.r;
					half Splat1_G1441 = tex2DNode4368.g;
					half Splat1_A1491 = tex2DNode4368.a;
					half Splat1_B1442 = tex2DNode4368.b;
					float3 blendOpSrc4362 = appendResult6259;
					float3 blendOpDest4362 = ( lerpResult1315 * ( ( _Texture_16_Geological_Power * Splat4_A2546 ) + ( ( _Texture_15_Geological_Power * Splat4_B2545 ) + ( ( _Texture_14_Geological_Power * Splat4_G2544 ) + ( ( _Texture_13_Geological_Power * Splat4_R2543 ) + ( ( _Texture_12_Geological_Power * Splat3_A2540 ) + ( ( _Texture_11_Geological_Power * Splat3_B2539 ) + ( ( _Texture_10_Geological_Power * Splat3_G2538 ) + ( ( _Texture_9_Geological_Power * Splat3_R2537 ) + ( ( _Texture_8_Geological_Power * Splat2_A2109 ) + ( ( _Texture_7_Geological_Power * Splat2_B2108 ) + ( ( _Texture_6_Geological_Power * Splat2_G2107 ) + ( ( _Texture_5_Geological_Power * Splat2_R2106 ) + ( ( _Texture_1_Geological_Power * Splat1_R1438 ) + ( ( _Texture_2_Geological_Power * Splat1_G1441 ) + ( ( _Texture_4_Geological_Power * Splat1_A1491 ) + ( _Texture_3_Geological_Power * Splat1_B1442 ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) );
					float3 clampResult5715 = clamp( ( saturate( ( blendOpSrc4362 + blendOpDest4362 ) )) , float3( 0,0,0 ) , float3( 1,1,1 ) );
					
					float4 texArray5480 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Normal, sampler_Texture_Array_Normal, ( Top_Bottom1999 / _Perlin_Normal_Tiling_Close ), (float)_Texture_Perlin_Normal_Index );
					float2 appendResult11_g1070 = (float2(texArray5480.w , texArray5480.y));
					float2 temp_output_4_0_g1070 = ( ( ( appendResult11_g1070 * float2( 2,2 ) ) + float2( -1,-1 ) ) * _Perlin_Normal_Power_Close );
					float2 break8_g1070 = temp_output_4_0_g1070;
					float dotResult5_g1070 = dot( temp_output_4_0_g1070 , temp_output_4_0_g1070 );
					float temp_output_9_0_g1070 = sqrt( ( 1.0 - saturate( dotResult5_g1070 ) ) );
					float3 appendResult20_g1070 = (float3(break8_g1070.x , break8_g1070.y , temp_output_9_0_g1070));
					float4 texArray4374 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Normal, sampler_Texture_Array_Normal, ( Top_Bottom1999 / _Perlin_Normal_Tiling_Far ), (float)_Texture_Perlin_Normal_Index );
					float2 appendResult11_g1069 = (float2(texArray4374.w , texArray4374.y));
					float2 temp_output_4_0_g1069 = ( ( ( appendResult11_g1069 * float2( 2,2 ) ) + float2( -1,-1 ) ) * _Perlin_Normal_Power );
					float2 break8_g1069 = temp_output_4_0_g1069;
					float dotResult5_g1069 = dot( temp_output_4_0_g1069 , temp_output_4_0_g1069 );
					float temp_output_9_0_g1069 = sqrt( ( 1.0 - saturate( dotResult5_g1069 ) ) );
					float3 appendResult20_g1069 = (float3(break8_g1069.x , break8_g1069.y , temp_output_9_0_g1069));
					float3 lerpResult5460 = lerp( appendResult20_g1070 , appendResult20_g1069 , UVmixDistance636);
					float clampResult3775 = clamp( ( ( _Texture_16_Perlin_Power * Splat4_A2546 ) + ( ( _Texture_15_Perlin_Power * Splat4_B2545 ) + ( ( _Texture_14_Perlin_Power * Splat4_G2544 ) + ( ( _Texture_13_Perlin_Power * Splat4_R2543 ) + ( ( _Texture_12_Perlin_Power * Splat3_A2540 ) + ( ( _Texture_11_Perlin_Power * Splat3_B2539 ) + ( ( _Texture_10_Perlin_Power * Splat3_G2538 ) + ( ( _Texture_9_Perlin_Power * Splat3_R2537 ) + ( ( _Texture_8_Perlin_Power * Splat2_A2109 ) + ( ( _Texture_7_Perlin_Power * Splat2_B2108 ) + ( ( _Texture_6_Perlin_Power * Splat2_G2107 ) + ( ( _Texture_5_Perlin_Power * Splat2_R2106 ) + ( ( _Texture_1_Perlin_Power * Splat1_R1438 ) + ( ( _Texture_2_Perlin_Power * Splat1_G1441 ) + ( ( _Texture_4_Perlin_Power * Splat1_A1491 ) + ( _Texture_3_Perlin_Power * Splat1_B1442 ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) , 0.0 , 1.0 );
					float3 lerpResult3776 = lerp( float3( 0,0,1 ) , lerpResult5460 , clampResult3775);
					float4 texArray3299 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Normal, sampler_Texture_Array_Normal, temp_output_3275_0, _Texture_1_Normal_Index );
					float2 appendResult11_g1049 = (float2(texArray3299.w , texArray3299.y));
					float2 temp_output_4_0_g1049 = ( ( ( appendResult11_g1049 * float2( 2,2 ) ) + float2( -1,-1 ) ) * _Texture_1_Normal_Power );
					float2 break8_g1049 = temp_output_4_0_g1049;
					float dotResult5_g1049 = dot( temp_output_4_0_g1049 , temp_output_4_0_g1049 );
					float temp_output_9_0_g1049 = sqrt( ( 1.0 - saturate( dotResult5_g1049 ) ) );
					float3 appendResult20_g1049 = (float3(break8_g1049.x , break8_g1049.y , temp_output_9_0_g1049));
					half3 EmptyNRM6172 = half3(0,0,1);
					float3 ifLocalVar6127 = 0;
					UNITY_BRANCH 
					if( _Texture_1_Normal_Index <= -1.0 )
					ifLocalVar6127 = EmptyNRM6172;
					else
					ifLocalVar6127 = appendResult20_g1049;
					half3 Normal_1569 = ifLocalVar6127;
					float4 texArray3350 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Normal, sampler_Texture_Array_Normal, temp_output_3343_0, _Texture_2_Normal_Index );
					float2 appendResult11_g1048 = (float2(texArray3350.w , texArray3350.y));
					float2 temp_output_4_0_g1048 = ( ( ( appendResult11_g1048 * float2( 2,2 ) ) + float2( -1,-1 ) ) * _Texture_2_Normal_Power );
					float2 break8_g1048 = temp_output_4_0_g1048;
					float dotResult5_g1048 = dot( temp_output_4_0_g1048 , temp_output_4_0_g1048 );
					float temp_output_9_0_g1048 = sqrt( ( 1.0 - saturate( dotResult5_g1048 ) ) );
					float3 appendResult20_g1048 = (float3(break8_g1048.x , break8_g1048.y , temp_output_9_0_g1048));
					float3 ifLocalVar6129 = 0;
					UNITY_BRANCH 
					if( _Texture_2_Normal_Index <= -1.0 )
					ifLocalVar6129 = EmptyNRM6172;
					else
					ifLocalVar6129 = appendResult20_g1048;
					half3 Normal_23361 = ifLocalVar6129;
					float4 texArray3416 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Normal, sampler_Texture_Array_Normal, temp_output_3410_0, _Texture_3_Normal_Index );
					float2 appendResult11_g1050 = (float2(texArray3416.w , texArray3416.y));
					float2 temp_output_4_0_g1050 = ( ( ( appendResult11_g1050 * float2( 2,2 ) ) + float2( -1,-1 ) ) * _Texture_3_Normal_Power );
					float2 break8_g1050 = temp_output_4_0_g1050;
					float dotResult5_g1050 = dot( temp_output_4_0_g1050 , temp_output_4_0_g1050 );
					float temp_output_9_0_g1050 = sqrt( ( 1.0 - saturate( dotResult5_g1050 ) ) );
					float3 appendResult20_g1050 = (float3(break8_g1050.x , break8_g1050.y , temp_output_9_0_g1050));
					float3 ifLocalVar6131 = 0;
					UNITY_BRANCH 
					if( _Texture_3_Normal_Index > -1.0 )
					ifLocalVar6131 = appendResult20_g1050;
					half3 Normal_33452 = ifLocalVar6131;
					float4 texArray3483 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Normal, sampler_Texture_Array_Normal, temp_output_3477_0, _Texture_4_Normal_Index );
					float2 appendResult11_g1051 = (float2(texArray3483.w , texArray3483.y));
					float2 temp_output_4_0_g1051 = ( ( ( appendResult11_g1051 * float2( 2,2 ) ) + float2( -1,-1 ) ) * _Texture_4_Normal_Power );
					float2 break8_g1051 = temp_output_4_0_g1051;
					float dotResult5_g1051 = dot( temp_output_4_0_g1051 , temp_output_4_0_g1051 );
					float temp_output_9_0_g1051 = sqrt( ( 1.0 - saturate( dotResult5_g1051 ) ) );
					float3 appendResult20_g1051 = (float3(break8_g1051.x , break8_g1051.y , temp_output_9_0_g1051));
					float3 ifLocalVar6133 = 0;
					UNITY_BRANCH 
					if( _Texture_4_Normal_Index <= -1.0 )
					ifLocalVar6133 = EmptyNRM6172;
					else
					ifLocalVar6133 = appendResult20_g1051;
					half3 Normal_43519 = ifLocalVar6133;
					float4 layeredBlendVar5639 = tex2DNode4368;
					float3 layeredBlend5639 = ( lerp( lerp( lerp( lerp( float3( 0,0,0 ) , Normal_1569 , layeredBlendVar5639.x ) , Normal_23361 , layeredBlendVar5639.y ) , Normal_33452 , layeredBlendVar5639.z ) , Normal_43519 , layeredBlendVar5639.w ) );
					float4 texArray4424 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Normal, sampler_Texture_Array_Normal, temp_output_4416_0, _Texture_5_Normal_Index );
					float2 appendResult11_g1058 = (float2(texArray4424.w , texArray4424.y));
					float2 temp_output_4_0_g1058 = ( ( ( appendResult11_g1058 * float2( 2,2 ) ) + float2( -1,-1 ) ) * _Texture_5_Normal_Power );
					float2 break8_g1058 = temp_output_4_0_g1058;
					float dotResult5_g1058 = dot( temp_output_4_0_g1058 , temp_output_4_0_g1058 );
					float temp_output_9_0_g1058 = sqrt( ( 1.0 - saturate( dotResult5_g1058 ) ) );
					float3 appendResult20_g1058 = (float3(break8_g1058.x , break8_g1058.y , temp_output_9_0_g1058));
					float3 ifLocalVar6135 = 0;
					UNITY_BRANCH 
					if( _Texture_5_Normal_Index <= -1.0 )
					ifLocalVar6135 = EmptyNRM6172;
					else
					ifLocalVar6135 = appendResult20_g1058;
					half3 Normal_54456 = ifLocalVar6135;
					float4 texArray4493 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Normal, sampler_Texture_Array_Normal, temp_output_4485_0, _Texture_6_Normal_Index );
					float2 appendResult11_g1059 = (float2(texArray4493.w , texArray4493.y));
					float2 temp_output_4_0_g1059 = ( ( ( appendResult11_g1059 * float2( 2,2 ) ) + float2( -1,-1 ) ) * _Texture_6_Normal_Power );
					float2 break8_g1059 = temp_output_4_0_g1059;
					float dotResult5_g1059 = dot( temp_output_4_0_g1059 , temp_output_4_0_g1059 );
					float temp_output_9_0_g1059 = sqrt( ( 1.0 - saturate( dotResult5_g1059 ) ) );
					float3 appendResult20_g1059 = (float3(break8_g1059.x , break8_g1059.y , temp_output_9_0_g1059));
					float3 ifLocalVar6138 = 0;
					UNITY_BRANCH 
					if( _Texture_6_Normal_Index <= -1.0 )
					ifLocalVar6138 = EmptyNRM6172;
					else
					ifLocalVar6138 = appendResult20_g1059;
					half3 Normal_64537 = ifLocalVar6138;
					float4 texArray4567 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Normal, sampler_Texture_Array_Normal, temp_output_4559_0, _Texture_7_Normal_Index );
					float2 appendResult11_g1056 = (float2(texArray4567.w , texArray4567.y));
					float2 temp_output_4_0_g1056 = ( ( ( appendResult11_g1056 * float2( 2,2 ) ) + float2( -1,-1 ) ) * _Texture_7_Normal_Power );
					float2 break8_g1056 = temp_output_4_0_g1056;
					float dotResult5_g1056 = dot( temp_output_4_0_g1056 , temp_output_4_0_g1056 );
					float temp_output_9_0_g1056 = sqrt( ( 1.0 - saturate( dotResult5_g1056 ) ) );
					float3 appendResult20_g1056 = (float3(break8_g1056.x , break8_g1056.y , temp_output_9_0_g1056));
					float3 ifLocalVar6140 = 0;
					UNITY_BRANCH 
					if( _Texture_7_Normal_Index <= -1.0 )
					ifLocalVar6140 = EmptyNRM6172;
					else
					ifLocalVar6140 = appendResult20_g1056;
					half3 Normal_74615 = ifLocalVar6140;
					float4 texArray4641 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Normal, sampler_Texture_Array_Normal, temp_output_4633_0, _Texture_8_Normal_Index );
					float2 appendResult11_g1057 = (float2(texArray4641.w , texArray4641.y));
					float2 temp_output_4_0_g1057 = ( ( ( appendResult11_g1057 * float2( 2,2 ) ) + float2( -1,-1 ) ) * _Texture_8_Normal_Power );
					float2 break8_g1057 = temp_output_4_0_g1057;
					float dotResult5_g1057 = dot( temp_output_4_0_g1057 , temp_output_4_0_g1057 );
					float temp_output_9_0_g1057 = sqrt( ( 1.0 - saturate( dotResult5_g1057 ) ) );
					float3 appendResult20_g1057 = (float3(break8_g1057.x , break8_g1057.y , temp_output_9_0_g1057));
					float3 ifLocalVar6142 = 0;
					UNITY_BRANCH 
					if( _Texture_8_Normal_Index <= -1.0 )
					ifLocalVar6142 = EmptyNRM6172;
					else
					ifLocalVar6142 = appendResult20_g1057;
					half3 Normal_84690 = ifLocalVar6142;
					float4 layeredBlendVar5640 = tex2DNode4369;
					float3 layeredBlend5640 = ( lerp( lerp( lerp( lerp( layeredBlend5639 , Normal_54456 , layeredBlendVar5640.x ) , Normal_64537 , layeredBlendVar5640.y ) , Normal_74615 , layeredBlendVar5640.z ) , Normal_84690 , layeredBlendVar5640.w ) );
					float4 texArray4788 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Normal, sampler_Texture_Array_Normal, temp_output_4712_0, _Texture_9_Normal_Index );
					float2 appendResult11_g1062 = (float2(texArray4788.w , texArray4788.y));
					float2 temp_output_4_0_g1062 = ( ( ( appendResult11_g1062 * float2( 2,2 ) ) + float2( -1,-1 ) ) * _Texture_9_Normal_Power );
					float2 break8_g1062 = temp_output_4_0_g1062;
					float dotResult5_g1062 = dot( temp_output_4_0_g1062 , temp_output_4_0_g1062 );
					float temp_output_9_0_g1062 = sqrt( ( 1.0 - saturate( dotResult5_g1062 ) ) );
					float3 appendResult20_g1062 = (float3(break8_g1062.x , break8_g1062.y , temp_output_9_0_g1062));
					float3 ifLocalVar6144 = 0;
					UNITY_BRANCH 
					if( _Texture_9_Normal_Index <= -1.0 )
					ifLocalVar6144 = EmptyNRM6172;
					else
					ifLocalVar6144 = appendResult20_g1062;
					half3 Normal_94897 = ifLocalVar6144;
					float4 texArray4822 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Normal, sampler_Texture_Array_Normal, temp_output_4793_0, _Texture_10_Normal_Index );
					float2 appendResult11_g1061 = (float2(texArray4822.w , texArray4822.y));
					float2 temp_output_4_0_g1061 = ( ( ( appendResult11_g1061 * float2( 2,2 ) ) + float2( -1,-1 ) ) * _Texture_10_Normal_Power );
					float2 break8_g1061 = temp_output_4_0_g1061;
					float dotResult5_g1061 = dot( temp_output_4_0_g1061 , temp_output_4_0_g1061 );
					float temp_output_9_0_g1061 = sqrt( ( 1.0 - saturate( dotResult5_g1061 ) ) );
					float3 appendResult20_g1061 = (float3(break8_g1061.x , break8_g1061.y , temp_output_9_0_g1061));
					float3 ifLocalVar6146 = 0;
					UNITY_BRANCH 
					if( _Texture_10_Normal_Index <= -1.0 )
					ifLocalVar6146 = EmptyNRM6172;
					else
					ifLocalVar6146 = appendResult20_g1061;
					half3 Normal_104918 = ifLocalVar6146;
					float4 texArray4856 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Normal, sampler_Texture_Array_Normal, temp_output_4817_0, _Texture_11_Normal_Index );
					float2 appendResult11_g1063 = (float2(texArray4856.w , texArray4856.y));
					float2 temp_output_4_0_g1063 = ( ( ( appendResult11_g1063 * float2( 2,2 ) ) + float2( -1,-1 ) ) * _Texture_11_Normal_Power );
					float2 break8_g1063 = temp_output_4_0_g1063;
					float dotResult5_g1063 = dot( temp_output_4_0_g1063 , temp_output_4_0_g1063 );
					float temp_output_9_0_g1063 = sqrt( ( 1.0 - saturate( dotResult5_g1063 ) ) );
					float3 appendResult20_g1063 = (float3(break8_g1063.x , break8_g1063.y , temp_output_9_0_g1063));
					float3 ifLocalVar6148 = 0;
					UNITY_BRANCH 
					if( _Texture_11_Normal_Index <= -1.0 )
					ifLocalVar6148 = EmptyNRM6172;
					else
					ifLocalVar6148 = appendResult20_g1063;
					half3 Normal_114948 = ifLocalVar6148;
					float4 texArray4870 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Normal, sampler_Texture_Array_Normal, temp_output_4849_0, _Texture_12_Normal_Index );
					float2 appendResult11_g1060 = (float2(texArray4870.w , texArray4870.y));
					float2 temp_output_4_0_g1060 = ( ( ( appendResult11_g1060 * float2( 2,2 ) ) + float2( -1,-1 ) ) * _Texture_12_Normal_Power );
					float2 break8_g1060 = temp_output_4_0_g1060;
					float dotResult5_g1060 = dot( temp_output_4_0_g1060 , temp_output_4_0_g1060 );
					float temp_output_9_0_g1060 = sqrt( ( 1.0 - saturate( dotResult5_g1060 ) ) );
					float3 appendResult20_g1060 = (float3(break8_g1060.x , break8_g1060.y , temp_output_9_0_g1060));
					float3 ifLocalVar6150 = 0;
					UNITY_BRANCH 
					if( _Texture_12_Normal_Index <= -1.0 )
					ifLocalVar6150 = EmptyNRM6172;
					else
					ifLocalVar6150 = appendResult20_g1060;
					half3 Normal_124962 = ifLocalVar6150;
					float4 layeredBlendVar5641 = tex2DNode4370;
					float3 layeredBlend5641 = ( lerp( lerp( lerp( lerp( layeredBlend5640 , Normal_94897 , layeredBlendVar5641.x ) , Normal_104918 , layeredBlendVar5641.y ) , Normal_114948 , layeredBlendVar5641.z ) , Normal_124962 , layeredBlendVar5641.w ) );
					float4 texArray5120 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Normal, sampler_Texture_Array_Normal, temp_output_5037_0, _Texture_13_Normal_Index );
					float2 appendResult11_g1067 = (float2(texArray5120.w , texArray5120.y));
					float2 temp_output_4_0_g1067 = ( ( ( appendResult11_g1067 * float2( 2,2 ) ) + float2( -1,-1 ) ) * _Texture_13_Normal_Power );
					float2 break8_g1067 = temp_output_4_0_g1067;
					float dotResult5_g1067 = dot( temp_output_4_0_g1067 , temp_output_4_0_g1067 );
					float temp_output_9_0_g1067 = sqrt( ( 1.0 - saturate( dotResult5_g1067 ) ) );
					float3 appendResult20_g1067 = (float3(break8_g1067.x , break8_g1067.y , temp_output_9_0_g1067));
					float3 ifLocalVar6152 = 0;
					UNITY_BRANCH 
					if( _Texture_13_Normal_Index <= -1.0 )
					ifLocalVar6152 = EmptyNRM6172;
					else
					ifLocalVar6152 = appendResult20_g1067;
					half3 Normal_135059 = ifLocalVar6152;
					float4 texArray5178 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Normal, sampler_Texture_Array_Normal, temp_output_5022_0, _Texture_14_Normal_Index );
					float2 appendResult11_g1068 = (float2(texArray5178.w , texArray5178.y));
					float2 temp_output_4_0_g1068 = ( ( ( appendResult11_g1068 * float2( 2,2 ) ) + float2( -1,-1 ) ) * _Texture_14_Normal_Power );
					float2 break8_g1068 = temp_output_4_0_g1068;
					float dotResult5_g1068 = dot( temp_output_4_0_g1068 , temp_output_4_0_g1068 );
					float temp_output_9_0_g1068 = sqrt( ( 1.0 - saturate( dotResult5_g1068 ) ) );
					float3 appendResult20_g1068 = (float3(break8_g1068.x , break8_g1068.y , temp_output_9_0_g1068));
					float3 ifLocalVar6154 = 0;
					UNITY_BRANCH 
					if( _Texture_14_Normal_Index <= -1.0 )
					ifLocalVar6154 = EmptyNRM6172;
					else
					ifLocalVar6154 = appendResult20_g1068;
					half3 Normal_145196 = ifLocalVar6154;
					float4 texArray5246 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Normal, sampler_Texture_Array_Normal, temp_output_5226_0, _Texture_15_Normal_Index );
					float2 appendResult11_g1066 = (float2(texArray5246.w , texArray5246.y));
					float2 temp_output_4_0_g1066 = ( ( ( appendResult11_g1066 * float2( 2,2 ) ) + float2( -1,-1 ) ) * _Texture_15_Normal_Power );
					float2 break8_g1066 = temp_output_4_0_g1066;
					float dotResult5_g1066 = dot( temp_output_4_0_g1066 , temp_output_4_0_g1066 );
					float temp_output_9_0_g1066 = sqrt( ( 1.0 - saturate( dotResult5_g1066 ) ) );
					float3 appendResult20_g1066 = (float3(break8_g1066.x , break8_g1066.y , temp_output_9_0_g1066));
					float3 ifLocalVar6156 = 0;
					UNITY_BRANCH 
					if( _Texture_15_Normal_Index <= -1.0 )
					ifLocalVar6156 = EmptyNRM6172;
					else
					ifLocalVar6156 = appendResult20_g1066;
					half3 Normal_155280 = ifLocalVar6156;
					float4 texArray5099 = SAMPLE_TEXTURE2D_ARRAY(_Texture_Array_Normal, sampler_Texture_Array_Normal, temp_output_5083_0, _Texture_16_Normal_Index );
					float2 appendResult11_g1065 = (float2(texArray5099.w , texArray5099.y));
					float2 temp_output_4_0_g1065 = ( ( ( appendResult11_g1065 * float2( 2,2 ) ) + float2( -1,-1 ) ) * _Texture_16_Normal_Power );
					float2 break8_g1065 = temp_output_4_0_g1065;
					float dotResult5_g1065 = dot( temp_output_4_0_g1065 , temp_output_4_0_g1065 );
					float temp_output_9_0_g1065 = sqrt( ( 1.0 - saturate( dotResult5_g1065 ) ) );
					float3 appendResult20_g1065 = (float3(break8_g1065.x , break8_g1065.y , temp_output_9_0_g1065));
					float3 ifLocalVar6158 = 0;
					UNITY_BRANCH 
					if( _Texture_16_Normal_Index <= -1.0 )
					ifLocalVar6158 = EmptyNRM6172;
					else
					ifLocalVar6158 = appendResult20_g1065;
					half3 Normal_164696 = ifLocalVar6158;
					float4 layeredBlendVar5642 = tex2DNode4371;
					float3 layeredBlend5642 = ( lerp( lerp( lerp( lerp( layeredBlend5641 , Normal_135059 , layeredBlendVar5642.x ) , Normal_145196 , layeredBlendVar5642.y ) , Normal_155280 , layeredBlendVar5642.z ) , Normal_164696 , layeredBlendVar5642.w ) );
					float3 normalizeResult3901 = normalize( layeredBlend5642 );
					
					surfaceDescription.Albedo = clampResult5715;
					surfaceDescription.Normal = BlendNormal( lerpResult3776 , normalizeResult3901 );
					surfaceDescription.Emission = 0;
					surfaceDescription.Specular = ( ( appendResult6259 * float3( 0.3,0.3,0.3 ) ) * _Terrain_Specular );
					surfaceDescription.Metallic = 0;
					surfaceDescription.Smoothness = ( layeredBlend5646.w * _Terrain_Smoothness );
					surfaceDescription.Occlusion = _Ambient_Occlusion_Power;
					surfaceDescription.Alpha = 1;
					surfaceDescription.AlphaClipThreshold = 0;

	#ifdef _MATERIAL_FEATURE_CLEAR_COAT
					surfaceDescription.CoatMask = 0;
	#endif

	#if defined(_MATERIAL_FEATURE_SUBSURFACE_SCATTERING) || defined(_MATERIAL_FEATURE_TRANSMISSION)
					surfaceDescription.DiffusionProfile = asfloat (uint(1074012128);
	#endif

	#ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
					surfaceDescription.SubsurfaceMask = 1;
	#endif

	#ifdef _MATERIAL_FEATURE_TRANSMISSION
					surfaceDescription.Thickness = 0;
	#endif

	#ifdef _MATERIAL_FEATURE_ANISOTROPY
					surfaceDescription.Anisotropy = 0;
	#endif

	#ifdef _MATERIAL_FEATURE_IRIDESCENCE
					surfaceDescription.IridescenceThickness = 0;
					surfaceDescription.IridescenceMask = 1;
	#endif

	#ifdef _MATERIAL_FEATURE_TRANSPARENCY
					surfaceDescription.IndexOfRefraction = 1;
					surfaceDescription.TransmittanceColor = float3( 1, 1, 1 );
					surfaceDescription.TransmittanceAbsorptionDistance = 1000000;
					surfaceDescription.TransmittanceMask = 0;
	#endif
					GetSurfaceAndBuiltinData(surfaceDescription, input, normalizedWorldViewDir, posInput, surfaceData, builtinData);

					BSDFData bsdfData = ConvertSurfaceDataToBSDFData(input.positionSS.xy, surfaceData);

					PreLightData preLightData = GetPreLightData(normalizedWorldViewDir, posInput, bsdfData);

					outColor = float4(0.0, 0.0, 0.0, 0.0);

					{
				#ifdef _SURFACE_TYPE_TRANSPARENT
						uint featureFlags = LIGHT_FEATURE_MASK_FLAGS_TRANSPARENT;
				#else
						uint featureFlags = LIGHT_FEATURE_MASK_FLAGS_OPAQUE;
				#endif
						float3 diffuseLighting;
						float3 specularLighting;

						LightLoop(normalizedWorldViewDir, posInput, preLightData, bsdfData, builtinData, featureFlags, diffuseLighting, specularLighting);

				#ifdef OUTPUT_SPLIT_LIGHTING
						if (_EnableSubsurfaceScattering != 0 && ShouldOutputSplitLighting(bsdfData))
						{
							outColor = float4(specularLighting, 1.0);
							outDiffuseLighting = float4(TagLightingForSSS(diffuseLighting), 1.0);
						}
						else
						{
							outColor = float4(diffuseLighting + specularLighting, 1.0);
							outDiffuseLighting = 0;
						}
						ENCODE_INTO_SSSBUFFER(surfaceData, posInput.positionSS, outSSSBuffer);
				#else
						outColor = ApplyBlendMode(diffuseLighting, specularLighting, builtinData.opacity);
						outColor = EvaluateAtmosphericScattering(posInput, normalizedWorldViewDir, outColor);
				#endif
					#ifdef _WRITE_TRANSPARENT_MOTION_VECTOR
						//VaryingsPassToPS inputPass = UnpackVaryingsPassToPS (packedInput.vpass);
						//bool forceNoMotion = any (unity_MotionVectorsParams.yw == 0.0);
						//if (forceNoMotion)
						//{
						//	outMotionVec = float4(2.0, 0.0, 0.0, 0.0);
						//}
						//else
						//{
						//	float2 motionVec = CalculateMotionVector (inputPass.positionCS, inputPass.previousPositionCS);
						//	EncodeMotionVector (motionVec * 0.5, outMotionVec);
						//	outMotionVec.zw = 1.0;
						//}
					#endif
					}

				#ifdef _DEPTHOFFSET_ON
					outputDepth = posInput.deviceDepth;
				#endif
				}

            ENDHLSL
        }
		UsePass "Hidden/Nature/Terrain/Utilities/PICKING"
        UsePass "Hidden/Nature/Terrain/Utilities/SELECTION"
		
    }
    FallBack "Hidden/InternalErrorShader"
	
	Dependency "BaseMapShader"="CTS/HDRP/CTS Terrain Shader Lite LOD"

	
}